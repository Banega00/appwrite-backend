var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.481,1,2.251]],["body/controllers/AppController.html",[0,2.432,1,3.695,2,1.713,3,0.373,4,0.373,5,0.328,6,3.809,7,0.619,8,1.304,9,6.279,10,2.496,11,0.026,12,5.554,13,0.853,14,4.511,15,1.059,16,0.515,17,0.566,18,3.33,19,3.809,20,0.373,21,0.053,22,2.496,23,1.492,24,1.136,25,4.511,26,0.021,27,0.021]],["title/modules/AppModule.html",[28,1.045,29,2.251]],["body/modules/AppModule.html",[1,3.268,2,1.607,3,0.247,4,0.247,5,0.218,11,0.027,16,0.599,17,0.375,18,3.236,19,2.528,20,0.247,21,0.035,26,0.016,27,0.016,28,1.518,29,4.417,30,1.311,31,1.22,32,1.526,33,1.526,34,1.311,35,2.504,36,1.526,37,2.528,38,2.528,39,2.528,40,3.773,41,3.533,42,3.533,43,3.533,44,2.158,45,1.526,46,1.526,47,2.994,48,2.558,49,2.994,50,2.994,51,2.994,52,2.528,53,2.994,54,2.528,55,1.412,56,1.526,57,2.994,58,2.994,59,2.528,60,1.992,61,3.268,62,1.061,63,2.994,64,2.994,65,2.994,66,2.994,67,1.311,68,2.994,69,2.528,70,2.994,71,3.141,72,2.994,73,2.994,74,2.528,75,2.504,76,2.994,77,1.992,78,1.809,79,2.994,80,2.994,81,2.994,82,2.994,83,2.994,84,2.994,85,2.994,86,2.994,87,2.528,88,2.994,89,2.994]],["title/injectables/AppService.html",[18,1.872,90,0.349]],["body/injectables/AppService.html",[3,0.369,4,0.369,5,0.325,7,0.612,8,1.296,11,0.027,13,0.844,15,1.048,16,0.512,17,0.56,18,3.053,20,0.369,21,0.052,24,1.124,26,0.021,27,0.021,90,0.57,91,1.379,92,3.768,93,6.256,94,4.462,95,1.207,96,4.659,97,2.415,98,1.581,99,4.462,100,4.462,101,4.462,102,4.462,103,3.768]],["title/modules/AppwriteModule.html",[28,1.045,104,1.724]],["body/modules/AppwriteModule.html",[2,1.63,3,0.355,4,0.355,5,0.312,11,0.026,16,0.499,17,0.538,20,0.355,21,0.05,26,0.021,27,0.021,28,1.819,30,1.88,31,1.749,32,2.189,33,2.189,34,1.88,35,3,36,3,44,2.746,45,2.189,46,2.189,104,3.356,105,3.625,106,3.625,107,3.625,108,3.224,109,4.293,110,4.293]],["title/injectables/AppwriteService.html",[90,0.349,108,1.595]],["body/injectables/AppwriteService.html",[3,0.113,4,0.113,5,0.1,7,0.188,8,0.54,11,0.027,13,1.063,15,1.105,16,0.361,17,0.172,20,0.113,21,0.016,23,0.761,24,0.98,26,0.009,27,0.009,67,2.277,75,2.149,90,0.237,91,0.423,95,1.071,98,2.088,103,1.155,108,1.085,111,1.155,112,1.007,113,2.807,114,4.705,115,2.976,116,3.286,117,1.98,118,4.216,119,2.976,120,2.513,121,3.392,122,3.489,123,2.3,124,3.489,125,1.707,126,2.3,127,4.216,128,2.3,129,2.3,130,0.62,131,1.368,132,1.989,133,2.114,134,1.368,135,1.129,136,1.16,137,1.061,138,1.368,139,1.212,140,2.3,141,1.368,142,4.216,143,1.368,144,1.707,145,1.368,146,1.931,147,3.489,148,2.3,149,1.368,150,1.368,151,1.368,152,2.3,153,3.489,154,1.984,155,1.368,156,1.942,157,4.216,158,2.3,159,1.647,160,1.98,161,1.368,162,1.368,163,3.892,164,1.368,165,2.3,166,1.368,167,1.368,168,1.368,169,1.707,170,0.827,171,2.322,172,3.632,173,1.368,174,1.155,175,1.368,176,1.368,177,1.368,178,0.91,179,1.015,180,0.91,181,1.368,182,1.368,183,1.368,184,0.757,185,1.854,186,1.707,187,2.3,188,2.946,189,3.489,190,1.368,191,3.892,192,1.368,193,1.368,194,1.368,195,1.155,196,1.368,197,1.155,198,1.015,199,2.3,200,1.368,201,2.3,202,0.91,203,1.015,204,0.91,205,1.368,206,1.015,207,1.368,208,1.368,209,4.482,210,1.368,211,1.368,212,1.368,213,3.321,214,1.368,215,1.368,216,1.368,217,1.368,218,1.368,219,2.3,220,2.3,221,2.3,222,1.368,223,1.368,224,1.707,225,1.368,226,1.368,227,1.799,228,1.368,229,1.368,230,1.368,231,2.3,232,1.368,233,1.368,234,2.3,235,2.3,236,1.368,237,2.3,238,2.3,239,1.368,240,2.976,241,4.482,242,0.91,243,3.489,244,1.368,245,0.91,246,1.368,247,1.368,248,1.155,249,1.368,250,1.368,251,1.015,252,0.91,253,1.368,254,1.368,255,1.368,256,1.015,257,1.368,258,1.155,259,1.368,260,2.3,261,1.368,262,1.368,263,1.368,264,1.368,265,1.368,266,1.368,267,2.976,268,1.368,269,0.827,270,1.015,271,0.599,272,1.368,273,2.3,274,1.368,275,1.942,276,1.368,277,1.368,278,1.942,279,1.368,280,1.368,281,1.942,282,1.368,283,1.015,284,1.015,285,1.368,286,1.368,287,1.368,288,1.368,289,1.368,290,1.368]],["title/injectables/AppwriteSessionGuard.html",[90,0.349,291,2.044]],["body/injectables/AppwriteSessionGuard.html",[3,0.24,4,0.24,5,0.211,7,0.398,8,0.973,11,0.027,13,0.783,15,0.682,16,0.537,17,0.364,20,0.342,21,0.034,24,1.216,26,0.016,27,0.016,62,1.865,67,2.305,75,2.112,78,1.754,90,0.428,91,0.897,95,0.906,108,2.81,113,2.484,121,2.672,130,1.117,133,2.81,135,1.043,136,0.843,137,1.043,139,1.183,178,1.932,185,1.72,188,4.701,213,1.607,271,2.305,291,2.503,292,2.154,293,4.142,294,2.903,295,5.788,296,2.462,297,2.903,298,4.142,299,4.446,300,2.903,301,2.903,302,2.452,303,2.903,304,2.278,305,1.754,306,2.154,307,2.154,308,2.154,309,1.754,310,1.607,311,2.452,312,3.583,313,2.452,314,2.452,315,2.452,316,2.452,317,2.452,318,2.452,319,4.829,320,2.903,321,2.903,322,2.903,323,2.903,324,5.265,325,2.903,326,2.903,327,2.903,328,2.903,329,2.452,330,2.452,331,2.154,332,2.903,333,2.903,334,2.452,335,1.954,336,2.903,337,2.903]],["title/controllers/AuthController.html",[0,1.481,338,2.251]],["body/controllers/AuthController.html",[0,1.51,2,0.86,3,0.187,4,0.187,5,0.165,7,0.311,8,0.81,10,1.909,11,0.027,13,0.652,15,0.81,16,0.51,17,0.284,20,0.187,21,0.026,23,1.141,24,0.868,26,0.013,27,0.013,62,1.222,67,0.992,75,1.758,95,0.914,97,2.483,113,1.627,121,2.929,130,0.611,135,0.868,136,0.702,137,0.868,139,1.405,159,1.253,185,1.291,213,1.909,224,3.927,227,3.198,269,1.369,271,2.675,296,1.155,304,2.497,305,1.369,310,1.909,330,2.912,331,1.681,335,1.627,338,2.295,339,1.913,340,4.469,341,3.942,342,2.265,343,2.559,344,4.668,345,6.109,346,3.943,347,3.84,348,3.526,349,4.469,350,4.469,351,2.584,352,3.464,353,3.106,354,2.265,355,2.265,356,2.265,357,4.469,358,3.106,359,3.449,360,3.449,361,2.265,362,2.559,363,2.912,364,1.913,365,2.559,366,1.681,367,2.265,368,2.265,369,1.913,370,1.507,371,1.913,372,2.311,373,1.913,374,1.913,375,1.681,376,3.098,377,4.083,378,1.253,379,2.265,380,2.265,381,1.913,382,2.559,383,2.265,384,2.265,385,2.265,386,2.265,387,2.265,388,2.265,389,2.265,390,2.265,391,2.265,392,2.265,393,2.265,394,2.912,395,1.758,396,1.507,397,1.681,398,1.681,399,2.265,400,2.265,401,2.265,402,2.265,403,2.265,404,2.265]],["title/modules/AuthModule.html",[28,1.045,40,2.044]],["body/modules/AuthModule.html",[2,1.94,3,0.326,4,0.326,5,0.288,11,0.026,16,0.575,17,0.496,20,0.326,21,0.046,26,0.02,27,0.02,28,1.75,30,1.731,31,1.61,32,2.015,33,2.015,34,1.731,35,2.887,36,2.015,40,4.032,44,2.605,45,2.015,46,2.015,48,3.088,104,3.236,291,3.836,338,3.768,372,3.513,373,3.338,374,3.338,405,3.338,406,3.338,407,3.953,408,3.953,409,3.953,410,2.933]],["title/injectables/AuthService.html",[90,0.349,372,1.872]],["body/injectables/AuthService.html",[3,0.297,4,0.297,5,0.262,7,0.493,8,1.128,11,0.027,13,1.023,15,1.128,16,0.446,17,0.451,20,0.297,21,0.042,22,1.992,23,1.191,24,1.21,26,0.018,27,0.018,90,0.496,91,1.112,95,1.263,98,2.191,108,2.918,121,3.423,130,0.971,135,1.21,136,1.175,137,1.21,139,1.957,146,1.992,159,2.993,160,3.197,185,1.485,213,2.659,269,2.903,270,3.565,271,2.104,275,3.039,278,3.039,281,3.039,306,2.67,340,4.873,341,4.057,346,3.197,372,2.659,411,3.039,412,3.039,413,3.599,414,3.599,415,4.804,416,3.599,417,3.599,418,3.599]],["title/injectables/ConfigService.html",[90,0.349,132,1.595]],["body/injectables/ConfigService.html",[3,0.277,4,0.277,5,0.244,7,0.46,8,1.076,11,0.027,13,1.173,15,1.076,16,0.311,17,0.421,20,0.277,21,0.039,24,1.526,26,0.018,27,0.018,90,0.473,91,1.037,95,0.735,98,2.147,117,2.234,130,1.408,132,2.162,135,0.845,137,0.845,186,3.873,198,2.491,202,3.05,203,3.401,204,3.05,283,2.491,419,2.491,420,4.736,421,4.584,422,4.407,423,4.407,424,4.407,425,3.357,426,3.401,427,3.357,428,3.357,429,2.537,430,3.357,431,3.357,432,3.357,433,3.357,434,3.357,435,3.357,436,3.357,437,3.357,438,2.029,439,3.05,440,3.871,441,2.835,442,2.835,443,2.835,444,2.835,445,2.835,446,2.835,447,2.835,448,2.835,449,2.491,450,2.835,451,2.835,452,2.835,453,3.871,454,2.835,455,2.835]],["title/injectables/ContextService.html",[90,0.349,133,1.595]],["body/injectables/ContextService.html",[3,0.304,4,0.304,5,0.268,7,0.505,8,1.146,11,0.027,13,1.035,15,1.146,16,0.453,17,0.462,20,0.403,21,0.043,22,2.039,23,1.219,24,0.928,26,0.019,27,0.019,55,1.738,56,1.878,90,0.504,91,1.139,95,1.197,130,0.994,133,2.302,135,1.467,136,1.114,137,1.378,156,4.62,170,3.52,185,1.508,198,3.62,206,3.62,271,2.137,284,4.322,426,3.62,456,2.734,457,3.111,458,4.143,459,3.684,460,3.684,461,4.88,462,3.684,463,3.247,464,4.06,465,4.121,466,4.121,467,4.88,468,3.684,469,3.684]],["title/classes/CreateReservationDto.html",[21,0.039,470,1.872]],["body/classes/CreateReservationDto.html",[3,0.269,4,0.269,5,0.237,7,0.446,10,3.062,11,0.026,13,1.046,16,0.416,20,0.269,21,0.052,26,0.017,27,0.017,71,3.327,75,1.658,98,2.22,112,1.964,136,1.335,242,3.416,245,3.863,251,3.809,256,3.809,378,1.8,395,2.286,429,2.841,470,2.482,471,1.658,472,4.902,473,2.413,474,4.673,475,4.485,476,4.485,477,4.485,478,3.252,479,3.252,480,3.787,481,3.252,482,3.252,483,2.746,484,3.252,485,3.252,486,3.252,487,4.485,488,3.252,489,4.485,490,4.485,491,4.485,492,3.252,493,4.902,494,5.133,495,4.485,496,3.252,497,4.485,498,3.252,499,3.787,500,4.485,501,4.485,502,2.413,503,4.106,504,3.252,505,3.252,506,2.746,507,3.252,508,3.252,509,3.252]],["title/classes/CustomError.html",[21,0.039,510,2.251]],["body/classes/CustomError.html",[3,0.245,4,0.245,5,0.216,7,0.407,11,0.026,13,1.133,20,0.347,21,0.035,23,2.213,26,0.016,27,0.016,95,0.649,97,2.681,98,2.17,112,1.841,120,5.649,130,1.134,135,0.747,136,1.22,137,1.413,139,1.208,185,0.916,335,3.068,351,1.641,395,3.056,396,3.734,429,3.389,471,1.512,510,2.798,511,4.544,512,2.2,513,3.551,514,5.172,515,5.612,516,2.966,517,2.966,518,3.551,519,2.966,520,2.966,521,2.966,522,2.966,523,2.966,524,2.966,525,1.973,526,2.504,527,2.504,528,2.504,529,2.504,530,2.2,531,2.2,532,2.504,533,2.504,534,2.2,535,2.504,536,2.966]],["title/injectables/CustomLoggingService.html",[62,1.198,90,0.349]],["body/injectables/CustomLoggingService.html",[3,0.338,4,0.277,5,0.094,7,0.177,8,0.514,11,0.027,13,0.963,15,0.67,16,0.349,17,0.162,20,0.181,21,0.015,23,0.943,24,1.029,26,0.008,27,0.008,28,0.881,55,0.608,56,0.658,60,0.858,61,1.897,62,0.775,69,2.837,71,0.957,77,2.236,78,2.99,90,0.226,91,0.399,95,0.735,97,0.565,98,2.161,112,0.958,113,1.345,130,0.59,135,0.846,136,0.934,137,0.846,139,1.162,159,2.538,160,1.457,169,3.234,170,2.634,185,1.477,227,1.323,252,1.457,258,1.848,284,2.791,296,1.713,302,2.408,304,1.585,308,0.957,335,2.056,395,2.933,429,0.714,457,1.089,458,2.721,463,1.457,480,3.177,518,3.453,537,0.957,538,2.851,539,5.222,540,2.851,541,2.851,542,2.851,543,2.851,544,2.851,545,4.359,546,2.189,547,2.851,548,3.681,549,1.29,550,2.189,551,4.301,552,1.29,553,2.189,554,3.36,555,1.29,556,2.189,557,1.29,558,1.29,559,2.189,560,2.408,561,3.36,562,2.189,563,2.408,564,2.189,565,2.408,566,2.189,567,2.408,568,3.36,569,2.189,570,2.408,571,1.29,572,1.29,573,1.848,574,1.848,575,1.848,576,1.29,577,2.189,578,3.36,579,2.189,580,3.762,581,4.089,582,5.974,583,3.36,584,2.189,585,3.36,586,3.36,587,2.189,588,2.189,589,3.762,590,2.189,591,3.36,592,2.189,593,1.29,594,1.29,595,1.29,596,2.189,597,1.29,598,1.29,599,1.29,600,1.29,601,1.089,602,1.089,603,1.29,604,1.29,605,1.29,606,1.29,607,1.29,608,1.29,609,1.089,610,1.29,611,1.089,612,1.29,613,1.29,614,1.29,615,1.29,616,4.359,617,1.29,618,4.089,619,2.851,620,0.957,621,2.851,622,2.851,623,1.29,624,2.189,625,1.29,626,1.29,627,2.189,628,2.189,629,1.29,630,2.189,631,1.29,632,1.29,633,1.29,634,3.873,635,2.189,636,1.29,637,1.29,638,1.29,639,1.29,640,2.851,641,1.29,642,1.29,643,1.089,644,1.29,645,1.29,646,2.189,647,0.957,648,0.957,649,1.29]],["title/classes/GlobalExceptionFilter.html",[21,0.039,650,2.509]],["body/classes/GlobalExceptionFilter.html",[3,0.281,4,0.183,5,0.162,7,0.304,8,0.798,11,0.027,13,0.642,15,0.522,16,0.487,17,0.278,20,0.183,21,0.026,24,1.039,26,0.013,27,0.013,62,1.637,74,1.875,77,3.075,78,2.493,95,0.743,97,2.468,113,1.946,130,0.916,132,2.578,133,2.578,135,0.855,136,0.692,137,0.855,139,0.905,159,1.229,184,1.88,185,1.689,227,2.493,296,1.732,304,2.477,305,1.342,307,1.648,309,1.342,334,2.868,335,2.725,351,1.229,362,1.648,395,2.677,396,3.075,449,3.061,471,1.132,483,3.902,510,2.26,525,1.478,530,1.648,531,1.648,534,2.52,620,3.428,648,3.428,650,2.52,651,3.484,652,4.878,653,1.875,654,4.125,655,1.648,656,2.221,657,3.397,658,4.621,659,2.221,660,3.397,661,3.397,662,1.875,663,3.397,664,2.221,665,2.221,666,2.221,667,2.221,668,2.221,669,2.221,670,2.221,671,2.221,672,2.221,673,2.221,674,4.125,675,4.125,676,3.397,677,2.221,678,2.221,679,2.868,680,2.868,681,5.252,682,4.125,683,2.221,684,3.902,685,4.621,686,4.205,687,4.205,688,3.902,689,2.221,690,4.621,691,2.221,692,2.221,693,2.221,694,2.221,695,2.221,696,2.221,697,3.397,698,4.125,699,2.221,700,3.397,701,3.397,702,2.221,703,2.221,704,2.221,705,2.221,706,2.221,707,2.221]],["title/injectables/HelpersService.html",[90,0.349,708,2.044]],["body/injectables/HelpersService.html",[3,0.418,4,0.418,5,0.368,11,0.025,16,0.469,17,0.635,20,0.418,21,0.059,26,0.023,27,0.023,90,0.614,91,1.564,708,3.596,709,4.273]],["title/injectables/LoggingMiddleware.html",[90,0.349,710,2.251]],["body/injectables/LoggingMiddleware.html",[3,0.305,4,0.305,5,0.269,7,0.507,8,1.148,11,0.027,13,0.924,15,0.868,16,0.541,17,0.463,20,0.305,21,0.043,23,1.222,26,0.019,27,0.019,55,1.743,56,1.884,62,2.066,67,1.618,90,0.505,91,1.142,95,1.07,113,2.306,130,1.319,135,1.231,136,0.995,137,1.231,184,2.045,296,2.493,304,2.585,309,2.233,370,2.459,371,4.627,458,4.23,463,3.646,655,2.742,710,3.253,711,4.627,712,3.12,713,4.129,714,3.695,715,4.889,716,4.924,717,3.695,718,3.12,719,4.889,720,4.889,721,3.695,722,3.695,723,3.695,724,3.695]],["title/classes/RegisterUserDto.html",[21,0.039,358,2.251]],["body/classes/RegisterUserDto.html",[3,0.314,4,0.314,5,0.276,7,0.521,10,3.073,11,0.026,13,1.05,16,0.462,20,0.314,21,0.058,26,0.019,27,0.019,95,1.215,98,2.326,112,2.179,136,1.337,269,3.355,270,4.12,358,3.312,378,2.101,471,1.936,474,4.689,493,4.977,499,4.689,502,2.817,503,4.12,725,4.977,726,3.206,727,4.977,728,3.797,729,3.797,730,4.977,731,4.977,732,4.977,733,3.797,734,4.977,735,3.797,736,4.977]],["title/injectables/RequestLoggingInterceptor.html",[90,0.349,737,2.509]],["body/injectables/RequestLoggingInterceptor.html",[3,0.281,4,0.281,5,0.248,7,0.467,8,1.086,11,0.027,13,0.875,15,0.799,16,0.523,17,0.427,20,0.281,21,0.04,23,1.126,24,0.857,26,0.018,27,0.018,55,1.605,56,1.735,62,1.998,77,3.078,78,2.056,90,0.478,91,1.052,95,1.012,97,1.49,113,2.182,130,1.248,135,1.165,136,0.942,137,1.165,184,1.883,185,1.43,227,2.796,296,2.359,299,4.763,304,2.661,309,2.056,318,2.873,458,4.142,620,2.525,647,2.525,648,2.525,655,2.525,684,2.873,686,2.873,687,3.906,688,2.873,716,4.438,737,3.432,738,4.438,739,2.873,740,4.626,741,3.403,742,4.626,743,5.64,744,3.403,745,5.256,746,4.626,747,3.403,748,2.873,749,3.403,750,3.403,751,3.403,752,3.403,753,3.403]],["title/classes/Reservation.html",[21,0.039,154,1.724]],["body/classes/Reservation.html",[3,0.241,4,0.241,5,0.213,7,0.401,8,0.978,11,0.026,13,1.236,15,0.687,16,0.386,20,0.241,21,0.034,26,0.016,27,0.016,67,1.28,95,0.64,98,2.375,112,1.823,117,2.77,130,0.789,135,0.736,136,1.331,137,1.22,146,2.923,154,2.122,160,2.77,172,3.919,174,2.469,179,2.169,180,1.946,184,2.304,242,3.972,245,3.714,248,4.093,251,4.141,256,4.141,271,1.28,429,2.923,471,1.491,634,2.469,754,2.469,755,4.163,756,4.163,757,4.163,758,4.163,759,4.847,760,4.163,761,4.163,762,2.924,763,2.924,764,2.924,765,2.924,766,2.924,767,2.924,768,2.924,769,2.924,770,2.924,771,2.924,772,2.924,773,2.924,774,2.924,775,2.924,776,4.163,777,2.924,778,2.924,779,2.924,780,2.924,781,2.924,782,2.924,783,2.924,784,2.924,785,2.924,786,2.924,787,2.924,788,2.924,789,4.163,790,2.924]],["title/controllers/ReservationController.html",[0,1.481,791,2.251]],["body/controllers/ReservationController.html",[0,1.512,2,0.861,3,0.187,4,0.187,5,0.165,7,0.311,8,0.811,10,1.911,11,0.027,13,0.653,15,0.811,16,0.526,17,0.285,20,0.187,21,0.026,23,1.142,24,0.869,26,0.013,27,0.013,62,1.223,67,0.994,75,1.761,95,0.756,97,2.545,113,1.629,121,2.931,130,0.612,135,0.869,136,0.703,137,0.869,139,1.407,146,1.911,154,3.023,171,3.524,172,1.684,178,2.298,185,1.444,213,1.911,224,3.467,242,1.51,245,1.51,271,2.319,296,1.157,304,2.843,305,1.371,310,2.314,312,2.562,335,1.629,343,2.562,346,2.298,347,3.935,348,2.916,349,3.53,350,3.53,351,2.586,352,3.467,353,3.109,357,2.916,362,3.467,363,3.946,364,2.916,365,3.467,366,2.562,369,1.916,370,1.51,375,1.684,376,3.102,377,4.313,378,1.256,381,1.916,382,2.562,394,1.916,395,1.157,396,2.298,397,2.562,398,2.562,470,3.14,791,2.298,792,1.916,793,3.524,794,3.453,795,2.269,796,3.453,797,3.453,798,2.269,799,3.453,800,2.269,801,2.269,802,2.269,803,2.916,804,2.269,805,2.269,806,2.269,807,2.314,808,1.916,809,1.916,810,1.684,811,1.916,812,1.684,813,2.269,814,2.269,815,3.453,816,2.269,817,2.269,818,2.269,819,2.269,820,2.269,821,2.269,822,2.269,823,2.269,824,2.269]],["title/modules/ReservationModule.html",[28,1.045,41,2.044]],["body/modules/ReservationModule.html",[2,1.94,3,0.326,4,0.326,5,0.288,11,0.026,16,0.575,17,0.496,20,0.326,21,0.046,26,0.02,27,0.02,28,1.75,30,1.731,31,1.61,32,2.015,33,2.015,34,1.731,35,2.887,36,2.015,41,4.032,44,2.605,45,2.015,46,2.015,48,3.088,104,3.236,410,2.933,791,3.768,807,3.513,808,3.338,825,3.338,826,3.953,827,3.338,828,3.513,829,3.953,830,3.953,831,3.338]],["title/injectables/ReservationRepository.html",[90,0.349,828,1.872]],["body/injectables/ReservationRepository.html",[3,0.304,4,0.304,5,0.268,7,0.505,8,1.146,11,0.027,13,1.035,15,1.146,16,0.507,17,0.462,20,0.304,21,0.043,22,2.039,23,1.219,24,1.229,26,0.019,27,0.019,90,0.504,91,1.139,95,1.197,98,1.938,108,2.937,121,3.446,125,3.62,130,0.994,135,1.378,136,1.114,137,1.378,139,1.988,144,3.62,146,2.039,154,3.174,171,3.247,185,1.508,213,2.7,306,2.734,412,3.111,793,3.247,812,2.734,828,2.7,832,3.111,833,3.684,834,4.88,835,3.684,836,3.684,837,3.684,838,4.88,839,3.684]],["title/injectables/ReservationService.html",[90,0.349,807,1.872]],["body/injectables/ReservationService.html",[3,0.303,4,0.303,5,0.267,7,0.504,8,1.144,11,0.027,13,1.033,15,1.144,16,0.54,17,0.461,20,0.303,21,0.043,22,2.033,23,1.215,24,1.226,26,0.019,27,0.019,67,1.608,90,0.503,91,1.135,95,1.196,98,2.204,125,3.613,130,0.991,135,1.376,136,1.112,137,1.376,144,3.613,146,3.024,154,2.785,185,1.135,470,3.567,793,3.241,807,2.695,809,3.102,810,2.725,812,2.725,828,3.443,831,3.102,840,3.102,841,3.673,842,3.673,843,4.87,844,3.673,845,3.673,846,3.673,847,3.673]],["title/modules/SharedModule.html",[28,1.045,42,2.044]],["body/modules/SharedModule.html",[2,1.17,3,0.255,4,0.255,5,0.224,8,0.724,11,0.027,13,0.583,15,0.724,16,0.574,17,0.387,20,0.255,21,0.036,26,0.017,27,0.017,28,1.671,30,1.35,31,1.256,32,1.572,33,1.572,34,1.35,35,2.544,36,2.544,42,4.027,44,2.203,45,1.572,46,1.572,48,1.863,54,3.649,55,2.038,56,1.572,59,2.603,60,2.051,61,2.051,62,2.301,87,3.649,95,0.675,132,3.064,133,3.064,135,0.776,136,0.628,137,0.776,307,2.287,309,1.863,463,2.051,662,2.603,708,3.926,710,2.051,848,2.603,849,2.603,850,2.603,851,3.083,852,3.083,853,4.321,854,5.408,855,3.083,856,3.083,857,3.083,858,3.083,859,3.083,860,3.083,861,3.083,862,3.083,863,3.083,864,3.083]],["title/classes/UpdateReservationDto.html",[21,0.039,865,2.509]],["body/classes/UpdateReservationDto.html",[3,0.4,4,0.4,5,0.352,11,0.026,16,0.538,20,0.4,21,0.056,26,0.022,27,0.022,470,2.681,471,2.47,473,3.594,513,4.897,793,3.223,810,3.594,865,4.303,866,4.09,867,5.799,868,4.844,869,4.09,870,4.09]],["title/controllers/UserController.html",[0,1.481,871,2.251]],["body/controllers/UserController.html",[0,1.506,2,1.306,3,0.284,4,0.284,5,0.25,7,0.472,8,1.095,10,1.904,11,0.027,13,0.65,15,0.808,16,0.525,17,0.431,20,0.284,21,0.04,22,1.904,23,1.138,24,0.866,26,0.018,27,0.018,95,1.296,97,2.314,135,0.866,137,0.866,159,2.579,185,1.063,269,3.578,271,2.733,304,2.199,310,2.579,331,2.552,335,1.623,343,2.552,346,3.101,347,3.838,351,2.579,352,3.458,353,3.101,365,3.458,366,2.552,370,2.289,375,2.552,376,3.458,377,4.204,378,1.904,382,2.552,397,2.552,398,2.552,803,3.936,811,2.905,871,3.101,872,2.905,873,3.44,874,4.661,875,3.44,876,3.44,877,3.44,878,3.44,879,3.44,880,2.925,881,2.905,882,3.44,883,2.905,884,3.44]],["title/modules/UserModule.html",[28,1.045,43,2.044]],["body/modules/UserModule.html",[2,1.993,3,0.34,4,0.34,5,0.3,11,0.026,16,0.564,17,0.517,20,0.34,21,0.048,26,0.02,27,0.02,28,1.785,30,1.805,31,1.68,32,2.102,33,2.102,34,1.805,35,2.945,36,2.102,43,3.99,44,2.676,45,2.102,46,2.102,48,3.172,104,3.273,410,3.059,871,3.843,880,3.552,881,3.482,885,3.482,886,3.482,887,4.123,888,4.123,889,4.123]],["title/injectables/UserService.html",[90,0.349,880,1.872]],["body/injectables/UserService.html",[3,0.418,4,0.418,5,0.368,11,0.025,16,0.469,17,0.635,20,0.418,21,0.059,26,0.023,27,0.023,90,0.614,91,1.564,880,3.294,890,4.273]],["title/coverage.html",[891,3.89]],["body/coverage.html",[0,2.337,1,1.992,5,0.218,6,2.528,11,0.026,18,1.657,21,0.068,26,0.016,27,0.016,34,1.311,62,1.061,67,1.311,90,0.673,92,2.528,108,1.412,111,2.528,132,1.412,133,1.412,136,0.61,154,1.526,291,1.809,292,3.141,310,1.657,338,1.992,339,2.528,358,1.992,372,1.657,411,2.528,419,3.141,438,1.809,439,1.992,456,3.141,464,2.221,470,1.657,472,2.528,473,3.141,506,2.528,510,1.992,511,3.141,512,3.141,525,1.992,537,2.221,573,5.807,650,2.221,651,2.528,652,2.528,653,2.528,708,1.809,709,2.528,710,1.992,711,2.528,712,2.528,718,2.528,725,2.528,726,2.528,737,2.221,738,2.528,739,2.528,754,2.528,791,1.992,792,2.528,807,1.657,828,1.657,832,2.528,840,2.528,865,2.221,866,2.528,871,1.992,872,2.528,880,1.657,890,2.528,891,2.528,892,2.528,893,2.994,894,2.994,895,4.911,896,5.847,897,5.847,898,2.994,899,2.528,900,6.011,901,4.233,902,2.994,903,4.911,904,2.994,905,2.994,906,2.994]],["title/dependencies.html",[31,1.656,907,2.389]],["body/dependencies.html",[11,0.027,17,0.554,21,0.064,26,0.021,27,0.021,31,1.798,52,3.728,55,2.083,56,2.251,60,2.938,61,2.938,179,3.276,180,2.938,305,2.668,308,3.276,378,2.443,502,3.276,551,3.728,748,3.728,869,3.728,870,3.728,883,3.728,908,5.96,909,4.415,910,4.415,911,4.415,912,4.415,913,4.415,914,4.415,915,4.415,916,4.415,917,4.415,918,4.415,919,4.415,920,4.415,921,4.415,922,4.415]],["title/miscellaneous/enumerations.html",[923,1.565,924,3.433]],["body/miscellaneous/enumerations.html",[7,0.635,11,0.026,26,0.022,27,0.022,170,4.079,537,3.434,560,3.908,563,3.908,565,3.908,567,3.908,570,3.908,601,4.764,602,3.908,609,3.908,611,3.908,923,2.561,924,3.908,925,4.628,926,4.628,927,4.628,928,4.628,929,4.628,930,4.628,931,4.628,932,4.628,933,4.628]],["title/interfaces/envConfig.html",[438,2.044,439,2.251]],["body/interfaces/envConfig.html",[3,0.291,4,0.291,5,0.256,7,0.482,11,0.027,16,0.326,17,0.441,20,0.291,21,0.041,24,1.547,26,0.018,27,0.018,90,0.488,98,2.367,112,2.072,117,2.341,130,0.949,132,1.659,136,1.164,186,2.61,202,3.97,203,4.427,204,3.97,283,2.61,419,2.61,420,2.971,422,2.971,423,2.971,424,2.971,426,2.61,429,1.947,438,2.126,439,3.557,440,5.038,441,2.971,442,2.971,443,2.971,444,2.971,445,2.971,446,2.971,447,2.971,448,2.971,449,2.61,450,2.971,451,2.971,452,2.971,453,3.995,454,2.971,455,2.971,934,3.518]],["title/miscellaneous/functions.html",[923,1.565,935,3.433]],["body/miscellaneous/functions.html",[7,0.717,11,0.023,26,0.023,27,0.023,34,2.806,899,4.416,923,2.894,935,4.416,936,5.23]],["title/index.html",[7,0.388,937,2.829,938,2.829]],["body/index.html",[11,0.025,26,0.019,27,0.019,31,1.479,55,1.713,116,3.066,171,2.416,178,2.416,180,4.126,184,2.009,195,4.89,197,4.587,202,2.416,204,2.416,206,2.694,252,2.416,329,3.066,347,2.194,353,3.614,503,4.03,574,3.066,643,4.587,647,2.694,679,3.066,680,4.081,713,3.066,892,3.066,939,3.631,940,3.631,941,3.631,942,3.631,943,3.631,944,3.631,945,3.631,946,3.631,947,3.631,948,3.631,949,3.631,950,3.631,951,3.631,952,3.631,953,3.631,954,3.631,955,3.631,956,3.631,957,5.791,958,3.631,959,3.631,960,3.631,961,3.631,962,3.631,963,3.631,964,3.631,965,3.631,966,3.631,967,3.631,968,3.631,969,3.631,970,3.631,971,3.585,972,3.631,973,3.631,974,3.631,975,5.791,976,3.631,977,3.631,978,3.631,979,3.631,980,4.832,981,3.631,982,3.631,983,3.631,984,3.631,985,4.832,986,3.631,987,3.631,988,3.631,989,3.631,990,3.631,991,3.631,992,3.631,993,3.631]],["title/modules.html",[30,2.017]],["body/modules.html",[11,0.022,26,0.022,27,0.022,29,3.174,30,2.088,40,2.882,41,2.882,42,2.882,43,2.882,104,2.432,994,6.653,995,6.653,996,6.653,997,6.653]],["title/overview.html",[998,3.89]],["body/overview.html",[2,1.162,11,0.026,18,2.75,26,0.016,27,0.016,28,0.946,29,4.381,30,1.34,31,1.247,32,1.56,33,1.56,34,1.34,35,1.56,36,1.56,37,2.584,38,2.584,39,2.584,40,3.842,41,3.792,42,4.002,43,3.655,44,2.192,45,1.56,46,1.56,62,2.143,91,0.946,104,3.147,105,2.584,106,2.584,107,2.584,108,2.853,132,2.853,133,2.853,252,2.036,291,3.003,372,2.75,405,2.584,406,2.584,438,1.849,471,1.56,575,2.584,708,3.655,807,2.75,825,2.584,827,2.584,828,2.75,848,2.584,849,2.584,850,2.584,880,2.75,885,2.584,886,2.584,998,2.584,999,4.299,1000,3.06]],["title/properties.html",[112,1.78,907,2.389]],["body/properties.html",[11,0.026,26,0.023,27,0.023,96,4.362,112,2.261,347,3.121,1001,5.165,1002,5.165,1003,5.165,1004,5.165]],["title/miscellaneous/variables.html",[923,1.565,971,3.016]],["body/miscellaneous/variables.html",[7,0.54,11,0.027,24,1.284,26,0.02,27,0.02,75,2.009,97,2.475,136,0.802,139,1.605,169,4.195,170,3.416,185,1.218,271,2.233,292,2.924,310,2.822,311,3.327,312,2.924,313,3.327,314,3.327,315,3.327,316,3.327,317,3.327,335,2.405,351,2.181,395,2.882,456,2.924,464,3.783,465,4.306,466,4.306,511,2.924,512,3.783,514,4.774,525,3.393,526,3.327,527,3.327,528,3.327,529,3.327,530,2.924,531,2.924,532,3.327,533,3.327,534,2.924,535,3.327,548,3.327,923,2.181,971,2.924,1005,3.941,1006,3.941,1007,3.941]]],"invertedIndex":[["",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AppwriteModule.html":{},"injectables/AppwriteService.html":{},"injectables/AppwriteSessionGuard.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/ConfigService.html":{},"injectables/ContextService.html":{},"classes/CreateReservationDto.html":{},"classes/CustomError.html":{},"injectables/CustomLoggingService.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/HelpersService.html":{},"injectables/LoggingMiddleware.html":{},"classes/RegisterUserDto.html":{},"injectables/RequestLoggingInterceptor.html":{},"classes/Reservation.html":{},"controllers/ReservationController.html":{},"modules/ReservationModule.html":{},"injectables/ReservationRepository.html":{},"injectables/ReservationService.html":{},"modules/SharedModule.html":{},"classes/UpdateReservationDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"interfaces/envConfig.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":573,"title":{},"body":{"injectables/CustomLoggingService.html":{},"coverage.html":{}}}],["0.0.0.0",{"_index":451,"title":{},"body":{"injectables/ConfigService.html":{},"interfaces/envConfig.html":{}}}],["0.0.1",{"_index":1001,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":914,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":921,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":913,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":900,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":905,"title":{},"body":{"coverage.html":{}}}],["0/15",{"_index":902,"title":{},"body":{"coverage.html":{}}}],["0/16",{"_index":898,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":895,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":896,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":897,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":901,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":904,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":252,"title":{},"body":{"injectables/AppwriteService.html":{},"injectables/CustomLoggingService.html":{},"index.html":{},"overview.html":{}}}],["1.4.6",{"_index":916,"title":{},"body":{"dependencies.html":{}}}],["1.9.7",{"_index":917,"title":{},"body":{"dependencies.html":{}}}],["10.0.0",{"_index":908,"title":{},"body":{"dependencies.html":{}}}],["10000",{"_index":527,"title":{},"body":{"classes/CustomError.html":{},"miscellaneous/variables.html":{}}}],["10001",{"_index":529,"title":{},"body":{"classes/CustomError.html":{},"miscellaneous/variables.html":{}}}],["10002",{"_index":533,"title":{},"body":{"classes/CustomError.html":{},"miscellaneous/variables.html":{}}}],["12",{"_index":476,"title":{},"body":{"classes/CreateReservationDto.html":{}}}],["12:00",{"_index":487,"title":{},"body":{"classes/CreateReservationDto.html":{}}}],["13",{"_index":1000,"title":{},"body":{"overview.html":{}}}],["13.0.0",{"_index":919,"title":{},"body":{"dependencies.html":{}}}],["2",{"_index":480,"title":{},"body":{"classes/CreateReservationDto.html":{},"injectables/CustomLoggingService.html":{}}}],["200",{"_index":803,"title":{},"body":{"controllers/ReservationController.html":{},"controllers/UserController.html":{}}}],["201",{"_index":349,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ReservationController.html":{}}}],["2024",{"_index":475,"title":{},"body":{"classes/CreateReservationDto.html":{}}}],["255",{"_index":243,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["3",{"_index":574,"title":{},"body":{"injectables/CustomLoggingService.html":{},"index.html":{}}}],["3.2.3",{"_index":909,"title":{},"body":{"dependencies.html":{}}}],["3000",{"_index":453,"title":{},"body":{"injectables/ConfigService.html":{},"interfaces/envConfig.html":{}}}],["30m",{"_index":926,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["31",{"_index":477,"title":{},"body":{"classes/CreateReservationDto.html":{}}}],["31m",{"_index":927,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["32m",{"_index":928,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["33m",{"_index":929,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["34m",{"_index":930,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["35m",{"_index":931,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["36m",{"_index":932,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["37m",{"_index":933,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["3]):([0",{"_index":489,"title":{},"body":{"classes/CreateReservationDto.html":{}}}],["4",{"_index":575,"title":{},"body":{"injectables/CustomLoggingService.html":{},"overview.html":{}}}],["4.3.0",{"_index":918,"title":{},"body":{"dependencies.html":{}}}],["400",{"_index":362,"title":{},"body":{"controllers/AuthController.html":{},"classes/GlobalExceptionFilter.html":{},"controllers/ReservationController.html":{}}}],["401",{"_index":365,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ReservationController.html":{},"controllers/UserController.html":{}}}],["404",{"_index":531,"title":{},"body":{"classes/CustomError.html":{},"classes/GlobalExceptionFilter.html":{},"miscellaneous/variables.html":{}}}],["422",{"_index":535,"title":{},"body":{"classes/CustomError.html":{},"miscellaneous/variables.html":{}}}],["500",{"_index":351,"title":{},"body":{"controllers/AuthController.html":{},"classes/CustomError.html":{},"classes/GlobalExceptionFilter.html":{},"controllers/ReservationController.html":{},"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["5]\\d",{"_index":490,"title":{},"body":{"classes/CreateReservationDto.html":{}}}],["6",{"_index":999,"title":{},"body":{"overview.html":{}}}],["7.4.0",{"_index":911,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":922,"title":{},"body":{"dependencies.html":{}}}],["accessors",{"_index":421,"title":{},"body":{"injectables/ConfigService.html":{}}}],["account",{"_index":114,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["account(sessionclient",{"_index":266,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["account(this.adminclient",{"_index":201,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["account.createanonymoussession",{"_index":261,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["account.get",{"_index":268,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["action",{"_index":328,"title":{},"body":{"injectables/AppwriteSessionGuard.html":{}}}],["addmetadata",{"_index":538,"title":{},"body":{"injectables/CustomLoggingService.html":{}}}],["adminclient",{"_index":115,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["anonymous",{"_index":345,"title":{},"body":{"controllers/AuthController.html":{}}}],["anonymoussession",{"_index":260,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["any).response.message",{"_index":683,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["any)[level",{"_index":586,"title":{},"body":{"injectables/CustomLoggingService.html":{}}}],["api",{"_index":197,"title":{},"body":{"injectables/AppwriteService.html":{},"index.html":{}}}],["apicookieauth",{"_index":375,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ReservationController.html":{},"controllers/UserController.html":{}}}],["apicookieauth('auth_token",{"_index":398,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ReservationController.html":{},"controllers/UserController.html":{}}}],["apioperation",{"_index":376,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ReservationController.html":{},"controllers/UserController.html":{}}}],["apioperation({summary",{"_index":343,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ReservationController.html":{},"controllers/UserController.html":{}}}],["apiproperty",{"_index":493,"title":{},"body":{"classes/CreateReservationDto.html":{},"classes/RegisterUserDto.html":{}}}],["apiproperty({example",{"_index":474,"title":{},"body":{"classes/CreateReservationDto.html":{},"classes/RegisterUserDto.html":{}}}],["apiresponse",{"_index":377,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ReservationController.html":{},"controllers/UserController.html":{}}}],["apis",{"_index":945,"title":{},"body":{"index.html":{}}}],["app",{"_index":978,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":49,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["applydecorators",{"_index":301,"title":{},"body":{"injectables/AppwriteSessionGuard.html":{}}}],["applydecorators(setmetadata('onlyregistereduser",{"_index":315,"title":{},"body":{"injectables/AppwriteSessionGuard.html":{},"miscellaneous/variables.html":{}}}],["applydecorators(useguards(appwritesessionguard",{"_index":317,"title":{},"body":{"injectables/AppwriteSessionGuard.html":{},"miscellaneous/variables.html":{}}}],["appmodule",{"_index":29,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":18,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["appwrite",{"_index":180,"title":{},"body":{"injectables/AppwriteService.html":{},"classes/Reservation.html":{},"dependencies.html":{},"index.html":{}}}],["appwrite.service",{"_index":110,"title":{},"body":{"modules/AppwriteModule.html":{}}}],["appwrite_api_key",{"_index":203,"title":{},"body":{"injectables/AppwriteService.html":{},"injectables/ConfigService.html":{},"interfaces/envConfig.html":{}}}],["appwrite_api_key=running",{"_index":977,"title":{},"body":{"index.html":{}}}],["appwrite_endpoint",{"_index":202,"title":{},"body":{"injectables/AppwriteService.html":{},"injectables/ConfigService.html":{},"interfaces/envConfig.html":{},"index.html":{}}}],["appwrite_project_id",{"_index":204,"title":{},"body":{"injectables/AppwriteService.html":{},"injectables/ConfigService.html":{},"interfaces/envConfig.html":{},"index.html":{}}}],["appwriteconfig",{"_index":186,"title":{},"body":{"injectables/AppwriteService.html":{},"injectables/ConfigService.html":{},"interfaces/envConfig.html":{}}}],["appwriteconfig.appwrite_api_key",{"_index":196,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["appwriteconfig.appwrite_endpoint",{"_index":192,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["appwriteconfig.appwrite_project_id",{"_index":194,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["appwritemodule",{"_index":104,"title":{"modules/AppwriteModule.html":{}},"body":{"modules/AppwriteModule.html":{},"modules/AuthModule.html":{},"modules/ReservationModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["appwriteservice",{"_index":108,"title":{"injectables/AppwriteService.html":{}},"body":{"modules/AppwriteModule.html":{},"injectables/AppwriteService.html":{},"injectables/AppwriteSessionGuard.html":{},"injectables/AuthService.html":{},"injectables/ReservationRepository.html":{},"coverage.html":{},"overview.html":{}}}],["appwritesessionguard",{"_index":291,"title":{"injectables/AppwriteSessionGuard.html":{}},"body":{"injectables/AppwriteSessionGuard.html":{},"modules/AuthModule.html":{},"coverage.html":{},"overview.html":{}}}],["argumentshost",{"_index":658,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["array",{"_index":508,"title":{},"body":{"classes/CreateReservationDto.html":{}}}],["array})@isarray()@isstring({each",{"_index":484,"title":{},"body":{"classes/CreateReservationDto.html":{}}}],["async",{"_index":121,"title":{},"body":{"injectables/AppwriteService.html":{},"injectables/AppwriteSessionGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ReservationController.html":{},"injectables/ReservationRepository.html":{}}}],["auth.controller",{"_index":409,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":373,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":53,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":338,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authentication",{"_index":954,"title":{},"body":{"index.html":{}}}],["authmodule",{"_index":40,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":1004,"title":{},"body":{"properties.html":{}}}],["authservice",{"_index":372,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["available",{"_index":329,"title":{},"body":{"injectables/AppwriteSessionGuard.html":{},"index.html":{}}}],["await",{"_index":213,"title":{},"body":{"injectables/AppwriteService.html":{},"injectables/AppwriteSessionGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ReservationController.html":{},"injectables/ReservationRepository.html":{}}}],["awpprite",{"_index":968,"title":{},"body":{"index.html":{}}}],["baas",{"_index":950,"title":{},"body":{"index.html":{}}}],["backend",{"_index":939,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":660,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["behalf",{"_index":796,"title":{},"body":{"controllers/ReservationController.html":{}}}],["black",{"_index":602,"title":{},"body":{"injectables/CustomLoggingService.html":{},"miscellaneous/enumerations.html":{}}}],["blue",{"_index":567,"title":{},"body":{"injectables/CustomLoggingService.html":{},"miscellaneous/enumerations.html":{}}}],["body",{"_index":357,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ReservationController.html":{}}}],["boolean",{"_index":313,"title":{},"body":{"injectables/AppwriteSessionGuard.html":{},"miscellaneous/variables.html":{}}}],["bootstrap",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"modules/AppwriteModule.html":{},"modules/AuthModule.html":{},"modules/ReservationModule.html":{},"modules/SharedModule.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":997,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":994,"title":{},"body":{"modules.html":{}}}],["built",{"_index":940,"title":{},"body":{"index.html":{}}}],["c.name",{"_index":221,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["callhandler",{"_index":743,"title":{},"body":{"injectables/RequestLoggingInterceptor.html":{}}}],["canactivate",{"_index":293,"title":{},"body":{"injectables/AppwriteSessionGuard.html":{}}}],["canactivate(context",{"_index":298,"title":{},"body":{"injectables/AppwriteSessionGuard.html":{}}}],["catch",{"_index":334,"title":{},"body":{"injectables/AppwriteSessionGuard.html":{},"classes/GlobalExceptionFilter.html":{}}}],["catch(exception",{"_index":657,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["class",{"_index":21,"title":{"classes/CreateReservationDto.html":{},"classes/CustomError.html":{},"classes/GlobalExceptionFilter.html":{},"classes/RegisterUserDto.html":{},"classes/Reservation.html":{},"classes/UpdateReservationDto.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AppwriteModule.html":{},"injectables/AppwriteService.html":{},"injectables/AppwriteSessionGuard.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/ConfigService.html":{},"injectables/ContextService.html":{},"classes/CreateReservationDto.html":{},"classes/CustomError.html":{},"injectables/CustomLoggingService.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/HelpersService.html":{},"injectables/LoggingMiddleware.html":{},"classes/RegisterUserDto.html":{},"injectables/RequestLoggingInterceptor.html":{},"classes/Reservation.html":{},"controllers/ReservationController.html":{},"modules/ReservationModule.html":{},"injectables/ReservationRepository.html":{},"injectables/ReservationService.html":{},"modules/SharedModule.html":{},"classes/UpdateReservationDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"interfaces/envConfig.html":{}}}],["classes",{"_index":471,"title":{},"body":{"classes/CreateReservationDto.html":{},"classes/CustomError.html":{},"classes/GlobalExceptionFilter.html":{},"classes/RegisterUserDto.html":{},"classes/Reservation.html":{},"classes/UpdateReservationDto.html":{},"overview.html":{}}}],["client",{"_index":163,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["cloud",{"_index":966,"title":{},"body":{"index.html":{}}}],["cls",{"_index":56,"title":{},"body":{"modules/AppModule.html":{},"injectables/ContextService.html":{},"injectables/CustomLoggingService.html":{},"injectables/LoggingMiddleware.html":{},"injectables/RequestLoggingInterceptor.html":{},"modules/SharedModule.html":{},"dependencies.html":{}}}],["clsmiddleware",{"_index":860,"title":{},"body":{"modules/SharedModule.html":{}}}],["clsmodule",{"_index":54,"title":{},"body":{"modules/AppModule.html":{},"modules/SharedModule.html":{}}}],["clsmodule.forroot",{"_index":86,"title":{},"body":{"modules/AppModule.html":{}}}],["clsservice",{"_index":458,"title":{},"body":{"injectables/ContextService.html":{},"injectables/CustomLoggingService.html":{},"injectables/LoggingMiddleware.html":{},"injectables/RequestLoggingInterceptor.html":{}}}],["cluster_appmodule",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appwritemodule",{"_index":105,"title":{},"body":{"modules/AppwriteModule.html":{},"overview.html":{}}}],["cluster_appwritemodule_exports",{"_index":106,"title":{},"body":{"modules/AppwriteModule.html":{},"overview.html":{}}}],["cluster_appwritemodule_providers",{"_index":107,"title":{},"body":{"modules/AppwriteModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":405,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":407,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":406,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_reservationmodule",{"_index":825,"title":{},"body":{"modules/ReservationModule.html":{},"overview.html":{}}}],["cluster_reservationmodule_imports",{"_index":826,"title":{},"body":{"modules/ReservationModule.html":{}}}],["cluster_reservationmodule_providers",{"_index":827,"title":{},"body":{"modules/ReservationModule.html":{},"overview.html":{}}}],["cluster_sharedmodule",{"_index":848,"title":{},"body":{"modules/SharedModule.html":{},"overview.html":{}}}],["cluster_sharedmodule_exports",{"_index":849,"title":{},"body":{"modules/SharedModule.html":{},"overview.html":{}}}],["cluster_sharedmodule_providers",{"_index":850,"title":{},"body":{"modules/SharedModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":885,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_imports",{"_index":887,"title":{},"body":{"modules/UserModule.html":{}}}],["cluster_usermodule_providers",{"_index":886,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["code",{"_index":514,"title":{},"body":{"classes/CustomError.html":{},"miscellaneous/variables.html":{}}}],["collection",{"_index":157,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["collectionid",{"_index":755,"title":{},"body":{"classes/Reservation.html":{}}}],["collectionname",{"_index":142,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["collectionname).$id",{"_index":226,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["collections",{"_index":217,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["collections.collections.find((c",{"_index":220,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["colormap",{"_index":540,"title":{},"body":{"injectables/CustomLoggingService.html":{}}}],["config/config.service",{"_index":662,"title":{},"body":{"classes/GlobalExceptionFilter.html":{},"modules/SharedModule.html":{}}}],["configmodule",{"_index":51,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":64,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":132,"title":{"injectables/ConfigService.html":{}},"body":{"injectables/AppwriteService.html":{},"injectables/ConfigService.html":{},"classes/GlobalExceptionFilter.html":{},"modules/SharedModule.html":{},"coverage.html":{},"interfaces/envConfig.html":{},"overview.html":{}}}],["configuration",{"_index":190,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["configure",{"_index":852,"title":{},"body":{"modules/SharedModule.html":{}}}],["configure(consumer",{"_index":853,"title":{},"body":{"modules/SharedModule.html":{}}}],["connect",{"_index":974,"title":{},"body":{"index.html":{}}}],["console.log('creating",{"_index":212,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["console.log('database",{"_index":230,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["console.log('databaseid",{"_index":211,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["console.log(`collection",{"_index":223,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["const",{"_index":185,"title":{},"body":{"injectables/AppwriteService.html":{},"injectables/AppwriteSessionGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ContextService.html":{},"classes/CustomError.html":{},"injectables/CustomLoggingService.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/RequestLoggingInterceptor.html":{},"controllers/ReservationController.html":{},"injectables/ReservationRepository.html":{},"injectables/ReservationService.html":{},"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":130,"title":{},"body":{"injectables/AppwriteService.html":{},"injectables/AppwriteSessionGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ConfigService.html":{},"injectables/ContextService.html":{},"classes/CustomError.html":{},"injectables/CustomLoggingService.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/LoggingMiddleware.html":{},"injectables/RequestLoggingInterceptor.html":{},"classes/Reservation.html":{},"controllers/ReservationController.html":{},"injectables/ReservationRepository.html":{},"injectables/ReservationService.html":{},"interfaces/envConfig.html":{}}}],["constructor(appwriteservice",{"_index":412,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ReservationRepository.html":{}}}],["constructor(clsservice",{"_index":457,"title":{},"body":{"injectables/ContextService.html":{},"injectables/CustomLoggingService.html":{}}}],["constructor(configservice",{"_index":131,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["constructor(logger",{"_index":655,"title":{},"body":{"classes/GlobalExceptionFilter.html":{},"injectables/LoggingMiddleware.html":{},"injectables/RequestLoggingInterceptor.html":{}}}],["constructor(message",{"_index":516,"title":{},"body":{"classes/CustomError.html":{}}}],["constructor(obj",{"_index":760,"title":{},"body":{"classes/Reservation.html":{}}}],["constructor(private",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"injectables/ContextService.html":{},"injectables/ReservationRepository.html":{},"injectables/ReservationService.html":{},"controllers/UserController.html":{}}}],["constructor(reflector",{"_index":294,"title":{},"body":{"injectables/AppwriteSessionGuard.html":{}}}],["constructor(reservationrepository",{"_index":841,"title":{},"body":{"injectables/ReservationService.html":{}}}],["consumer",{"_index":856,"title":{},"body":{"modules/SharedModule.html":{}}}],["consumer.apply(clsmiddleware).forroutes",{"_index":863,"title":{},"body":{"modules/SharedModule.html":{}}}],["consumer.apply(loggingmiddleware).forroutes",{"_index":864,"title":{},"body":{"modules/SharedModule.html":{}}}],["context",{"_index":78,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppwriteSessionGuard.html":{},"injectables/CustomLoggingService.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/RequestLoggingInterceptor.html":{}}}],["context.getclass",{"_index":323,"title":{},"body":{"injectables/AppwriteSessionGuard.html":{}}}],["context.gethandler",{"_index":322,"title":{},"body":{"injectables/AppwriteSessionGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":318,"title":{},"body":{"injectables/AppwriteSessionGuard.html":{},"injectables/RequestLoggingInterceptor.html":{}}}],["context.switchtohttp().getresponse",{"_index":749,"title":{},"body":{"injectables/RequestLoggingInterceptor.html":{}}}],["context/context.service",{"_index":307,"title":{},"body":{"injectables/AppwriteSessionGuard.html":{},"classes/GlobalExceptionFilter.html":{},"modules/SharedModule.html":{}}}],["context[`primitive${this.randomstring(5",{"_index":641,"title":{},"body":{"injectables/CustomLoggingService.html":{}}}],["contextkeys",{"_index":464,"title":{},"body":{"injectables/ContextService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["contextkeys)[keyof",{"_index":467,"title":{},"body":{"injectables/ContextService.html":{}}}],["contextmetadata",{"_index":635,"title":{},"body":{"injectables/CustomLoggingService.html":{}}}],["contextmetadata[`primitive${obj",{"_index":639,"title":{},"body":{"injectables/CustomLoggingService.html":{}}}],["contextmetadata[prop",{"_index":637,"title":{},"body":{"injectables/CustomLoggingService.html":{}}}],["contextservice",{"_index":133,"title":{"injectables/ContextService.html":{}},"body":{"injectables/AppwriteService.html":{},"injectables/AppwriteSessionGuard.html":{},"injectables/ContextService.html":{},"classes/GlobalExceptionFilter.html":{},"modules/SharedModule.html":{},"coverage.html":{},"overview.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ReservationController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ReservationController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["controller('user",{"_index":882,"title":{},"body":{"controllers/UserController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AppwriteModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/ReservationController.html":{},"modules/ReservationModule.html":{},"modules/SharedModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["cookie",{"_index":883,"title":{},"body":{"controllers/UserController.html":{},"dependencies.html":{}}}],["cookie'})@apiresponse({status",{"_index":876,"title":{},"body":{"controllers/UserController.html":{}}}],["coverage",{"_index":891,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":793,"title":{},"body":{"controllers/ReservationController.html":{},"injectables/ReservationRepository.html":{},"injectables/ReservationService.html":{},"classes/UpdateReservationDto.html":{}}}],["create(@req",{"_index":814,"title":{},"body":{"controllers/ReservationController.html":{}}}],["create(request",{"_index":795,"title":{},"body":{"controllers/ReservationController.html":{}}}],["create(reservation",{"_index":834,"title":{},"body":{"injectables/ReservationRepository.html":{}}}],["create(userid",{"_index":843,"title":{},"body":{"injectables/ReservationService.html":{}}}],["createanonymoussession",{"_index":122,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["createcollection",{"_index":123,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["createcollection(collectionname",{"_index":140,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["createcollectionresponse",{"_index":231,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["createcollectionresponse.$id",{"_index":241,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["created",{"_index":224,"title":{},"body":{"injectables/AppwriteService.html":{},"controllers/AuthController.html":{},"controllers/ReservationController.html":{}}}],["createdat",{"_index":756,"title":{},"body":{"classes/Reservation.html":{}}}],["createdatabase",{"_index":124,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["createreservationdto",{"_index":470,"title":{"classes/CreateReservationDto.html":{}},"body":{"classes/CreateReservationDto.html":{},"controllers/ReservationController.html":{},"injectables/ReservationService.html":{},"classes/UpdateReservationDto.html":{},"coverage.html":{}}}],["creates",{"_index":344,"title":{},"body":{"controllers/AuthController.html":{}}}],["credentials",{"_index":970,"title":{},"body":{"index.html":{}}}],["crypto",{"_index":721,"title":{},"body":{"injectables/LoggingMiddleware.html":{}}}],["ctx",{"_index":668,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["ctx.getrequest",{"_index":671,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["ctx.getresponse",{"_index":670,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["current",{"_index":797,"title":{},"body":{"controllers/ReservationController.html":{}}}],["currentuser",{"_index":267,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["currentuser.email",{"_index":277,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["currentuser.name",{"_index":274,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["currentuser.password",{"_index":280,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["custom",{"_index":663,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["customerror",{"_index":510,"title":{"classes/CustomError.html":{}},"body":{"classes/CustomError.html":{},"classes/GlobalExceptionFilter.html":{},"coverage.html":{}}}],["customerrors",{"_index":525,"title":{},"body":{"classes/CustomError.html":{},"classes/GlobalExceptionFilter.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["customerrors.not_found.code",{"_index":694,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["customerrors.not_found.message",{"_index":695,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["customerrors.unknown_error.code",{"_index":706,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["customerrors.unknown_error.message",{"_index":707,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["customerrors.validation_error.code",{"_index":691,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["customerrors.validation_error.message",{"_index":676,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["customloggingservice",{"_index":62,"title":{"injectables/CustomLoggingService.html":{}},"body":{"modules/AppModule.html":{},"injectables/AppwriteSessionGuard.html":{},"controllers/AuthController.html":{},"injectables/CustomLoggingService.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/LoggingMiddleware.html":{},"injectables/RequestLoggingInterceptor.html":{},"controllers/ReservationController.html":{},"modules/SharedModule.html":{},"coverage.html":{},"overview.html":{}}}],["customloggingservice.colormap",{"_index":585,"title":{},"body":{"injectables/CustomLoggingService.html":{}}}],["customloggingservice.getlogginglevel",{"_index":70,"title":{},"body":{"modules/AppModule.html":{}}}],["customloggingservice.myformat",{"_index":85,"title":{},"body":{"modules/AppModule.html":{}}}],["cyan",{"_index":609,"title":{},"body":{"injectables/CustomLoggingService.html":{},"miscellaneous/enumerations.html":{}}}],["data",{"_index":159,"title":{},"body":{"injectables/AppwriteService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CustomLoggingService.html":{},"classes/GlobalExceptionFilter.html":{},"controllers/UserController.html":{}}}],["data'})@apiresponse({status",{"_index":361,"title":{},"body":{"controllers/AuthController.html":{}}}],["data.email",{"_index":278,"title":{},"body":{"injectables/AppwriteService.html":{},"injectables/AuthService.html":{}}}],["data.name",{"_index":275,"title":{},"body":{"injectables/AppwriteService.html":{},"injectables/AuthService.html":{}}}],["data.password",{"_index":281,"title":{},"body":{"injectables/AppwriteService.html":{},"injectables/AuthService.html":{}}}],["database",{"_index":116,"title":{},"body":{"injectables/AppwriteService.html":{},"index.html":{}}}],["databaseid",{"_index":117,"title":{},"body":{"injectables/AppwriteService.html":{},"injectables/ConfigService.html":{},"classes/Reservation.html":{},"interfaces/envConfig.html":{}}}],["databases",{"_index":118,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["databases(this.adminclient",{"_index":208,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["date",{"_index":242,"title":{},"body":{"injectables/AppwriteService.html":{},"classes/CreateReservationDto.html":{},"classes/Reservation.html":{},"controllers/ReservationController.html":{}}}],["date().gettime",{"_index":723,"title":{},"body":{"injectables/LoggingMiddleware.html":{}}}],["date(`${this.date}t${this.time}:00",{"_index":790,"title":{},"body":{"classes/Reservation.html":{}}}],["date(session.expire",{"_index":393,"title":{},"body":{"controllers/AuthController.html":{}}}],["date.now",{"_index":684,"title":{},"body":{"classes/GlobalExceptionFilter.html":{},"injectables/RequestLoggingInterceptor.html":{}}}],["dateattributeresponse",{"_index":239,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["datetime",{"_index":248,"title":{},"body":{"injectables/AppwriteService.html":{},"classes/Reservation.html":{}}}],["datetimeattributeresponse",{"_index":246,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["db",{"_index":423,"title":{},"body":{"injectables/ConfigService.html":{},"interfaces/envConfig.html":{}}}],["dd",{"_index":82,"title":{},"body":{"modules/AppModule.html":{}}}],["debug",{"_index":545,"title":{},"body":{"injectables/CustomLoggingService.html":{}}}],["debug(message",{"_index":550,"title":{},"body":{"injectables/CustomLoggingService.html":{}}}],["declarations",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"modules/AppwriteModule.html":{},"modules/AuthModule.html":{},"modules/ReservationModule.html":{},"modules/SharedModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["decorators",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/CreateReservationDto.html":{},"classes/RegisterUserDto.html":{},"controllers/ReservationController.html":{},"controllers/UserController.html":{}}}],["default",{"_index":169,"title":{},"body":{"injectables/AppwriteService.html":{},"injectables/CustomLoggingService.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":13,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AppwriteService.html":{},"injectables/AppwriteSessionGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ConfigService.html":{},"injectables/ContextService.html":{},"classes/CreateReservationDto.html":{},"classes/CustomError.html":{},"injectables/CustomLoggingService.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/LoggingMiddleware.html":{},"classes/RegisterUserDto.html":{},"injectables/RequestLoggingInterceptor.html":{},"classes/Reservation.html":{},"controllers/ReservationController.html":{},"injectables/ReservationRepository.html":{},"injectables/ReservationService.html":{},"modules/SharedModule.html":{},"controllers/UserController.html":{}}}],["dependencies",{"_index":31,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AppwriteModule.html":{},"modules/AuthModule.html":{},"modules/ReservationModule.html":{},"modules/SharedModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"index.html":{},"overview.html":{}}}],["deploy",{"_index":961,"title":{},"body":{"index.html":{}}}],["description",{"_index":347,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ReservationController.html":{},"controllers/UserController.html":{},"index.html":{},"properties.html":{}}}],["designed",{"_index":941,"title":{},"body":{"index.html":{}}}],["details",{"_index":678,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["development",{"_index":679,"title":{},"body":{"classes/GlobalExceptionFilter.html":{},"index.html":{}}}],["docker",{"_index":963,"title":{},"body":{"index.html":{}}}],["document",{"_index":153,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["documentation",{"_index":892,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["doe",{"_index":731,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["dto/create",{"_index":809,"title":{},"body":{"controllers/ReservationController.html":{},"injectables/ReservationService.html":{}}}],["dto/register",{"_index":379,"title":{},"body":{"controllers/AuthController.html":{}}}],["duration",{"_index":649,"title":{},"body":{"injectables/CustomLoggingService.html":{}}}],["each",{"_index":509,"title":{},"body":{"classes/CreateReservationDto.html":{}}}],["email",{"_index":269,"title":{},"body":{"injectables/AppwriteService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/RegisterUserDto.html":{},"controllers/UserController.html":{}}}],["end",{"_index":648,"title":{},"body":{"injectables/CustomLoggingService.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/RequestLoggingInterceptor.html":{}}}],["endpoint",{"_index":193,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["entities/reservation.entity",{"_index":812,"title":{},"body":{"controllers/ReservationController.html":{},"injectables/ReservationRepository.html":{},"injectables/ReservationService.html":{}}}],["enum",{"_index":600,"title":{},"body":{"injectables/CustomLoggingService.html":{}}}],["enumerations",{"_index":924,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["env",{"_index":422,"title":{},"body":{"injectables/ConfigService.html":{},"interfaces/envConfig.html":{}}}],["envconfig",{"_index":439,"title":{"interfaces/envConfig.html":{}},"body":{"injectables/ConfigService.html":{},"coverage.html":{},"interfaces/envConfig.html":{}}}],["environment",{"_index":680,"title":{},"body":{"classes/GlobalExceptionFilter.html":{},"index.html":{}}}],["error",{"_index":335,"title":{},"body":{"injectables/AppwriteSessionGuard.html":{},"controllers/AuthController.html":{},"classes/CustomError.html":{},"injectables/CustomLoggingService.html":{},"classes/GlobalExceptionFilter.html":{},"controllers/ReservationController.html":{},"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["error'})@apicookieauth('auth_token')@sessionguard()@get",{"_index":878,"title":{},"body":{"controllers/UserController.html":{}}}],["error'})@apicookieauth('auth_token')@sessionguard()@post('/register",{"_index":367,"title":{},"body":{"controllers/AuthController.html":{}}}],["error'})@apicookieauth('auth_token')@sessionguard({onlyregistereduser",{"_index":799,"title":{},"body":{"controllers/ReservationController.html":{}}}],["error'})@post('/login",{"_index":354,"title":{},"body":{"controllers/AuthController.html":{}}}],["error('appwrite",{"_index":189,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["error('unauthorized",{"_index":324,"title":{},"body":{"injectables/AppwriteSessionGuard.html":{}}}],["error(message",{"_index":553,"title":{},"body":{"injectables/CustomLoggingService.html":{}}}],["error.message.startswith('unauthorized",{"_index":337,"title":{},"body":{"injectables/AppwriteSessionGuard.html":{}}}],["error.stack",{"_index":666,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["error.ts",{"_index":512,"title":{},"body":{"classes/CustomError.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["error.ts:19",{"_index":517,"title":{},"body":{"classes/CustomError.html":{}}}],["error.ts:21",{"_index":522,"title":{},"body":{"classes/CustomError.html":{}}}],["error.ts:22",{"_index":519,"title":{},"body":{"classes/CustomError.html":{}}}],["error.ts:23",{"_index":524,"title":{},"body":{"classes/CustomError.html":{}}}],["error.ts:24",{"_index":521,"title":{},"body":{"classes/CustomError.html":{}}}],["error.ts:25",{"_index":523,"title":{},"body":{"classes/CustomError.html":{}}}],["error.ts:26",{"_index":520,"title":{},"body":{"classes/CustomError.html":{}}}],["errorpayload",{"_index":681,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["errortype",{"_index":515,"title":{},"body":{"classes/CustomError.html":{}}}],["example",{"_index":503,"title":{},"body":{"classes/CreateReservationDto.html":{},"classes/RegisterUserDto.html":{},"index.html":{}}}],["exception",{"_index":652,"title":{},"body":{"classes/GlobalExceptionFilter.html":{},"coverage.html":{}}}],["exception.code",{"_index":700,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["exception.error?.stack",{"_index":696,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["exception.errortype",{"_index":699,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["exception.message",{"_index":675,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["exception.payload",{"_index":701,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["exception.stack",{"_index":698,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["exception.status",{"_index":703,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["exceptionfilter",{"_index":654,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["exceptions",{"_index":673,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["executioncontext",{"_index":299,"title":{},"body":{"injectables/AppwriteSessionGuard.html":{},"injectables/RequestLoggingInterceptor.html":{}}}],["expires",{"_index":392,"title":{},"body":{"controllers/AuthController.html":{}}}],["export",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AppwriteModule.html":{},"injectables/AppwriteService.html":{},"injectables/AppwriteSessionGuard.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/ConfigService.html":{},"injectables/ContextService.html":{},"classes/CreateReservationDto.html":{},"classes/CustomError.html":{},"injectables/CustomLoggingService.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/HelpersService.html":{},"injectables/LoggingMiddleware.html":{},"classes/RegisterUserDto.html":{},"injectables/RequestLoggingInterceptor.html":{},"classes/Reservation.html":{},"controllers/ReservationController.html":{},"modules/ReservationModule.html":{},"injectables/ReservationRepository.html":{},"injectables/ReservationService.html":{},"modules/SharedModule.html":{},"classes/UpdateReservationDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"interfaces/envConfig.html":{}}}],["exports",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"modules/AppwriteModule.html":{},"modules/AuthModule.html":{},"modules/ReservationModule.html":{},"modules/SharedModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["express",{"_index":305,"title":{},"body":{"injectables/AppwriteSessionGuard.html":{},"controllers/AuthController.html":{},"classes/GlobalExceptionFilter.html":{},"controllers/ReservationController.html":{},"dependencies.html":{}}}],["extends",{"_index":513,"title":{},"body":{"classes/CustomError.html":{},"classes/UpdateReservationDto.html":{}}}],["false",{"_index":257,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["features",{"_index":952,"title":{},"body":{"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AppwriteModule.html":{},"injectables/AppwriteService.html":{},"injectables/AppwriteSessionGuard.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/ConfigService.html":{},"injectables/ContextService.html":{},"classes/CreateReservationDto.html":{},"classes/CustomError.html":{},"injectables/CustomLoggingService.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/HelpersService.html":{},"injectables/LoggingMiddleware.html":{},"classes/RegisterUserDto.html":{},"injectables/RequestLoggingInterceptor.html":{},"classes/Reservation.html":{},"controllers/ReservationController.html":{},"modules/ReservationModule.html":{},"injectables/ReservationRepository.html":{},"injectables/ReservationService.html":{},"modules/SharedModule.html":{},"classes/UpdateReservationDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"interfaces/envConfig.html":{}}}],["filter.ts",{"_index":653,"title":{},"body":{"classes/GlobalExceptionFilter.html":{},"coverage.html":{}}}],["filter.ts:18",{"_index":659,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["filter.ts:7",{"_index":656,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["format",{"_index":71,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateReservationDto.html":{},"injectables/CustomLoggingService.html":{}}}],["format.printf",{"_index":577,"title":{},"body":{"injectables/CustomLoggingService.html":{}}}],["found",{"_index":530,"title":{},"body":{"classes/CustomError.html":{},"classes/GlobalExceptionFilter.html":{},"miscellaneous/variables.html":{}}}],["function",{"_index":718,"title":{},"body":{"injectables/LoggingMiddleware.html":{},"coverage.html":{}}}],["functions",{"_index":935,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generate",{"_index":857,"title":{},"body":{"modules/SharedModule.html":{}}}],["get('/health",{"_index":12,"title":{},"body":{"controllers/AppController.html":{}}}],["get('/reservations",{"_index":820,"title":{},"body":{"controllers/ReservationController.html":{}}}],["get(key",{"_index":426,"title":{},"body":{"injectables/ConfigService.html":{},"injectables/ContextService.html":{},"interfaces/envConfig.html":{}}}],["getalluserreservations",{"_index":125,"title":{},"body":{"injectables/AppwriteService.html":{},"injectables/ReservationRepository.html":{},"injectables/ReservationService.html":{}}}],["getalluserreservations(userid",{"_index":144,"title":{},"body":{"injectables/AppwriteService.html":{},"injectables/ReservationRepository.html":{},"injectables/ReservationService.html":{}}}],["getallusersreservations",{"_index":794,"title":{},"body":{"controllers/ReservationController.html":{}}}],["getallusersreservations(@req",{"_index":821,"title":{},"body":{"controllers/ReservationController.html":{}}}],["getallusersreservations(request",{"_index":802,"title":{},"body":{"controllers/ReservationController.html":{}}}],["getappwriteconfig",{"_index":434,"title":{},"body":{"injectables/ConfigService.html":{}}}],["getdb",{"_index":432,"title":{},"body":{"injectables/ConfigService.html":{}}}],["getenv",{"_index":430,"title":{},"body":{"injectables/ConfigService.html":{}}}],["getglobalconfig",{"_index":436,"title":{},"body":{"injectables/ConfigService.html":{}}}],["getlogginglevel",{"_index":541,"title":{},"body":{"injectables/CustomLoggingService.html":{}}}],["getport",{"_index":420,"title":{},"body":{"injectables/ConfigService.html":{},"interfaces/envConfig.html":{}}}],["getserverhealth",{"_index":93,"title":{},"body":{"injectables/AppService.html":{}}}],["getting",{"_index":937,"title":{"index.html":{}},"body":{}}],["getuser",{"_index":874,"title":{},"body":{"controllers/UserController.html":{}}}],["getuser(@req",{"_index":884,"title":{},"body":{"controllers/UserController.html":{}}}],["getuser(request",{"_index":875,"title":{},"body":{"controllers/UserController.html":{}}}],["getuserfromsessionsecret",{"_index":126,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["getuserfromsessionsecret(secret",{"_index":148,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["give",{"_index":677,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["global",{"_index":87,"title":{},"body":{"modules/AppModule.html":{},"modules/SharedModule.html":{}}}],["globalconfig",{"_index":424,"title":{},"body":{"injectables/ConfigService.html":{},"interfaces/envConfig.html":{}}}],["globalexceptionfilter",{"_index":650,"title":{"classes/GlobalExceptionFilter.html":{}},"body":{"classes/GlobalExceptionFilter.html":{},"coverage.html":{}}}],["green",{"_index":565,"title":{},"body":{"injectables/CustomLoggingService.html":{},"miscellaneous/enumerations.html":{}}}],["health",{"_index":9,"title":{},"body":{"controllers/AppController.html":{}}}],["helpers/helpers.service",{"_index":859,"title":{},"body":{"modules/SharedModule.html":{}}}],["helpersservice",{"_index":708,"title":{"injectables/HelpersService.html":{}},"body":{"injectables/HelpersService.html":{},"modules/SharedModule.html":{},"coverage.html":{},"overview.html":{}}}],["hh:mm",{"_index":491,"title":{},"body":{"classes/CreateReservationDto.html":{}}}],["hh:mm:ss.sss",{"_index":83,"title":{},"body":{"modules/AppModule.html":{}}}],["host",{"_index":449,"title":{},"body":{"injectables/ConfigService.html":{},"classes/GlobalExceptionFilter.html":{},"interfaces/envConfig.html":{}}}],["host.switchtohttp",{"_index":669,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["http",{"_index":644,"title":{},"body":{"injectables/CustomLoggingService.html":{}}}],["httponly",{"_index":389,"title":{},"body":{"controllers/AuthController.html":{}}}],["https://cloud.appwrite.io/v1",{"_index":446,"title":{},"body":{"injectables/ConfigService.html":{},"interfaces/envConfig.html":{}}}],["id",{"_index":172,"title":{},"body":{"injectables/AppwriteService.html":{},"classes/Reservation.html":{},"controllers/ReservationController.html":{}}}],["id.unique",{"_index":234,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["identifier",{"_index":893,"title":{},"body":{"coverage.html":{}}}],["image",{"_index":964,"title":{},"body":{"index.html":{}}}],["implements",{"_index":184,"title":{},"body":{"injectables/AppwriteService.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/LoggingMiddleware.html":{},"injectables/RequestLoggingInterceptor.html":{},"classes/Reservation.html":{},"index.html":{}}}],["import",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AppwriteModule.html":{},"injectables/AppwriteService.html":{},"injectables/AppwriteSessionGuard.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/ConfigService.html":{},"injectables/ContextService.html":{},"classes/CreateReservationDto.html":{},"injectables/CustomLoggingService.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/HelpersService.html":{},"injectables/LoggingMiddleware.html":{},"classes/RegisterUserDto.html":{},"injectables/RequestLoggingInterceptor.html":{},"classes/Reservation.html":{},"controllers/ReservationController.html":{},"modules/ReservationModule.html":{},"injectables/ReservationRepository.html":{},"injectables/ReservationService.html":{},"modules/SharedModule.html":{},"classes/UpdateReservationDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"interfaces/envConfig.html":{}}}],["imports",{"_index":48,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ReservationModule.html":{},"modules/SharedModule.html":{},"modules/UserModule.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AppwriteService.html":{},"injectables/AppwriteSessionGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ConfigService.html":{},"injectables/ContextService.html":{},"classes/CreateReservationDto.html":{},"classes/CustomError.html":{},"injectables/CustomLoggingService.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/LoggingMiddleware.html":{},"classes/RegisterUserDto.html":{},"injectables/RequestLoggingInterceptor.html":{},"classes/Reservation.html":{},"controllers/ReservationController.html":{},"injectables/ReservationRepository.html":{},"injectables/ReservationService.html":{},"controllers/UserController.html":{},"miscellaneous/enumerations.html":{},"interfaces/envConfig.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AppwriteModule.html":{},"injectables/AppwriteService.html":{},"injectables/AppwriteSessionGuard.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/ConfigService.html":{},"injectables/ContextService.html":{},"classes/CreateReservationDto.html":{},"classes/CustomError.html":{},"injectables/CustomLoggingService.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/HelpersService.html":{},"injectables/LoggingMiddleware.html":{},"classes/RegisterUserDto.html":{},"injectables/RequestLoggingInterceptor.html":{},"classes/Reservation.html":{},"controllers/ReservationController.html":{},"modules/ReservationModule.html":{},"injectables/ReservationRepository.html":{},"injectables/ReservationService.html":{},"modules/SharedModule.html":{},"classes/UpdateReservationDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"interfaces/envConfig.html":{}}}],["inject",{"_index":597,"title":{},"body":{"injectables/CustomLoggingService.html":{}}}],["inject(inquirer",{"_index":615,"title":{},"body":{"injectables/CustomLoggingService.html":{}}}],["inject(winston_module_nest_provider",{"_index":614,"title":{},"body":{"injectables/CustomLoggingService.html":{}}}],["injectable",{"_index":90,"title":{"injectables/AppService.html":{},"injectables/AppwriteService.html":{},"injectables/AppwriteSessionGuard.html":{},"injectables/AuthService.html":{},"injectables/ConfigService.html":{},"injectables/ContextService.html":{},"injectables/CustomLoggingService.html":{},"injectables/HelpersService.html":{},"injectables/LoggingMiddleware.html":{},"injectables/RequestLoggingInterceptor.html":{},"injectables/ReservationRepository.html":{},"injectables/ReservationService.html":{},"injectables/UserService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AppwriteService.html":{},"injectables/AppwriteSessionGuard.html":{},"injectables/AuthService.html":{},"injectables/ConfigService.html":{},"injectables/ContextService.html":{},"injectables/CustomLoggingService.html":{},"injectables/HelpersService.html":{},"injectables/LoggingMiddleware.html":{},"injectables/RequestLoggingInterceptor.html":{},"injectables/ReservationRepository.html":{},"injectables/ReservationService.html":{},"injectables/UserService.html":{},"coverage.html":{},"interfaces/envConfig.html":{}}}],["injectables",{"_index":91,"title":{},"body":{"injectables/AppService.html":{},"injectables/AppwriteService.html":{},"injectables/AppwriteSessionGuard.html":{},"injectables/AuthService.html":{},"injectables/ConfigService.html":{},"injectables/ContextService.html":{},"injectables/CustomLoggingService.html":{},"injectables/HelpersService.html":{},"injectables/LoggingMiddleware.html":{},"injectables/RequestLoggingInterceptor.html":{},"injectables/ReservationRepository.html":{},"injectables/ReservationService.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["inquirer",{"_index":598,"title":{},"body":{"injectables/CustomLoggingService.html":{}}}],["inside",{"_index":507,"title":{},"body":{"classes/CreateReservationDto.html":{}}}],["install",{"_index":956,"title":{},"body":{"index.html":{}}}],["install2",{"_index":958,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":674,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["integrates",{"_index":949,"title":{},"body":{"index.html":{}}}],["interacting",{"_index":947,"title":{},"body":{"index.html":{}}}],["interactive",{"_index":992,"title":{},"body":{"index.html":{}}}],["intercept",{"_index":740,"title":{},"body":{"injectables/RequestLoggingInterceptor.html":{}}}],["intercept(context",{"_index":742,"title":{},"body":{"injectables/RequestLoggingInterceptor.html":{}}}],["interface",{"_index":438,"title":{"interfaces/envConfig.html":{}},"body":{"injectables/ConfigService.html":{},"coverage.html":{},"interfaces/envConfig.html":{},"overview.html":{}}}],["interfaces",{"_index":934,"title":{},"body":{"interfaces/envConfig.html":{}}}],["internal",{"_index":352,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ReservationController.html":{},"controllers/UserController.html":{}}}],["invalid",{"_index":363,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ReservationController.html":{}}}],["ip",{"_index":579,"title":{},"body":{"injectables/CustomLoggingService.html":{}}}],["isarray",{"_index":501,"title":{},"body":{"classes/CreateReservationDto.html":{}}}],["isdatestring",{"_index":495,"title":{},"body":{"classes/CreateReservationDto.html":{}}}],["isdevortest",{"_index":441,"title":{},"body":{"injectables/ConfigService.html":{},"interfaces/envConfig.html":{}}}],["isemail",{"_index":736,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["isint",{"_index":497,"title":{},"body":{"classes/CreateReservationDto.html":{}}}],["isnotempty",{"_index":494,"title":{},"body":{"classes/CreateReservationDto.html":{}}}],["isoptional",{"_index":500,"title":{},"body":{"classes/CreateReservationDto.html":{}}}],["isstring",{"_index":499,"title":{},"body":{"classes/CreateReservationDto.html":{},"classes/RegisterUserDto.html":{}}}],["john",{"_index":730,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["key",{"_index":198,"title":{},"body":{"injectables/AppwriteService.html":{},"injectables/ConfigService.html":{},"injectables/ContextService.html":{}}}],["keyof",{"_index":283,"title":{},"body":{"injectables/AppwriteService.html":{},"injectables/ConfigService.html":{},"interfaces/envConfig.html":{}}}],["label",{"_index":77,"title":{},"body":{"modules/AppModule.html":{},"injectables/CustomLoggingService.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/RequestLoggingInterceptor.html":{}}}],["legend",{"_index":32,"title":{},"body":{"modules/AppModule.html":{},"modules/AppwriteModule.html":{},"modules/AuthModule.html":{},"modules/ReservationModule.html":{},"modules/SharedModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["length",{"_index":630,"title":{},"body":{"injectables/CustomLoggingService.html":{}}}],["level",{"_index":69,"title":{},"body":{"modules/AppModule.html":{},"injectables/CustomLoggingService.html":{}}}],["level.touppercase().padend(5",{"_index":587,"title":{},"body":{"injectables/CustomLoggingService.html":{}}}],["leverage",{"_index":951,"title":{},"body":{"index.html":{}}}],["license",{"_index":1002,"title":{},"body":{"properties.html":{}}}],["literal",{"_index":160,"title":{},"body":{"injectables/AppwriteService.html":{},"injectables/AuthService.html":{},"injectables/CustomLoggingService.html":{},"classes/Reservation.html":{}}}],["log",{"_index":546,"title":{},"body":{"injectables/CustomLoggingService.html":{}}}],["log(message",{"_index":556,"title":{},"body":{"injectables/CustomLoggingService.html":{}}}],["logger",{"_index":296,"title":{},"body":{"injectables/AppwriteSessionGuard.html":{},"controllers/AuthController.html":{},"injectables/CustomLoggingService.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/LoggingMiddleware.html":{},"injectables/RequestLoggingInterceptor.html":{},"controllers/ReservationController.html":{}}}],["logger/logger.service",{"_index":309,"title":{},"body":{"injectables/AppwriteSessionGuard.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/LoggingMiddleware.html":{},"injectables/RequestLoggingInterceptor.html":{},"modules/SharedModule.html":{}}}],["loggercolor",{"_index":601,"title":{},"body":{"injectables/CustomLoggingService.html":{},"miscellaneous/enumerations.html":{}}}],["loggercolor.blue",{"_index":566,"title":{},"body":{"injectables/CustomLoggingService.html":{}}}],["loggercolor.cyan}${reqid",{"_index":584,"title":{},"body":{"injectables/CustomLoggingService.html":{}}}],["loggercolor.green",{"_index":564,"title":{},"body":{"injectables/CustomLoggingService.html":{}}}],["loggercolor.magenta",{"_index":569,"title":{},"body":{"injectables/CustomLoggingService.html":{}}}],["loggercolor.red",{"_index":559,"title":{},"body":{"injectables/CustomLoggingService.html":{}}}],["loggercolor.white",{"_index":583,"title":{},"body":{"injectables/CustomLoggingService.html":{}}}],["loggercolor.yellow",{"_index":562,"title":{},"body":{"injectables/CustomLoggingService.html":{}}}],["loggercolor.yellow}${label",{"_index":588,"title":{},"body":{"injectables/CustomLoggingService.html":{}}}],["logging.interceptor.ts",{"_index":739,"title":{},"body":{"injectables/RequestLoggingInterceptor.html":{},"coverage.html":{}}}],["logging.interceptor.ts:13",{"_index":744,"title":{},"body":{"injectables/RequestLoggingInterceptor.html":{}}}],["logging.interceptor.ts:7",{"_index":741,"title":{},"body":{"injectables/RequestLoggingInterceptor.html":{}}}],["logging.middleware",{"_index":862,"title":{},"body":{"modules/SharedModule.html":{}}}],["logging.middleware.ts",{"_index":712,"title":{},"body":{"injectables/LoggingMiddleware.html":{},"coverage.html":{}}}],["logging.middleware.ts:13",{"_index":717,"title":{},"body":{"injectables/LoggingMiddleware.html":{}}}],["logging.middleware.ts:7",{"_index":714,"title":{},"body":{"injectables/LoggingMiddleware.html":{}}}],["logginglevel",{"_index":627,"title":{},"body":{"injectables/CustomLoggingService.html":{}}}],["logginglevels",{"_index":542,"title":{},"body":{"injectables/CustomLoggingService.html":{}}}],["loggingmiddleware",{"_index":710,"title":{"injectables/LoggingMiddleware.html":{}},"body":{"injectables/LoggingMiddleware.html":{},"modules/SharedModule.html":{},"coverage.html":{}}}],["logic",{"_index":672,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["login",{"_index":340,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["login(@res",{"_index":384,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(response",{"_index":342,"title":{},"body":{"controllers/AuthController.html":{}}}],["logs",{"_index":646,"title":{},"body":{"injectables/CustomLoggingService.html":{}}}],["magenta",{"_index":570,"title":{},"body":{"injectables/CustomLoggingService.html":{},"miscellaneous/enumerations.html":{}}}],["management",{"_index":953,"title":{},"body":{"index.html":{}}}],["managing",{"_index":946,"title":{},"body":{"index.html":{}}}],["matches",{"_index":496,"title":{},"body":{"classes/CreateReservationDto.html":{}}}],["matches(/^([01]\\d|2[0",{"_index":504,"title":{},"body":{"classes/CreateReservationDto.html":{}}}],["matching",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AppwriteModule.html":{},"injectables/AppwriteService.html":{},"injectables/AppwriteSessionGuard.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/ConfigService.html":{},"injectables/ContextService.html":{},"classes/CreateReservationDto.html":{},"classes/CustomError.html":{},"injectables/CustomLoggingService.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/HelpersService.html":{},"injectables/LoggingMiddleware.html":{},"classes/RegisterUserDto.html":{},"injectables/RequestLoggingInterceptor.html":{},"classes/Reservation.html":{},"controllers/ReservationController.html":{},"modules/ReservationModule.html":{},"injectables/ReservationRepository.html":{},"injectables/ReservationService.html":{},"modules/SharedModule.html":{},"classes/UpdateReservationDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"interfaces/envConfig.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["math.random",{"_index":631,"title":{},"body":{"injectables/CustomLoggingService.html":{}}}],["message",{"_index":395,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateReservationDto.html":{},"classes/CustomError.html":{},"injectables/CustomLoggingService.html":{},"classes/GlobalExceptionFilter.html":{},"controllers/ReservationController.html":{},"miscellaneous/variables.html":{}}}],["metadata",{"_index":551,"title":{},"body":{"injectables/CustomLoggingService.html":{},"dependencies.html":{}}}],["metadata?.context",{"_index":624,"title":{},"body":{"injectables/CustomLoggingService.html":{}}}],["metadata?.data",{"_index":622,"title":{},"body":{"injectables/CustomLoggingService.html":{}}}],["metadata?.label",{"_index":617,"title":{},"body":{"injectables/CustomLoggingService.html":{}}}],["method",{"_index":642,"title":{},"body":{"injectables/CustomLoggingService.html":{}}}],["methods",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AppwriteService.html":{},"injectables/AppwriteSessionGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ConfigService.html":{},"injectables/ContextService.html":{},"injectables/CustomLoggingService.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/LoggingMiddleware.html":{},"injectables/RequestLoggingInterceptor.html":{},"classes/Reservation.html":{},"controllers/ReservationController.html":{},"injectables/ReservationRepository.html":{},"injectables/ReservationService.html":{},"modules/SharedModule.html":{},"controllers/UserController.html":{}}}],["middleware",{"_index":88,"title":{},"body":{"modules/AppModule.html":{}}}],["middleware/request",{"_index":861,"title":{},"body":{"modules/SharedModule.html":{}}}],["middlewareconsumer",{"_index":854,"title":{},"body":{"modules/SharedModule.html":{}}}],["min",{"_index":498,"title":{},"body":{"classes/CreateReservationDto.html":{}}}],["min(1",{"_index":505,"title":{},"body":{"classes/CreateReservationDto.html":{}}}],["miscellaneous",{"_index":923,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["missing",{"_index":191,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["mm",{"_index":81,"title":{},"body":{"modules/AppModule.html":{}}}],["mode",{"_index":980,"title":{},"body":{"index.html":{}}}],["models",{"_index":174,"title":{},"body":{"injectables/AppwriteService.html":{},"classes/Reservation.html":{}}}],["models.collection",{"_index":232,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["models.database",{"_index":165,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["models.document",{"_index":775,"title":{},"body":{"classes/Reservation.html":{}}}],["module",{"_index":28,"title":{"modules/AppModule.html":{},"modules/AppwriteModule.html":{},"modules/AuthModule.html":{},"modules/ReservationModule.html":{},"modules/SharedModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AppwriteModule.html":{},"modules/AuthModule.html":{},"injectables/CustomLoggingService.html":{},"modules/ReservationModule.html":{},"modules/SharedModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["modules",{"_index":30,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AppwriteModule.html":{},"modules/AuthModule.html":{},"modules/ReservationModule.html":{},"modules/SharedModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["mount",{"_index":89,"title":{},"body":{"modules/AppModule.html":{}}}],["msg",{"_index":582,"title":{},"body":{"injectables/CustomLoggingService.html":{}}}],["myformat",{"_index":543,"title":{},"body":{"injectables/CustomLoggingService.html":{}}}],["n${json.stringify(data",{"_index":592,"title":{},"body":{"injectables/CustomLoggingService.html":{}}}],["n${trace",{"_index":625,"title":{},"body":{"injectables/CustomLoggingService.html":{}}}],["name",{"_index":95,"title":{},"body":{"injectables/AppService.html":{},"injectables/AppwriteService.html":{},"injectables/AppwriteSessionGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ConfigService.html":{},"injectables/ContextService.html":{},"classes/CustomError.html":{},"injectables/CustomLoggingService.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/LoggingMiddleware.html":{},"classes/RegisterUserDto.html":{},"injectables/RequestLoggingInterceptor.html":{},"classes/Reservation.html":{},"controllers/ReservationController.html":{},"injectables/ReservationRepository.html":{},"injectables/ReservationService.html":{},"modules/SharedModule.html":{},"controllers/UserController.html":{}}}],["name'})@apiresponse({status",{"_index":877,"title":{},"body":{"controllers/UserController.html":{}}}],["necessary",{"_index":969,"title":{},"body":{"index.html":{}}}],["nest",{"_index":60,"title":{},"body":{"modules/AppModule.html":{},"injectables/CustomLoggingService.html":{},"modules/SharedModule.html":{},"dependencies.html":{}}}],["nestinterceptor",{"_index":746,"title":{},"body":{"injectables/RequestLoggingInterceptor.html":{}}}],["nestjs",{"_index":55,"title":{},"body":{"modules/AppModule.html":{},"injectables/ContextService.html":{},"injectables/CustomLoggingService.html":{},"injectables/LoggingMiddleware.html":{},"injectables/RequestLoggingInterceptor.html":{},"modules/SharedModule.html":{},"dependencies.html":{},"index.html":{}}}],["nestjs/common",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AppwriteModule.html":{},"injectables/AppwriteService.html":{},"injectables/AppwriteSessionGuard.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/ConfigService.html":{},"injectables/ContextService.html":{},"injectables/CustomLoggingService.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/HelpersService.html":{},"injectables/LoggingMiddleware.html":{},"injectables/RequestLoggingInterceptor.html":{},"controllers/ReservationController.html":{},"modules/ReservationModule.html":{},"injectables/ReservationRepository.html":{},"injectables/ReservationService.html":{},"modules/SharedModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{},"interfaces/envConfig.html":{}}}],["nestjs/config",{"_index":52,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":308,"title":{},"body":{"injectables/AppwriteSessionGuard.html":{},"injectables/CustomLoggingService.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":869,"title":{},"body":{"classes/UpdateReservationDto.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":910,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":378,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateReservationDto.html":{},"classes/RegisterUserDto.html":{},"controllers/ReservationController.html":{},"controllers/UserController.html":{},"dependencies.html":{}}}],["nestmiddleware",{"_index":719,"title":{},"body":{"injectables/LoggingMiddleware.html":{}}}],["new",{"_index":67,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppwriteService.html":{},"injectables/AppwriteSessionGuard.html":{},"controllers/AuthController.html":{},"injectables/LoggingMiddleware.html":{},"classes/Reservation.html":{},"controllers/ReservationController.html":{},"injectables/ReservationService.html":{},"coverage.html":{}}}],["next",{"_index":716,"title":{},"body":{"injectables/LoggingMiddleware.html":{},"injectables/RequestLoggingInterceptor.html":{}}}],["next.handle().pipe",{"_index":751,"title":{},"body":{"injectables/RequestLoggingInterceptor.html":{}}}],["node",{"_index":179,"title":{},"body":{"injectables/AppwriteService.html":{},"classes/Reservation.html":{},"dependencies.html":{}}}],["none",{"_index":391,"title":{},"body":{"controllers/AuthController.html":{}}}],["not_found",{"_index":528,"title":{},"body":{"classes/CustomError.html":{},"miscellaneous/variables.html":{}}}],["notfoundexception",{"_index":661,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["npm",{"_index":957,"title":{},"body":{"index.html":{}}}],["null",{"_index":258,"title":{},"body":{"injectables/AppwriteService.html":{},"injectables/CustomLoggingService.html":{}}}],["number",{"_index":429,"title":{},"body":{"injectables/ConfigService.html":{},"classes/CreateReservationDto.html":{},"classes/CustomError.html":{},"injectables/CustomLoggingService.html":{},"classes/Reservation.html":{},"interfaces/envConfig.html":{}}}],["numberofguests",{"_index":251,"title":{},"body":{"injectables/AppwriteService.html":{},"classes/CreateReservationDto.html":{},"classes/Reservation.html":{}}}],["numberofguestsattributeresponse",{"_index":249,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["number})@isint()@min(1",{"_index":481,"title":{},"body":{"classes/CreateReservationDto.html":{}}}],["oas3",{"_index":987,"title":{},"body":{"index.html":{}}}],["obj",{"_index":634,"title":{},"body":{"injectables/CustomLoggingService.html":{},"classes/Reservation.html":{}}}],["obj.$id",{"_index":788,"title":{},"body":{"classes/Reservation.html":{}}}],["obj.date",{"_index":778,"title":{},"body":{"classes/Reservation.html":{}}}],["obj.numberofguests",{"_index":782,"title":{},"body":{"classes/Reservation.html":{}}}],["obj.specialrequests",{"_index":784,"title":{},"body":{"classes/Reservation.html":{}}}],["obj.time",{"_index":780,"title":{},"body":{"classes/Reservation.html":{}}}],["obj.userid",{"_index":786,"title":{},"body":{"classes/Reservation.html":{}}}],["obj[prop",{"_index":638,"title":{},"body":{"injectables/CustomLoggingService.html":{}}}],["object",{"_index":548,"title":{},"body":{"injectables/CustomLoggingService.html":{},"miscellaneous/variables.html":{}}}],["object.keys(customloggingservice.logginglevels).includes(logginglevel",{"_index":629,"title":{},"body":{"injectables/CustomLoggingService.html":{}}}],["objects",{"_index":645,"title":{},"body":{"injectables/CustomLoggingService.html":{}}}],["observable",{"_index":745,"title":{},"body":{"injectables/RequestLoggingInterceptor.html":{}}}],["once",{"_index":967,"title":{},"body":{"index.html":{}}}],["onlyregistereduser",{"_index":312,"title":{},"body":{"injectables/AppwriteSessionGuard.html":{},"controllers/ReservationController.html":{},"miscellaneous/variables.html":{}}}],["onmoduleinit",{"_index":127,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["openapi",{"_index":985,"title":{},"body":{"index.html":{}}}],["optional",{"_index":137,"title":{},"body":{"injectables/AppwriteService.html":{},"injectables/AppwriteSessionGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ConfigService.html":{},"injectables/ContextService.html":{},"classes/CustomError.html":{},"injectables/CustomLoggingService.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/LoggingMiddleware.html":{},"injectables/RequestLoggingInterceptor.html":{},"classes/Reservation.html":{},"controllers/ReservationController.html":{},"injectables/ReservationRepository.html":{},"injectables/ReservationService.html":{},"modules/SharedModule.html":{},"controllers/UserController.html":{}}}],["options",{"_index":311,"title":{},"body":{"injectables/AppwriteSessionGuard.html":{},"miscellaneous/variables.html":{}}}],["options?.onlyregistereduser",{"_index":314,"title":{},"body":{"injectables/AppwriteSessionGuard.html":{},"miscellaneous/variables.html":{}}}],["othermetadata",{"_index":581,"title":{},"body":{"injectables/CustomLoggingService.html":{}}}],["othermetadata[prop",{"_index":591,"title":{},"body":{"injectables/CustomLoggingService.html":{}}}],["others",{"_index":955,"title":{},"body":{"index.html":{}}}],["out",{"_index":46,"title":{},"body":{"modules/AppModule.html":{},"modules/AppwriteModule.html":{},"modules/AuthModule.html":{},"modules/ReservationModule.html":{},"modules/SharedModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["overview",{"_index":998,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":907,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["package.json",{"_index":100,"title":{},"body":{"injectables/AppService.html":{}}}],["packagejson",{"_index":99,"title":{},"body":{"injectables/AppService.html":{}}}],["packagejson.name",{"_index":101,"title":{},"body":{"injectables/AppService.html":{}}}],["packagejson.version",{"_index":102,"title":{},"body":{"injectables/AppService.html":{}}}],["parameters",{"_index":135,"title":{},"body":{"injectables/AppwriteService.html":{},"injectables/AppwriteSessionGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ConfigService.html":{},"injectables/ContextService.html":{},"classes/CustomError.html":{},"injectables/CustomLoggingService.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/LoggingMiddleware.html":{},"injectables/RequestLoggingInterceptor.html":{},"classes/Reservation.html":{},"controllers/ReservationController.html":{},"injectables/ReservationRepository.html":{},"injectables/ReservationService.html":{},"modules/SharedModule.html":{},"controllers/UserController.html":{}}}],["parser",{"_index":915,"title":{},"body":{"dependencies.html":{}}}],["partialtype",{"_index":868,"title":{},"body":{"classes/UpdateReservationDto.html":{}}}],["partialtype(createreservationdto",{"_index":867,"title":{},"body":{"classes/UpdateReservationDto.html":{}}}],["passthrough",{"_index":385,"title":{},"body":{"controllers/AuthController.html":{}}}],["password",{"_index":270,"title":{},"body":{"injectables/AppwriteService.html":{},"injectables/AuthService.html":{},"classes/RegisterUserDto.html":{}}}],["password123",{"_index":734,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["payload",{"_index":396,"title":{},"body":{"controllers/AuthController.html":{},"classes/CustomError.html":{},"classes/GlobalExceptionFilter.html":{},"controllers/ReservationController.html":{}}}],["payload'})@apiresponse({status",{"_index":364,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ReservationController.html":{}}}],["permission",{"_index":175,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["permission.create(role.users",{"_index":236,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["permission.delete(role.users",{"_index":238,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["permission.read(role.any",{"_index":235,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["permission.update(role.users",{"_index":237,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["permissions",{"_index":757,"title":{},"body":{"classes/Reservation.html":{}}}],["port",{"_index":440,"title":{},"body":{"injectables/ConfigService.html":{},"interfaces/envConfig.html":{}}}],["post",{"_index":369,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ReservationController.html":{}}}],["post('/login",{"_index":383,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/register",{"_index":399,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/reservation",{"_index":813,"title":{},"body":{"controllers/ReservationController.html":{}}}],["prefix",{"_index":873,"title":{},"body":{"controllers/UserController.html":{}}}],["private",{"_index":113,"title":{},"body":{"injectables/AppwriteService.html":{},"injectables/AppwriteSessionGuard.html":{},"controllers/AuthController.html":{},"injectables/CustomLoggingService.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/LoggingMiddleware.html":{},"injectables/RequestLoggingInterceptor.html":{},"controllers/ReservationController.html":{}}}],["process.env.app_host",{"_index":450,"title":{},"body":{"injectables/ConfigService.html":{},"interfaces/envConfig.html":{}}}],["process.env.app_port",{"_index":452,"title":{},"body":{"injectables/ConfigService.html":{},"interfaces/envConfig.html":{}}}],["process.env.appwrite_api_key",{"_index":448,"title":{},"body":{"injectables/ConfigService.html":{},"interfaces/envConfig.html":{}}}],["process.env.appwrite_database_id",{"_index":444,"title":{},"body":{"injectables/ConfigService.html":{},"interfaces/envConfig.html":{}}}],["process.env.appwrite_endpoint",{"_index":445,"title":{},"body":{"injectables/ConfigService.html":{},"interfaces/envConfig.html":{}}}],["process.env.appwrite_project_id",{"_index":447,"title":{},"body":{"injectables/ConfigService.html":{},"interfaces/envConfig.html":{}}}],["process.env.logging_level",{"_index":628,"title":{},"body":{"injectables/CustomLoggingService.html":{}}}],["process.env.node_env?.tolowercase().startswith('dev",{"_index":442,"title":{},"body":{"injectables/ConfigService.html":{},"interfaces/envConfig.html":{}}}],["process.env.node_env?.tolowercase().startswith('test",{"_index":443,"title":{},"body":{"injectables/ConfigService.html":{},"interfaces/envConfig.html":{}}}],["process.env.port",{"_index":454,"title":{},"body":{"injectables/ConfigService.html":{},"interfaces/envConfig.html":{}}}],["process.env[key",{"_index":455,"title":{},"body":{"injectables/ConfigService.html":{},"interfaces/envConfig.html":{}}}],["process.on('uncaughtexception",{"_index":664,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["production",{"_index":982,"title":{},"body":{"index.html":{}}}],["project",{"_index":195,"title":{},"body":{"injectables/AppwriteService.html":{},"index.html":{}}}],["promise",{"_index":147,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["prop",{"_index":589,"title":{},"body":{"injectables/CustomLoggingService.html":{}}}],["prop.startswith('primitive",{"_index":590,"title":{},"body":{"injectables/CustomLoggingService.html":{}}}],["properly",{"_index":976,"title":{},"body":{"index.html":{}}}],["properties",{"_index":112,"title":{"properties.html":{}},"body":{"injectables/AppwriteService.html":{},"classes/CreateReservationDto.html":{},"classes/CustomError.html":{},"injectables/CustomLoggingService.html":{},"classes/RegisterUserDto.html":{},"classes/Reservation.html":{},"interfaces/envConfig.html":{},"properties.html":{}}}],["provide",{"_index":942,"title":{},"body":{"index.html":{}}}],["providers",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"modules/AppwriteModule.html":{},"modules/AuthModule.html":{},"modules/ReservationModule.html":{},"modules/SharedModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["providing",{"_index":990,"title":{},"body":{"index.html":{}}}],["public",{"_index":120,"title":{},"body":{"injectables/AppwriteService.html":{},"classes/CustomError.html":{}}}],["pulling",{"_index":962,"title":{},"body":{"index.html":{}}}],["query",{"_index":176,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["query.equal('userid",{"_index":289,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["randomstring",{"_index":544,"title":{},"body":{"injectables/CustomLoggingService.html":{}}}],["randomuuid",{"_index":720,"title":{},"body":{"injectables/LoggingMiddleware.html":{}}}],["readonly",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppwriteService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ContextService.html":{},"classes/CustomError.html":{},"injectables/CustomLoggingService.html":{},"injectables/LoggingMiddleware.html":{},"injectables/RequestLoggingInterceptor.html":{},"controllers/ReservationController.html":{},"injectables/ReservationRepository.html":{},"injectables/ReservationService.html":{},"controllers/UserController.html":{}}}],["real",{"_index":360,"title":{},"body":{"controllers/AuthController.html":{}}}],["red",{"_index":560,"title":{},"body":{"injectables/CustomLoggingService.html":{},"miscellaneous/enumerations.html":{}}}],["reflect",{"_index":920,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":295,"title":{},"body":{"injectables/AppwriteSessionGuard.html":{}}}],["register",{"_index":341,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["register(@req",{"_index":400,"title":{},"body":{"controllers/AuthController.html":{}}}],["register(request",{"_index":356,"title":{},"body":{"controllers/AuthController.html":{}}}],["register(userid",{"_index":415,"title":{},"body":{"injectables/AuthService.html":{}}}],["registered",{"_index":330,"title":{},"body":{"injectables/AppwriteSessionGuard.html":{},"controllers/AuthController.html":{}}}],["registereduser",{"_index":401,"title":{},"body":{"controllers/AuthController.html":{}}}],["registereduser.email",{"_index":404,"title":{},"body":{"controllers/AuthController.html":{}}}],["registereduser.name",{"_index":403,"title":{},"body":{"controllers/AuthController.html":{}}}],["registeruserdto",{"_index":358,"title":{"classes/RegisterUserDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/RegisterUserDto.html":{},"coverage.html":{}}}],["req",{"_index":370,"title":{},"body":{"controllers/AuthController.html":{},"injectables/LoggingMiddleware.html":{},"controllers/ReservationController.html":{},"controllers/UserController.html":{}}}],["reqid",{"_index":580,"title":{},"body":{"injectables/CustomLoggingService.html":{}}}],["request",{"_index":304,"title":{},"body":{"injectables/AppwriteSessionGuard.html":{},"controllers/AuthController.html":{},"injectables/CustomLoggingService.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/LoggingMiddleware.html":{},"injectables/RequestLoggingInterceptor.html":{},"controllers/ReservationController.html":{},"controllers/UserController.html":{}}}],["request.cookies['auth_token",{"_index":320,"title":{},"body":{"injectables/AppwriteSessionGuard.html":{}}}],["request.method",{"_index":686,"title":{},"body":{"classes/GlobalExceptionFilter.html":{},"injectables/RequestLoggingInterceptor.html":{}}}],["request.url",{"_index":687,"title":{},"body":{"classes/GlobalExceptionFilter.html":{},"injectables/RequestLoggingInterceptor.html":{}}}],["request.user",{"_index":331,"title":{},"body":{"injectables/AppwriteSessionGuard.html":{},"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["request.user.$id",{"_index":815,"title":{},"body":{"controllers/ReservationController.html":{}}}],["requestlogginginterceptor",{"_index":737,"title":{"injectables/RequestLoggingInterceptor.html":{}},"body":{"injectables/RequestLoggingInterceptor.html":{},"coverage.html":{}}}],["required",{"_index":973,"title":{},"body":{"index.html":{}}}],["requiredcollectionsmap",{"_index":119,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["res",{"_index":371,"title":{},"body":{"controllers/AuthController.html":{},"injectables/LoggingMiddleware.html":{}}}],["reservation",{"_index":154,"title":{"classes/Reservation.html":{}},"body":{"injectables/AppwriteService.html":{},"classes/Reservation.html":{},"controllers/ReservationController.html":{},"injectables/ReservationRepository.html":{},"injectables/ReservationService.html":{},"coverage.html":{}}}],["reservation'})@apiresponse({status",{"_index":798,"title":{},"body":{"controllers/ReservationController.html":{}}}],["reservation(reservation).toresponsedto",{"_index":824,"title":{},"body":{"controllers/ReservationController.html":{}}}],["reservation.$id",{"_index":817,"title":{},"body":{"controllers/ReservationController.html":{}}}],["reservation.controller",{"_index":830,"title":{},"body":{"modules/ReservationModule.html":{}}}],["reservation.date",{"_index":819,"title":{},"body":{"controllers/ReservationController.html":{}}}],["reservation.dto",{"_index":810,"title":{},"body":{"controllers/ReservationController.html":{},"injectables/ReservationService.html":{},"classes/UpdateReservationDto.html":{}}}],["reservation.dto.ts",{"_index":473,"title":{},"body":{"classes/CreateReservationDto.html":{},"classes/UpdateReservationDto.html":{},"coverage.html":{}}}],["reservation.dto.ts:15",{"_index":492,"title":{},"body":{"classes/CreateReservationDto.html":{}}}],["reservation.dto.ts:20",{"_index":482,"title":{},"body":{"classes/CreateReservationDto.html":{}}}],["reservation.dto.ts:26",{"_index":486,"title":{},"body":{"classes/CreateReservationDto.html":{}}}],["reservation.dto.ts:8",{"_index":479,"title":{},"body":{"classes/CreateReservationDto.html":{}}}],["reservation.repository",{"_index":831,"title":{},"body":{"modules/ReservationModule.html":{},"injectables/ReservationService.html":{}}}],["reservation.service",{"_index":808,"title":{},"body":{"controllers/ReservationController.html":{},"modules/ReservationModule.html":{}}}],["reservation.time",{"_index":818,"title":{},"body":{"controllers/ReservationController.html":{}}}],["reservationcontroller",{"_index":791,"title":{"controllers/ReservationController.html":{}},"body":{"controllers/ReservationController.html":{},"modules/ReservationModule.html":{},"coverage.html":{}}}],["reservationmodule",{"_index":41,"title":{"modules/ReservationModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ReservationModule.html":{},"modules.html":{},"overview.html":{}}}],["reservationrepository",{"_index":828,"title":{"injectables/ReservationRepository.html":{}},"body":{"modules/ReservationModule.html":{},"injectables/ReservationRepository.html":{},"injectables/ReservationService.html":{},"coverage.html":{},"overview.html":{}}}],["reservations",{"_index":171,"title":{},"body":{"injectables/AppwriteService.html":{},"controllers/ReservationController.html":{},"injectables/ReservationRepository.html":{},"index.html":{}}}],["reservations'})@apiresponse({status",{"_index":804,"title":{},"body":{"controllers/ReservationController.html":{}}}],["reservations.documents",{"_index":290,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["reservations.map((reservation",{"_index":823,"title":{},"body":{"controllers/ReservationController.html":{}}}],["reservationservice",{"_index":807,"title":{"injectables/ReservationService.html":{}},"body":{"controllers/ReservationController.html":{},"modules/ReservationModule.html":{},"injectables/ReservationService.html":{},"coverage.html":{},"overview.html":{}}}],["reset",{"_index":45,"title":{},"body":{"modules/AppModule.html":{},"modules/AppwriteModule.html":{},"modules/AuthModule.html":{},"modules/ReservationModule.html":{},"modules/SharedModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["resources/reservation/reservation.module",{"_index":58,"title":{},"body":{"modules/AppModule.html":{}}}],["resources/user/user.module",{"_index":57,"title":{},"body":{"modules/AppModule.html":{}}}],["response",{"_index":227,"title":{},"body":{"injectables/AppwriteService.html":{},"controllers/AuthController.html":{},"injectables/CustomLoggingService.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/RequestLoggingInterceptor.html":{}}}],["response.$id",{"_index":229,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["response.cookie('auth_token",{"_index":387,"title":{},"body":{"controllers/AuthController.html":{}}}],["response.status(400).json",{"_index":689,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["response.status(404).json",{"_index":693,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["response.status(500).json",{"_index":705,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["response.status(exception.status).json",{"_index":702,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["response.statuscode",{"_index":688,"title":{},"body":{"classes/GlobalExceptionFilter.html":{},"injectables/RequestLoggingInterceptor.html":{}}}],["results",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AppwriteModule.html":{},"injectables/AppwriteService.html":{},"injectables/AppwriteSessionGuard.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/ConfigService.html":{},"injectables/ContextService.html":{},"classes/CreateReservationDto.html":{},"classes/CustomError.html":{},"injectables/CustomLoggingService.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/HelpersService.html":{},"injectables/LoggingMiddleware.html":{},"classes/RegisterUserDto.html":{},"injectables/RequestLoggingInterceptor.html":{},"classes/Reservation.html":{},"controllers/ReservationController.html":{},"modules/ReservationModule.html":{},"injectables/ReservationRepository.html":{},"injectables/ReservationService.html":{},"modules/SharedModule.html":{},"classes/UpdateReservationDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"interfaces/envConfig.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AppwriteService.html":{},"injectables/AppwriteSessionGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ConfigService.html":{},"injectables/ContextService.html":{},"injectables/CustomLoggingService.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/RequestLoggingInterceptor.html":{},"controllers/ReservationController.html":{},"injectables/ReservationRepository.html":{},"injectables/ReservationService.html":{},"controllers/UserController.html":{},"interfaces/envConfig.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AppwriteService.html":{},"injectables/AppwriteSessionGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ConfigService.html":{},"injectables/ContextService.html":{},"injectables/CustomLoggingService.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/LoggingMiddleware.html":{},"injectables/RequestLoggingInterceptor.html":{},"classes/Reservation.html":{},"controllers/ReservationController.html":{},"injectables/ReservationRepository.html":{},"injectables/ReservationService.html":{},"modules/SharedModule.html":{},"controllers/UserController.html":{}}}],["robust",{"_index":943,"title":{},"body":{"index.html":{}}}],["role",{"_index":177,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["run",{"_index":975,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":748,"title":{},"body":{"injectables/RequestLoggingInterceptor.html":{},"dependencies.html":{}}}],["samesite",{"_index":390,"title":{},"body":{"controllers/AuthController.html":{}}}],["savedocument",{"_index":128,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["savedocument(collection",{"_index":152,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["savedreservation",{"_index":838,"title":{},"body":{"injectables/ReservationRepository.html":{}}}],["scalable",{"_index":944,"title":{},"body":{"index.html":{}}}],["scope",{"_index":596,"title":{},"body":{"injectables/CustomLoggingService.html":{}}}],["scope.transient",{"_index":613,"title":{},"body":{"injectables/CustomLoggingService.html":{}}}],["seamlessly",{"_index":948,"title":{},"body":{"index.html":{}}}],["secret",{"_index":150,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["selfhosted",{"_index":959,"title":{},"body":{"index.html":{}}}],["send",{"_index":704,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["server",{"_index":353,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ReservationController.html":{},"controllers/UserController.html":{},"index.html":{}}}],["service",{"_index":960,"title":{},"body":{"index.html":{}}}],["servicename",{"_index":616,"title":{},"body":{"injectables/CustomLoggingService.html":{}}}],["session",{"_index":346,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ReservationController.html":{},"controllers/UserController.html":{}}}],["session'})@apiresponse({status",{"_index":348,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ReservationController.html":{}}}],["session.secret",{"_index":388,"title":{},"body":{"controllers/AuthController.html":{}}}],["sessionclient",{"_index":262,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["sessionclient.setsession(secret",{"_index":265,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["sessionguard",{"_index":310,"title":{},"body":{"injectables/AppwriteSessionGuard.html":{},"controllers/AuthController.html":{},"controllers/ReservationController.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["sessionsecret",{"_index":465,"title":{},"body":{"injectables/ContextService.html":{},"miscellaneous/variables.html":{}}}],["set",{"_index":206,"title":{},"body":{"injectables/AppwriteService.html":{},"injectables/ContextService.html":{},"index.html":{}}}],["set(key",{"_index":461,"title":{},"body":{"injectables/ContextService.html":{}}}],["setendpoint(this.configservice.appwriteconfig.appwrite_endpoint",{"_index":263,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["setmetadata",{"_index":302,"title":{},"body":{"injectables/AppwriteSessionGuard.html":{},"injectables/CustomLoggingService.html":{}}}],["setproject(this.configservice.appwriteconfig.appwrite_project_id",{"_index":264,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["setup",{"_index":643,"title":{},"body":{"injectables/CustomLoggingService.html":{},"index.html":{}}}],["shared",{"_index":858,"title":{},"body":{"modules/SharedModule.html":{}}}],["shared/guards/session.guard",{"_index":374,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["shared/logger/logger.service",{"_index":63,"title":{},"body":{"modules/AppModule.html":{}}}],["shared/shared.module",{"_index":50,"title":{},"body":{"modules/AppModule.html":{}}}],["sharedmodule",{"_index":42,"title":{"modules/SharedModule.html":{}},"body":{"modules/AppModule.html":{},"modules/SharedModule.html":{},"modules.html":{},"overview.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AppwriteModule.html":{},"injectables/AppwriteService.html":{},"injectables/AppwriteSessionGuard.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/ConfigService.html":{},"injectables/ContextService.html":{},"classes/CreateReservationDto.html":{},"classes/CustomError.html":{},"injectables/CustomLoggingService.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/HelpersService.html":{},"injectables/LoggingMiddleware.html":{},"classes/RegisterUserDto.html":{},"injectables/RequestLoggingInterceptor.html":{},"classes/Reservation.html":{},"controllers/ReservationController.html":{},"modules/ReservationModule.html":{},"injectables/ReservationRepository.html":{},"injectables/ReservationService.html":{},"modules/SharedModule.html":{},"classes/UpdateReservationDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"interfaces/envConfig.html":{}}}],["spec",{"_index":993,"title":{},"body":{"index.html":{}}}],["specialrequests",{"_index":256,"title":{},"body":{"injectables/AppwriteService.html":{},"classes/CreateReservationDto.html":{},"classes/Reservation.html":{}}}],["specialrequestsattributeresponse",{"_index":254,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["specification",{"_index":986,"title":{},"body":{"index.html":{}}}],["specifications",{"_index":984,"title":{},"body":{"index.html":{}}}],["src/.../context.service.ts",{"_index":1005,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../custom",{"_index":1006,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../logger.service.ts",{"_index":925,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../main.ts",{"_index":936,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../session.guard.ts",{"_index":1007,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:9",{"_index":14,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":47,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":92,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":94,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":339,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:19",{"_index":355,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:38",{"_index":368,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":408,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":411,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:13",{"_index":416,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:5",{"_index":413,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:8",{"_index":414,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/dto/register",{"_index":725,"title":{},"body":{"classes/RegisterUserDto.html":{},"coverage.html":{}}}],["src/integrations/appwrite/appwrite.module",{"_index":410,"title":{},"body":{"modules/AuthModule.html":{},"modules/ReservationModule.html":{},"modules/UserModule.html":{}}}],["src/integrations/appwrite/appwrite.module.ts",{"_index":109,"title":{},"body":{"modules/AppwriteModule.html":{}}}],["src/integrations/appwrite/appwrite.service",{"_index":306,"title":{},"body":{"injectables/AppwriteSessionGuard.html":{},"injectables/AuthService.html":{},"injectables/ReservationRepository.html":{}}}],["src/integrations/appwrite/appwrite.service.ts",{"_index":111,"title":{},"body":{"injectables/AppwriteService.html":{},"coverage.html":{}}}],["src/integrations/appwrite/appwrite.service.ts:10",{"_index":162,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["src/integrations/appwrite/appwrite.service.ts:112",{"_index":138,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["src/integrations/appwrite/appwrite.service.ts:119",{"_index":149,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["src/integrations/appwrite/appwrite.service.ts:12",{"_index":167,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["src/integrations/appwrite/appwrite.service.ts:13",{"_index":168,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["src/integrations/appwrite/appwrite.service.ts:130",{"_index":161,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["src/integrations/appwrite/appwrite.service.ts:14",{"_index":166,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["src/integrations/appwrite/appwrite.service.ts:141",{"_index":155,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["src/integrations/appwrite/appwrite.service.ts:151",{"_index":145,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["src/integrations/appwrite/appwrite.service.ts:16",{"_index":173,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["src/integrations/appwrite/appwrite.service.ts:18",{"_index":134,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["src/integrations/appwrite/appwrite.service.ts:39",{"_index":151,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["src/integrations/appwrite/appwrite.service.ts:67",{"_index":143,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["src/integrations/appwrite/appwrite.service.ts:73",{"_index":141,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["src/integrations/appwrite/appwrite.service.ts:9",{"_index":164,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["src/main.ts",{"_index":899,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/resources/reservation/dto/create",{"_index":472,"title":{},"body":{"classes/CreateReservationDto.html":{},"coverage.html":{}}}],["src/resources/reservation/dto/update",{"_index":866,"title":{},"body":{"classes/UpdateReservationDto.html":{},"coverage.html":{}}}],["src/resources/reservation/entities/reservation.entity",{"_index":181,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["src/resources/reservation/entities/reservation.entity.ts",{"_index":754,"title":{},"body":{"classes/Reservation.html":{},"coverage.html":{}}}],["src/resources/reservation/entities/reservation.entity.ts:10",{"_index":761,"title":{},"body":{"classes/Reservation.html":{}}}],["src/resources/reservation/entities/reservation.entity.ts:27",{"_index":765,"title":{},"body":{"classes/Reservation.html":{}}}],["src/resources/reservation/entities/reservation.entity.ts:28",{"_index":762,"title":{},"body":{"classes/Reservation.html":{}}}],["src/resources/reservation/entities/reservation.entity.ts:29",{"_index":764,"title":{},"body":{"classes/Reservation.html":{}}}],["src/resources/reservation/entities/reservation.entity.ts:30",{"_index":763,"title":{},"body":{"classes/Reservation.html":{}}}],["src/resources/reservation/entities/reservation.entity.ts:31",{"_index":767,"title":{},"body":{"classes/Reservation.html":{}}}],["src/resources/reservation/entities/reservation.entity.ts:32",{"_index":766,"title":{},"body":{"classes/Reservation.html":{}}}],["src/resources/reservation/entities/reservation.entity.ts:34",{"_index":773,"title":{},"body":{"classes/Reservation.html":{}}}],["src/resources/reservation/entities/reservation.entity.ts:5",{"_index":769,"title":{},"body":{"classes/Reservation.html":{}}}],["src/resources/reservation/entities/reservation.entity.ts:6",{"_index":768,"title":{},"body":{"classes/Reservation.html":{}}}],["src/resources/reservation/entities/reservation.entity.ts:7",{"_index":772,"title":{},"body":{"classes/Reservation.html":{}}}],["src/resources/reservation/entities/reservation.entity.ts:8",{"_index":770,"title":{},"body":{"classes/Reservation.html":{}}}],["src/resources/reservation/entities/reservation.entity.ts:9",{"_index":771,"title":{},"body":{"classes/Reservation.html":{}}}],["src/resources/reservation/reservation.controller.ts",{"_index":792,"title":{},"body":{"controllers/ReservationController.html":{},"coverage.html":{}}}],["src/resources/reservation/reservation.controller.ts:25",{"_index":801,"title":{},"body":{"controllers/ReservationController.html":{}}}],["src/resources/reservation/reservation.controller.ts:46",{"_index":806,"title":{},"body":{"controllers/ReservationController.html":{}}}],["src/resources/reservation/reservation.module.ts",{"_index":829,"title":{},"body":{"modules/ReservationModule.html":{}}}],["src/resources/reservation/reservation.repository.ts",{"_index":832,"title":{},"body":{"injectables/ReservationRepository.html":{},"coverage.html":{}}}],["src/resources/reservation/reservation.repository.ts:14",{"_index":835,"title":{},"body":{"injectables/ReservationRepository.html":{}}}],["src/resources/reservation/reservation.repository.ts:6",{"_index":833,"title":{},"body":{"injectables/ReservationRepository.html":{}}}],["src/resources/reservation/reservation.repository.ts:9",{"_index":836,"title":{},"body":{"injectables/ReservationRepository.html":{}}}],["src/resources/reservation/reservation.service.ts",{"_index":840,"title":{},"body":{"injectables/ReservationService.html":{},"coverage.html":{}}}],["src/resources/reservation/reservation.service.ts:10",{"_index":845,"title":{},"body":{"injectables/ReservationService.html":{}}}],["src/resources/reservation/reservation.service.ts:14",{"_index":844,"title":{},"body":{"injectables/ReservationService.html":{}}}],["src/resources/reservation/reservation.service.ts:7",{"_index":842,"title":{},"body":{"injectables/ReservationService.html":{}}}],["src/resources/user/user.controller.ts",{"_index":872,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/resources/user/user.controller.ts:17",{"_index":879,"title":{},"body":{"controllers/UserController.html":{}}}],["src/resources/user/user.module.ts",{"_index":888,"title":{},"body":{"modules/UserModule.html":{}}}],["src/resources/user/user.service.ts",{"_index":890,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/shared/config/config.service",{"_index":182,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["src/shared/config/config.service.ts",{"_index":419,"title":{},"body":{"injectables/ConfigService.html":{},"coverage.html":{},"interfaces/envConfig.html":{}}}],["src/shared/config/config.service.ts:11",{"_index":425,"title":{},"body":{"injectables/ConfigService.html":{}}}],["src/shared/config/config.service.ts:14",{"_index":431,"title":{},"body":{"injectables/ConfigService.html":{}}}],["src/shared/config/config.service.ts:20",{"_index":433,"title":{},"body":{"injectables/ConfigService.html":{}}}],["src/shared/config/config.service.ts:26",{"_index":435,"title":{},"body":{"injectables/ConfigService.html":{}}}],["src/shared/config/config.service.ts:34",{"_index":437,"title":{},"body":{"injectables/ConfigService.html":{}}}],["src/shared/config/config.service.ts:41",{"_index":428,"title":{},"body":{"injectables/ConfigService.html":{}}}],["src/shared/config/config.service.ts:45",{"_index":427,"title":{},"body":{"injectables/ConfigService.html":{}}}],["src/shared/context/context.service",{"_index":183,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["src/shared/context/context.service.ts",{"_index":456,"title":{},"body":{"injectables/ContextService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/shared/context/context.service.ts:11",{"_index":459,"title":{},"body":{"injectables/ContextService.html":{}}}],["src/shared/context/context.service.ts:14",{"_index":460,"title":{},"body":{"injectables/ContextService.html":{}}}],["src/shared/context/context.service.ts:18",{"_index":462,"title":{},"body":{"injectables/ContextService.html":{}}}],["src/shared/exceptions/custom",{"_index":511,"title":{},"body":{"classes/CustomError.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/shared/exceptions/global",{"_index":651,"title":{},"body":{"classes/GlobalExceptionFilter.html":{},"coverage.html":{}}}],["src/shared/guards/session.guard",{"_index":811,"title":{},"body":{"controllers/ReservationController.html":{},"controllers/UserController.html":{}}}],["src/shared/guards/session.guard.ts",{"_index":292,"title":{},"body":{"injectables/AppwriteSessionGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/shared/guards/session.guard.ts:16",{"_index":297,"title":{},"body":{"injectables/AppwriteSessionGuard.html":{}}}],["src/shared/guards/session.guard.ts:24",{"_index":300,"title":{},"body":{"injectables/AppwriteSessionGuard.html":{}}}],["src/shared/helpers/helpers.service.ts",{"_index":709,"title":{},"body":{"injectables/HelpersService.html":{},"coverage.html":{}}}],["src/shared/interceptors/request",{"_index":738,"title":{},"body":{"injectables/RequestLoggingInterceptor.html":{},"coverage.html":{}}}],["src/shared/logger/logger.service",{"_index":381,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ReservationController.html":{}}}],["src/shared/logger/logger.service.ts",{"_index":537,"title":{},"body":{"injectables/CustomLoggingService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/shared/logger/logger.service.ts:118",{"_index":594,"title":{},"body":{"injectables/CustomLoggingService.html":{}}}],["src/shared/logger/logger.service.ts:124",{"_index":558,"title":{},"body":{"injectables/CustomLoggingService.html":{}}}],["src/shared/logger/logger.service.ts:138",{"_index":595,"title":{},"body":{"injectables/CustomLoggingService.html":{}}}],["src/shared/logger/logger.service.ts:20",{"_index":576,"title":{},"body":{"injectables/CustomLoggingService.html":{}}}],["src/shared/logger/logger.service.ts:28",{"_index":571,"title":{},"body":{"injectables/CustomLoggingService.html":{}}}],["src/shared/logger/logger.service.ts:34",{"_index":549,"title":{},"body":{"injectables/CustomLoggingService.html":{}}}],["src/shared/logger/logger.service.ts:42",{"_index":557,"title":{},"body":{"injectables/CustomLoggingService.html":{}}}],["src/shared/logger/logger.service.ts:53",{"_index":552,"title":{},"body":{"injectables/CustomLoggingService.html":{}}}],["src/shared/logger/logger.service.ts:62",{"_index":555,"title":{},"body":{"injectables/CustomLoggingService.html":{}}}],["src/shared/logger/logger.service.ts:81",{"_index":572,"title":{},"body":{"injectables/CustomLoggingService.html":{}}}],["src/shared/logger/logger.service.ts:88",{"_index":593,"title":{},"body":{"injectables/CustomLoggingService.html":{}}}],["src/shared/middleware/request",{"_index":711,"title":{},"body":{"injectables/LoggingMiddleware.html":{},"coverage.html":{}}}],["src/shared/shared.module.ts",{"_index":851,"title":{},"body":{"modules/SharedModule.html":{}}}],["src/shared/shared.module.ts:20",{"_index":855,"title":{},"body":{"modules/SharedModule.html":{}}}],["src/types/custom",{"_index":774,"title":{},"body":{"classes/Reservation.html":{}}}],["stack",{"_index":74,"title":{},"body":{"modules/AppModule.html":{},"classes/GlobalExceptionFilter.html":{}}}],["standardized",{"_index":991,"title":{},"body":{"index.html":{}}}],["start",{"_index":647,"title":{},"body":{"injectables/CustomLoggingService.html":{},"injectables/RequestLoggingInterceptor.html":{},"index.html":{}}}],["start:dev",{"_index":981,"title":{},"body":{"index.html":{}}}],["start:prodopen",{"_index":983,"title":{},"body":{"index.html":{}}}],["started",{"_index":938,"title":{"index.html":{}},"body":{}}],["starttimestamp",{"_index":466,"title":{},"body":{"injectables/ContextService.html":{},"miscellaneous/variables.html":{}}}],["statements",{"_index":894,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":539,"title":{},"body":{"injectables/CustomLoggingService.html":{}}}],["status",{"_index":97,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/CustomError.html":{},"injectables/CustomLoggingService.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/RequestLoggingInterceptor.html":{},"controllers/ReservationController.html":{},"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["statuscode",{"_index":690,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["string",{"_index":98,"title":{},"body":{"injectables/AppService.html":{},"injectables/AppwriteService.html":{},"injectables/AuthService.html":{},"injectables/ConfigService.html":{},"classes/CreateReservationDto.html":{},"classes/CustomError.html":{},"injectables/CustomLoggingService.html":{},"classes/RegisterUserDto.html":{},"classes/Reservation.html":{},"injectables/ReservationRepository.html":{},"injectables/ReservationService.html":{},"interfaces/envConfig.html":{}}}],["string})@isemail",{"_index":728,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["string})@isnotempty()@isdatestring",{"_index":478,"title":{},"body":{"classes/CreateReservationDto.html":{}}}],["string})@isnotempty()@matches(/^([01]\\d|2[0",{"_index":488,"title":{},"body":{"classes/CreateReservationDto.html":{}}}],["string})@isstring",{"_index":732,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["substring(2",{"_index":633,"title":{},"body":{"injectables/CustomLoggingService.html":{}}}],["successfully",{"_index":350,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ReservationController.html":{}}}],["summary",{"_index":382,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ReservationController.html":{},"controllers/UserController.html":{}}}],["super(message",{"_index":536,"title":{},"body":{"classes/CustomError.html":{}}}],["support",{"_index":995,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":996,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":989,"title":{},"body":{"index.html":{}}}],["t",{"_index":156,"title":{},"body":{"injectables/AppwriteService.html":{},"injectables/ContextService.html":{}}}],["table",{"_index":506,"title":{},"body":{"classes/CreateReservationDto.html":{},"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":906,"title":{},"body":{"coverage.html":{}}}],["tap",{"_index":747,"title":{},"body":{"injectables/RequestLoggingInterceptor.html":{}}}],["tap((data",{"_index":752,"title":{},"body":{"injectables/RequestLoggingInterceptor.html":{}}}],["test@gmail.com",{"_index":727,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["this.$id",{"_index":787,"title":{},"body":{"classes/Reservation.html":{}}}],["this.account",{"_index":200,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["this.adminclient",{"_index":199,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["this.adminclient.setendpoint(appwrite_endpoint).setproject(appwrite_project_id).setkey(appwrite_api_key",{"_index":205,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["this.appservice.getserverhealth",{"_index":25,"title":{},"body":{"controllers/AppController.html":{}}}],["this.appwriteservice.createanonymoussession",{"_index":417,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.appwriteservice.getalluserreservations(userid",{"_index":837,"title":{},"body":{"injectables/ReservationRepository.html":{}}}],["this.appwriteservice.getuserfromsessionsecret(token",{"_index":326,"title":{},"body":{"injectables/AppwriteSessionGuard.html":{}}}],["this.appwriteservice.savedocument('reservations",{"_index":839,"title":{},"body":{"injectables/ReservationRepository.html":{}}}],["this.appwriteservice.updateuser(userid",{"_index":418,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.authservice.login",{"_index":386,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.register(user.$id",{"_index":402,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.clsservice.get('metadata",{"_index":636,"title":{},"body":{"injectables/CustomLoggingService.html":{}}}],["this.clsservice.get('reqid",{"_index":621,"title":{},"body":{"injectables/CustomLoggingService.html":{}}}],["this.clsservice.get('starttimestamp')}msec",{"_index":753,"title":{},"body":{"injectables/RequestLoggingInterceptor.html":{}}}],["this.clsservice.get(key",{"_index":468,"title":{},"body":{"injectables/ContextService.html":{}}}],["this.clsservice.set('metadata",{"_index":640,"title":{},"body":{"injectables/CustomLoggingService.html":{}}}],["this.clsservice.set('reqid",{"_index":724,"title":{},"body":{"injectables/LoggingMiddleware.html":{}}}],["this.clsservice.set('starttimestamp",{"_index":722,"title":{},"body":{"injectables/LoggingMiddleware.html":{}}}],["this.clsservice.set(key",{"_index":469,"title":{},"body":{"injectables/ContextService.html":{}}}],["this.configservice.appwriteconfig",{"_index":187,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["this.configservice.db.databaseid",{"_index":210,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["this.configservice.env.isdevortest",{"_index":682,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["this.contextservice.get('starttimestamp')}msec",{"_index":685,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["this.contextservice.set('sessionsecret",{"_index":332,"title":{},"body":{"injectables/AppwriteSessionGuard.html":{}}}],["this.contextservice.set('user",{"_index":333,"title":{},"body":{"injectables/AppwriteSessionGuard.html":{}}}],["this.createcollection(collectionname",{"_index":222,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["this.createdatabase",{"_index":214,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["this.database",{"_index":215,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["this.databaseid",{"_index":209,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["this.databases",{"_index":207,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["this.databases.create(id.unique",{"_index":228,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["this.databases.createcollection",{"_index":233,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["this.databases.createdatetimeattribute(this.databaseid",{"_index":247,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["this.databases.createdocument(this.databaseid",{"_index":285,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["this.databases.createintegerattribute",{"_index":250,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["this.databases.createstringattribute",{"_index":255,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["this.databases.createstringattribute(this.databaseid",{"_index":240,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["this.databases.get(this.databaseid",{"_index":216,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["this.databases.listcollections(this.databaseid",{"_index":218,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["this.databases.listdocuments(this.databaseid",{"_index":287,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["this.date",{"_index":777,"title":{},"body":{"classes/Reservation.html":{}}}],["this.datetime",{"_index":789,"title":{},"body":{"classes/Reservation.html":{}}}],["this.logger.debug",{"_index":623,"title":{},"body":{"injectables/CustomLoggingService.html":{}}}],["this.logger.error",{"_index":626,"title":{},"body":{"injectables/CustomLoggingService.html":{}}}],["this.logger.error(`not",{"_index":692,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["this.logger.error(error",{"_index":336,"title":{},"body":{"injectables/AppwriteSessionGuard.html":{}}}],["this.logger.error(error.message",{"_index":665,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["this.logger.error(exception.message",{"_index":697,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["this.logger.log",{"_index":620,"title":{},"body":{"injectables/CustomLoggingService.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/RequestLoggingInterceptor.html":{}}}],["this.logger.log('successfully",{"_index":394,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ReservationController.html":{}}}],["this.logger.log(`${request.method",{"_index":750,"title":{},"body":{"injectables/RequestLoggingInterceptor.html":{}}}],["this.numberofguests",{"_index":781,"title":{},"body":{"classes/Reservation.html":{}}}],["this.reflector.getallandoverride('onlyregistereduser",{"_index":321,"title":{},"body":{"injectables/AppwriteSessionGuard.html":{}}}],["this.requiredcollectionsmap",{"_index":219,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["this.requiredcollectionsmap['reservations'].id",{"_index":288,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["this.requiredcollectionsmap[collection].id",{"_index":286,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["this.requiredcollectionsmap[collectionname",{"_index":259,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["this.requiredcollectionsmap[collectionname].id",{"_index":225,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["this.reservationrepository.create(reservation",{"_index":847,"title":{},"body":{"injectables/ReservationService.html":{}}}],["this.reservationrepository.getalluserreservations(userid",{"_index":846,"title":{},"body":{"injectables/ReservationService.html":{}}}],["this.reservationservice.create(userid",{"_index":816,"title":{},"body":{"controllers/ReservationController.html":{}}}],["this.reservationservice.getalluserreservations(userid",{"_index":822,"title":{},"body":{"controllers/ReservationController.html":{}}}],["this.source",{"_index":618,"title":{},"body":{"injectables/CustomLoggingService.html":{}}}],["this.source?.constructor?.name",{"_index":619,"title":{},"body":{"injectables/CustomLoggingService.html":{}}}],["this.specialrequests",{"_index":783,"title":{},"body":{"classes/Reservation.html":{}}}],["this.time",{"_index":779,"title":{},"body":{"classes/Reservation.html":{}}}],["this.userid",{"_index":785,"title":{},"body":{"classes/Reservation.html":{}}}],["throw",{"_index":188,"title":{},"body":{"injectables/AppwriteService.html":{},"injectables/AppwriteSessionGuard.html":{}}}],["time",{"_index":245,"title":{},"body":{"injectables/AppwriteService.html":{},"classes/CreateReservationDto.html":{},"classes/Reservation.html":{},"controllers/ReservationController.html":{}}}],["timeattributeresponse",{"_index":244,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["timestamp",{"_index":578,"title":{},"body":{"injectables/CustomLoggingService.html":{}}}],["token",{"_index":319,"title":{},"body":{"injectables/AppwriteSessionGuard.html":{}}}],["toresponsedto",{"_index":759,"title":{},"body":{"classes/Reservation.html":{}}}],["tostring(36",{"_index":632,"title":{},"body":{"injectables/CustomLoggingService.html":{}}}],["trace",{"_index":554,"title":{},"body":{"injectables/CustomLoggingService.html":{}}}],["transformer",{"_index":912,"title":{},"body":{"dependencies.html":{}}}],["transports",{"_index":66,"title":{},"body":{"modules/AppModule.html":{}}}],["tree",{"_index":972,"title":{},"body":{"index.html":{}}}],["true",{"_index":75,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppwriteService.html":{},"injectables/AppwriteSessionGuard.html":{},"controllers/AuthController.html":{},"classes/CreateReservationDto.html":{},"controllers/ReservationController.html":{},"miscellaneous/variables.html":{}}}],["true})@get('/reservations",{"_index":805,"title":{},"body":{"controllers/ReservationController.html":{}}}],["true})@isoptional",{"_index":485,"title":{},"body":{"classes/CreateReservationDto.html":{}}}],["true})@post('/reservation",{"_index":800,"title":{},"body":{"controllers/ReservationController.html":{}}}],["try",{"_index":325,"title":{},"body":{"injectables/AppwriteSessionGuard.html":{}}}],["type",{"_index":136,"title":{},"body":{"injectables/AppwriteService.html":{},"injectables/AppwriteSessionGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ContextService.html":{},"classes/CreateReservationDto.html":{},"classes/CustomError.html":{},"injectables/CustomLoggingService.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/LoggingMiddleware.html":{},"classes/RegisterUserDto.html":{},"injectables/RequestLoggingInterceptor.html":{},"classes/Reservation.html":{},"controllers/ReservationController.html":{},"injectables/ReservationRepository.html":{},"injectables/ReservationService.html":{},"modules/SharedModule.html":{},"coverage.html":{},"interfaces/envConfig.html":{},"miscellaneous/variables.html":{}}}],["typeof",{"_index":284,"title":{},"body":{"injectables/AppwriteService.html":{},"injectables/ContextService.html":{},"injectables/CustomLoggingService.html":{}}}],["types",{"_index":870,"title":{},"body":{"classes/UpdateReservationDto.html":{},"dependencies.html":{}}}],["unauthorized",{"_index":397,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ReservationController.html":{},"controllers/UserController.html":{}}}],["unauthorized'})@apiresponse({status",{"_index":366,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ReservationController.html":{},"controllers/UserController.html":{}}}],["uncaught",{"_index":667,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["undefined",{"_index":483,"title":{},"body":{"classes/CreateReservationDto.html":{},"classes/GlobalExceptionFilter.html":{}}}],["unknown",{"_index":139,"title":{},"body":{"injectables/AppwriteService.html":{},"injectables/AppwriteSessionGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CustomError.html":{},"injectables/CustomLoggingService.html":{},"classes/GlobalExceptionFilter.html":{},"controllers/ReservationController.html":{},"injectables/ReservationRepository.html":{},"miscellaneous/variables.html":{}}}],["unknown_error",{"_index":526,"title":{},"body":{"classes/CustomError.html":{},"miscellaneous/variables.html":{}}}],["unlicensed",{"_index":1003,"title":{},"body":{"properties.html":{}}}],["up",{"_index":103,"title":{},"body":{"injectables/AppService.html":{},"injectables/AppwriteService.html":{}}}],["updatedat",{"_index":758,"title":{},"body":{"classes/Reservation.html":{}}}],["updatereservationdto",{"_index":865,"title":{"classes/UpdateReservationDto.html":{}},"body":{"classes/UpdateReservationDto.html":{},"coverage.html":{}}}],["updateuser",{"_index":129,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["updateuser(userid",{"_index":158,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["upgrades",{"_index":359,"title":{},"body":{"controllers/AuthController.html":{}}}],["use",{"_index":713,"title":{},"body":{"injectables/LoggingMiddleware.html":{},"index.html":{}}}],["use(req",{"_index":715,"title":{},"body":{"injectables/LoggingMiddleware.html":{}}}],["used",{"_index":965,"title":{},"body":{"index.html":{}}}],["useguards",{"_index":303,"title":{},"body":{"injectables/AppwriteSessionGuard.html":{}}}],["useguards(appwritesessionguard",{"_index":316,"title":{},"body":{"injectables/AppwriteSessionGuard.html":{},"miscellaneous/variables.html":{}}}],["user",{"_index":271,"title":{},"body":{"injectables/AppwriteService.html":{},"injectables/AppwriteSessionGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ContextService.html":{},"classes/Reservation.html":{},"controllers/ReservationController.html":{},"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["user.controller",{"_index":889,"title":{},"body":{"modules/UserModule.html":{}}}],["user.dto",{"_index":380,"title":{},"body":{"controllers/AuthController.html":{}}}],["user.dto.ts",{"_index":726,"title":{},"body":{"classes/RegisterUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:11",{"_index":735,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["user.dto.ts:15",{"_index":733,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["user.dto.ts:7",{"_index":729,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["user.email",{"_index":327,"title":{},"body":{"injectables/AppwriteSessionGuard.html":{}}}],["user.get(userid",{"_index":273,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["user.service",{"_index":881,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["user.updateemail(userid",{"_index":279,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["user.updatename(userid",{"_index":276,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["user.updatepassword(userid",{"_index":282,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["user['$id",{"_index":776,"title":{},"body":{"classes/Reservation.html":{}}}],["usercontroller",{"_index":871,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userid",{"_index":146,"title":{},"body":{"injectables/AppwriteService.html":{},"injectables/AuthService.html":{},"classes/Reservation.html":{},"controllers/ReservationController.html":{},"injectables/ReservationRepository.html":{},"injectables/ReservationService.html":{}}}],["useridattributeresponse",{"_index":253,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["usermodule",{"_index":43,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["users",{"_index":178,"title":{},"body":{"injectables/AppwriteService.html":{},"injectables/AppwriteSessionGuard.html":{},"controllers/ReservationController.html":{},"index.html":{}}}],["users(this.adminclient",{"_index":272,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["userservice",{"_index":880,"title":{"injectables/UserService.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["using",{"_index":988,"title":{},"body":{"index.html":{}}}],["validation",{"_index":534,"title":{},"body":{"classes/CustomError.html":{},"classes/GlobalExceptionFilter.html":{},"miscellaneous/variables.html":{}}}],["validation_error",{"_index":532,"title":{},"body":{"classes/CustomError.html":{},"miscellaneous/variables.html":{}}}],["validator",{"_index":502,"title":{},"body":{"classes/CreateReservationDto.html":{},"classes/RegisterUserDto.html":{},"dependencies.html":{}}}],["value",{"_index":170,"title":{},"body":{"injectables/AppwriteService.html":{},"injectables/ContextService.html":{},"injectables/CustomLoggingService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":903,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":971,"title":{"miscellaneous/variables.html":{}},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["verbose",{"_index":568,"title":{},"body":{"injectables/CustomLoggingService.html":{}}}],["version",{"_index":96,"title":{},"body":{"injectables/AppService.html":{},"properties.html":{}}}],["void",{"_index":463,"title":{},"body":{"injectables/ContextService.html":{},"injectables/CustomLoggingService.html":{},"injectables/LoggingMiddleware.html":{},"modules/SharedModule.html":{}}}],["warn",{"_index":561,"title":{},"body":{"injectables/CustomLoggingService.html":{}}}],["watch",{"_index":979,"title":{},"body":{"index.html":{}}}],["white",{"_index":611,"title":{},"body":{"injectables/CustomLoggingService.html":{},"miscellaneous/enumerations.html":{}}}],["winston",{"_index":61,"title":{},"body":{"modules/AppModule.html":{},"injectables/CustomLoggingService.html":{},"modules/SharedModule.html":{},"dependencies.html":{}}}],["winston.format.combine",{"_index":72,"title":{},"body":{"modules/AppModule.html":{}}}],["winston.format.errors",{"_index":73,"title":{},"body":{"modules/AppModule.html":{}}}],["winston.format.label",{"_index":76,"title":{},"body":{"modules/AppModule.html":{}}}],["winston.format.splat",{"_index":84,"title":{},"body":{"modules/AppModule.html":{}}}],["winston.format.timestamp",{"_index":79,"title":{},"body":{"modules/AppModule.html":{}}}],["winston.logger",{"_index":547,"title":{},"body":{"injectables/CustomLoggingService.html":{}}}],["winston.transports.console",{"_index":68,"title":{},"body":{"modules/AppModule.html":{}}}],["winston_module_nest_provider",{"_index":599,"title":{},"body":{"injectables/CustomLoggingService.html":{}}}],["winstonmodule",{"_index":59,"title":{},"body":{"modules/AppModule.html":{},"modules/SharedModule.html":{}}}],["winstonmodule.forroot",{"_index":65,"title":{},"body":{"modules/AppModule.html":{}}}],["x1b[30m",{"_index":603,"title":{},"body":{"injectables/CustomLoggingService.html":{}}}],["x1b[31m",{"_index":604,"title":{},"body":{"injectables/CustomLoggingService.html":{}}}],["x1b[32m",{"_index":605,"title":{},"body":{"injectables/CustomLoggingService.html":{}}}],["x1b[33m",{"_index":606,"title":{},"body":{"injectables/CustomLoggingService.html":{}}}],["x1b[34m",{"_index":607,"title":{},"body":{"injectables/CustomLoggingService.html":{}}}],["x1b[35m",{"_index":608,"title":{},"body":{"injectables/CustomLoggingService.html":{}}}],["x1b[36m",{"_index":610,"title":{},"body":{"injectables/CustomLoggingService.html":{}}}],["x1b[37m",{"_index":612,"title":{},"body":{"injectables/CustomLoggingService.html":{}}}],["yellow",{"_index":563,"title":{},"body":{"injectables/CustomLoggingService.html":{},"miscellaneous/enumerations.html":{}}}],["yes",{"_index":518,"title":{},"body":{"classes/CustomError.html":{},"injectables/CustomLoggingService.html":{}}}],["yyyy",{"_index":80,"title":{},"body":{"modules/AppModule.html":{}}}],["zoom",{"_index":44,"title":{},"body":{"modules/AppModule.html":{},"modules/AppwriteModule.html":{},"modules/AuthModule.html":{},"modules/ReservationModule.html":{},"modules/SharedModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                health\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        health\n                        \n                    \n                \n            \n            \n                \n                        \n                    health()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/health')\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:9\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get('/health')\n  health() {\n    return this.appService.getServerHealth();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nReservationModule\n\nReservationModule\n\nAppModule -->\n\nReservationModule->AppModule\n\n\n\n\n\nSharedModule\n\nSharedModule\n\nAppModule -->\n\nSharedModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            AuthModule\n                        \n                        \n                            ReservationModule\n                        \n                        \n                            SharedModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { SharedModule } from './shared/shared.module';\nimport { ConfigModule } from '@nestjs/config';\nimport { AuthModule } from './auth/auth.module';\nimport { ClsModule } from 'nestjs-cls';\nimport { UserModule } from './resources/user/user.module';\nimport { ReservationModule } from './resources/reservation/reservation.module';\nimport { WinstonModule } from 'nest-winston';\nimport * as winston from 'winston';\nimport { CustomLoggingService } from './shared/logger/logger.service';\n@Module({\n  imports: [\n    SharedModule,\n    AuthModule,\n    ConfigModule.forRoot(),\n    AuthModule,\n    WinstonModule.forRoot({\n      transports: [\n        new winston.transports.Console({\n          level: CustomLoggingService.getLoggingLevel(),\n          format: winston.format.combine(\n            winston.format.errors({ stack: true }),\n            // winston.format.label({ label: context }),\n            winston.format.timestamp({ format: 'YYYY-MM-DD HH:mm:ss.SSS' }),\n            winston.format.splat(),\n            CustomLoggingService.myFormat,\n          ),\n        }),\n      ],\n    }),\n    ClsModule.forRoot({\n      global: true,\n      middleware: { mount: true },\n    }),\n    UserModule,\n    ReservationModule,\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getServerHealth\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getServerHealth\n                        \n                    \n                \n            \n            \n                \ngetServerHealth()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     { name: any; version: any; status: string; }\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport * as packageJson from '../package.json';\n@Injectable()\nexport class AppService {\n  getServerHealth() {\n    return { name: packageJson.name, version: packageJson.version, status: 'UP' };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppwriteModule.html":{"url":"modules/AppwriteModule.html","title":"module - AppwriteModule","body":"\n                   \n\n\n\n\n    Modules\n    AppwriteModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppwriteModule\n\n\n\ncluster_AppwriteModule_exports\n\n\n\ncluster_AppwriteModule_providers\n\n\n\n\nAppwriteService \n\nAppwriteService \n\n\n\nAppwriteModule\n\nAppwriteModule\n\nAppwriteService  -->\n\nAppwriteModule->AppwriteService \n\n\n\n\n\nAppwriteService\n\nAppwriteService\n\nAppwriteModule -->\n\nAppwriteService->AppwriteModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/integrations/appwrite/appwrite.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppwriteService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AppwriteService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppwriteService } from './appwrite.service';\n\n@Module({\n  controllers: [],\n  providers: [AppwriteService],\n  exports: [AppwriteService],\n})\nexport class AppwriteModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppwriteService.html":{"url":"injectables/AppwriteService.html","title":"injectable - AppwriteService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppwriteService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/integrations/appwrite/appwrite.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                account\n                            \n                            \n                                    Private\n                                adminClient\n                            \n                            \n                                    Private\n                                database\n                            \n                            \n                                    Private\n                                databaseId\n                            \n                            \n                                    Private\n                                databases\n                            \n                            \n                                    Private\n                                requiredCollectionsMap\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createAnonymousSession\n                            \n                            \n                                    Async\n                                createCollection\n                            \n                            \n                                    Async\n                                createDatabase\n                            \n                            \n                                    Async\n                                getAllUserReservations\n                            \n                            \n                                    Async\n                                getUserFromSessionSecret\n                            \n                            \n                                    Async\n                                onModuleInit\n                            \n                            \n                                    Async\n                                saveDocument\n                            \n                            \n                                    Async\n                                updateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, contextService: ContextService)\n                    \n                \n                        \n                            \n                                Defined in src/integrations/appwrite/appwrite.service.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                        ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        contextService\n                                                  \n                                                        \n                                                                        ContextService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createAnonymousSession\n                        \n                    \n                \n            \n            \n                \n                        \n                    createAnonymousSession()\n                \n            \n\n\n                    \n                        \n                            Defined in src/integrations/appwrite/appwrite.service.ts:112\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createCollection\n                        \n                    \n                \n            \n            \n                \n                        \n                    createCollection(collectionName: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/integrations/appwrite/appwrite.service.ts:73\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                collectionName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createDatabase\n                        \n                    \n                \n            \n            \n                \n                        \n                    createDatabase()\n                \n            \n\n\n                    \n                        \n                            Defined in src/integrations/appwrite/appwrite.service.ts:67\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getAllUserReservations\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllUserReservations(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/integrations/appwrite/appwrite.service.ts:151\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getUserFromSessionSecret\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserFromSessionSecret(secret: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/integrations/appwrite/appwrite.service.ts:119\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                secret\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/integrations/appwrite/appwrite.service.ts:39\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        saveDocument\n                        \n                    \n                \n            \n            \n                \n                        \n                    saveDocument(collection, document: Reservation)\n                \n            \n\n\n                    \n                        \n                            Defined in src/integrations/appwrite/appwrite.service.ts:141\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                collection\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                document\n                                            \n                                                            Reservation\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateUser(userId: string, data: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/integrations/appwrite/appwrite.service.ts:130\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                data\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        account\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Account\n\n                    \n                \n                    \n                        \n                                Defined in src/integrations/appwrite/appwrite.service.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        adminClient\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Client\n\n                    \n                \n                    \n                        \n                                Defined in src/integrations/appwrite/appwrite.service.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        database\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Models.Database\n\n                    \n                \n                    \n                        \n                                Defined in src/integrations/appwrite/appwrite.service.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        databaseId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/integrations/appwrite/appwrite.service.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        databases\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Databases\n\n                    \n                \n                    \n                        \n                                Defined in src/integrations/appwrite/appwrite.service.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        requiredCollectionsMap\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Default value : {\n    reservations: { id: '' },\n  }\n                    \n                \n                    \n                        \n                                Defined in src/integrations/appwrite/appwrite.service.ts:16\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, OnModuleInit } from '@nestjs/common';\nimport { Account, Client, Databases, ID, Models, Permission, Query, Role, Users } from 'node-appwrite';\nimport { Reservation } from 'src/resources/reservation/entities/reservation.entity';\nimport { ConfigService } from 'src/shared/config/config.service';\nimport { ContextService } from 'src/shared/context/context.service';\n\n@Injectable()\nexport class AppwriteService implements OnModuleInit {\n  private adminClient: Client;\n  private account: Account;\n\n  private databaseId: string;\n  private databases: Databases;\n  private database: Models.Database;\n\n  private requiredCollectionsMap: { [name: string]: { id: string } } = {\n    reservations: { id: '' },\n  };\n\n  constructor(\n    private readonly configService: ConfigService,\n    private readonly contextService: ContextService,\n  ) {\n    const appwriteConfig = this.configService.appwriteConfig;\n    if (!appwriteConfig) {\n      throw new Error('Appwrite configuration is missing');\n    } else if (!appwriteConfig.APPWRITE_ENDPOINT) {\n      throw new Error('Appwrite endpoint is missing');\n    } else if (!appwriteConfig.APPWRITE_PROJECT_ID) {\n      throw new Error('Appwrite project ID is missing');\n    } else if (!appwriteConfig.APPWRITE_API_KEY) {\n      throw new Error('Appwrite API key is missing');\n    }\n\n    this.adminClient = new Client();\n    this.account = new Account(this.adminClient);\n  }\n\n  async onModuleInit() {\n    const { APPWRITE_ENDPOINT, APPWRITE_API_KEY, APPWRITE_PROJECT_ID } = this.configService.appwriteConfig;\n\n    this.adminClient = this.adminClient.setEndpoint(APPWRITE_ENDPOINT).setProject(APPWRITE_PROJECT_ID).setKey(APPWRITE_API_KEY);\n\n    //Set up the database\n    this.databases = new Databases(this.adminClient);\n    this.databaseId = this.configService.db.databaseId;\n    if (!this.databaseId) {\n      console.log('DatabaseId missing');\n      console.log('Creating database');\n      await this.createDatabase();\n    }\n\n    this.database = await this.databases.get(this.databaseId);\n\n    const collections = await this.databases.listCollections(this.databaseId);\n    for (const collectionName in this.requiredCollectionsMap) {\n      const collection = collections.collections.find((c) => c.name === collectionName);\n      if (!collection) {\n        await this.createCollection(collectionName);\n        console.log(`Collection ${collectionName} created`);\n      } else {\n        this.requiredCollectionsMap[collectionName].id = collections.collections.find((c) => c.name === collectionName).$id;\n      }\n    }\n  }\n\n  async createDatabase() {\n    const response = await this.databases.create(ID.unique(), 'Default');\n    this.databaseId = response.$id;\n    console.log('Database created with ID: ', this.databaseId);\n  }\n\n  async createCollection(collectionName: string) {\n    let createCollectionResponse: Models.Collection;\n    if (collectionName == 'reservations') {\n      createCollectionResponse = await this.databases.createCollection(\n        this.databaseId, // ID of the collection\n        ID.unique(), // Collection ID\n        collectionName, // Collection Name\n        [Permission.read(Role.any()), Permission.create(Role.users()), Permission.update(Role.users()), Permission.delete(Role.users())],\n      );\n\n      const dateAttributeResponse = await this.databases.createStringAttribute(this.databaseId, createCollectionResponse.$id, 'date', 255, true);\n\n      const timeAttributeResponse = await this.databases.createStringAttribute(this.databaseId, createCollectionResponse.$id, 'time', 255, true);\n\n      const datetimeAttributeResponse = await this.databases.createDatetimeAttribute(this.databaseId, createCollectionResponse.$id, 'datetime', true);\n\n      const numberOfGuestsAttributeResponse = await this.databases.createIntegerAttribute(\n        this.databaseId,\n        createCollectionResponse.$id,\n        'numberOfGuests',\n        true,\n        1,\n      );\n\n      const userIdAttributeResponse = await this.databases.createStringAttribute(this.databaseId, createCollectionResponse.$id, 'userId', 255, true);\n\n      const specialRequestsAttributeResponse = await this.databases.createStringAttribute(\n        this.databaseId,\n        createCollectionResponse.$id,\n        'specialRequests',\n        255,\n        false,\n        null,\n        true,\n      );\n    }\n    this.requiredCollectionsMap[collectionName] = { id: createCollectionResponse.$id };\n  }\n\n  public async createAnonymousSession() {\n    const account = new Account(this.adminClient);\n\n    const anonymousSession = await account.createAnonymousSession();\n    return anonymousSession;\n  }\n\n  async getUserFromSessionSecret(secret: string) {\n    const sessionClient = new Client()\n      .setEndpoint(this.configService.appwriteConfig.APPWRITE_ENDPOINT)\n      .setProject(this.configService.appwriteConfig.APPWRITE_PROJECT_ID);\n\n    sessionClient.setSession(secret);\n    const account = new Account(sessionClient);\n    const currentUser = await account.get();\n    return currentUser;\n  }\n\n  async updateUser(userId: string, data: { email: string; password: string; name: string }) {\n    const user = new Users(this.adminClient);\n\n    const currentUser = await user.get(userId);\n\n    currentUser.name != data.name && (await user.updateName(userId, data.name));\n    currentUser.email != data.email && (await user.updateEmail(userId, data.email));\n    currentUser.password != data.password && (await user.updatePassword(userId, data.password));\n    return await user.get(userId);\n  }\n\n  async saveDocument(collection: keyof typeof this.requiredCollectionsMap, document: Reservation): Promise {\n    const response = await this.databases.createDocument(this.databaseId, this.requiredCollectionsMap[collection].id, ID.unique(), document, [\n      Permission.read(Role.any()),\n      Permission.update(Role.users()),\n      Permission.delete(Role.users()),\n    ]);\n\n    return response as T;\n  }\n\n  async getAllUserReservations(userId: string): Promise {\n    const reservations = await this.databases.listDocuments(this.databaseId, this.requiredCollectionsMap['reservations'].id, [\n      Query.equal('userId', userId),\n    ]);\n    return reservations.documents as Reservation[];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppwriteSessionGuard.html":{"url":"injectables/AppwriteSessionGuard.html","title":"injectable - AppwriteSessionGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppwriteSessionGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/guards/session.guard.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector, appwriteService: AppwriteService, contextService: ContextService, logger: CustomLoggingService)\n                    \n                \n                        \n                            \n                                Defined in src/shared/guards/session.guard.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        appwriteService\n                                                  \n                                                        \n                                                                        AppwriteService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        contextService\n                                                  \n                                                        \n                                                                        ContextService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                        CustomLoggingService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/shared/guards/session.guard.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { applyDecorators, ExecutionContext, Injectable, SetMetadata, UseGuards } from '@nestjs/common';\nimport { Request } from 'express';\nimport { AppwriteService } from 'src/integrations/appwrite/appwrite.service';\nimport { ContextService } from '../context/context.service';\nimport { Reflector } from '@nestjs/core';\nimport { CustomLoggingService } from '../logger/logger.service';\n\nexport const SessionGuard = (options?: { onlyRegisteredUser: boolean }) => {\n  if (options?.onlyRegisteredUser) {\n    return applyDecorators(SetMetadata('onlyRegisteredUser', true), UseGuards(AppwriteSessionGuard));\n  }\n  return applyDecorators(UseGuards(AppwriteSessionGuard));\n};\n\n@Injectable()\nexport class AppwriteSessionGuard {\n  constructor(\n    private reflector: Reflector,\n    private appwriteService: AppwriteService,\n    private contextService: ContextService,\n    private logger: CustomLoggingService,\n  ) {}\n\n  async canActivate(context: ExecutionContext) {\n    const request: Request = context.switchToHttp().getRequest();\n    const token = request.cookies['auth_token'];\n    const onlyRegisteredUser = this.reflector.getAllAndOverride('onlyRegisteredUser', [context.getHandler(), context.getClass()]);\n\n    if (!token) {\n      throw new Error('Unauthorized');\n    }\n\n    try {\n      const user = await this.appwriteService.getUserFromSessionSecret(token);\n      if (!user) {\n        throw new Error('Unauthorized');\n      }\n\n      if (onlyRegisteredUser && !user.email) {\n        throw new Error('Unauthorized - this action is only available for registered users');\n      }\n\n      request.user = user;\n\n      this.contextService.set('sessionSecret', token);\n      this.contextService.set('user', user);\n      return true;\n    } catch (error) {\n      this.logger.error(error);\n      if (error.message.startsWith('Unauthorized')) throw error;\n      throw new Error('Unauthorized');\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                login\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(response: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Login user and creates an anonymous session', description: 'Login user and creates an anonymous session'})@ApiResponse({status: 201, description: 'Successfully created anonymous session'})@ApiResponse({status: 500, description: 'Internal server error'})@Post('/login')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                response\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                        \n                    register(request: Request, body: RegisterUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Register user', description: 'Upgrades anonymous session with real user data'})@ApiResponse({status: 201, description: 'Successfully created anonymous session'})@ApiResponse({status: 400, description: 'Invalid payload'})@ApiResponse({status: 401, description: 'Unauthorized'})@ApiResponse({status: 500, description: 'Internal server error'})@ApiCookieAuth('auth_token')@SessionGuard()@Post('/register')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:38\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                request\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            RegisterUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post, Req, Res } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { Request, Response } from 'express';\nimport { SessionGuard } from '../shared/guards/session.guard';\nimport { ApiCookieAuth, ApiOperation, ApiResponse } from '@nestjs/swagger';\nimport { RegisterUserDto } from './dto/register-user.dto';\nimport { CustomLoggingService } from 'src/shared/logger/logger.service';\n@Controller()\nexport class AuthController {\n  constructor(\n    private readonly authService: AuthService,\n    private readonly logger: CustomLoggingService,\n  ) {}\n\n  @ApiOperation({ summary: 'Login user and creates an anonymous session', description: 'Login user and creates an anonymous session' })\n  @ApiResponse({ status: 201, description: 'Successfully created anonymous session' })\n  @ApiResponse({ status: 500, description: 'Internal server error' })\n  @Post('/login')\n  async login(@Res({ passthrough: true }) response: Response) {\n    const session = await this.authService.login();\n    response.cookie('auth_token', session.secret, {\n      httpOnly: true,\n      sameSite: 'none',\n      expires: new Date(session.expire),\n    });\n    this.logger.log('Successfully created anonymous session ✅');\n    return { status: 201, message: 'Successfully created anonymous session' };\n  }\n\n  @ApiOperation({ summary: 'Register user', description: 'Upgrades anonymous session with real user data' })\n  @ApiResponse({ status: 201, description: 'Successfully created anonymous session' })\n  @ApiResponse({ status: 400, description: 'Invalid payload' })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  @ApiResponse({ status: 500, description: 'Internal server error' })\n  @ApiCookieAuth('auth_token')\n  @SessionGuard()\n  @Post('/register')\n  async register(@Req() request: Request, @Body() body: RegisterUserDto) {\n    const user = request.user;\n    const registeredUser = await this.authService.register(user.$id, body);\n    this.logger.log('Successfully registered user ✅');\n    return { status: 201, message: 'Successfully registered user', user: { name: registeredUser.name, email: registeredUser.email } };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_imports\n\n\n\n\nAppwriteModule\n\nAppwriteModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nAppwriteModule->AuthModule\n\n\n\n\n\nAppwriteSessionGuard\n\nAppwriteSessionGuard\n\nAuthModule -->\n\nAppwriteSessionGuard->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppwriteSessionGuard\n                        \n                        \n                            AuthService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AppwriteModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { AuthController } from './auth.controller';\nimport { AppwriteModule } from 'src/integrations/appwrite/appwrite.module';\nimport { AppwriteSessionGuard } from '../shared/guards/session.guard';\n\n@Module({\n  imports: [AppwriteModule],\n  controllers: [AuthController],\n  providers: [AuthService, AppwriteSessionGuard],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(appwriteService: AppwriteService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        appwriteService\n                                                  \n                                                        \n                                                                        AppwriteService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:8\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                        \n                    register(userId: string, data: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                data\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AppwriteService } from 'src/integrations/appwrite/appwrite.service';\n\n@Injectable()\nexport class AuthService {\n  constructor(private readonly appwriteService: AppwriteService) {}\n\n  async login() {\n    const session = await this.appwriteService.createAnonymousSession();\n    return session;\n  }\n\n  async register(userId: string, data: { email: string; password: string; name: string }) {\n    const user = await this.appwriteService.updateUser(userId, { email: data.email, password: data.password, name: data.name });\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ConfigService.html":{"url":"injectables/ConfigService.html","title":"injectable - ConfigService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ConfigService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/config/config.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                get\n                            \n                            \n                                getPort\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    env\n                                \n                                \n                                    db\n                                \n                                \n                                    appwriteConfig\n                                \n                                \n                                    globalConfig\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/shared/config/config.service.ts:11\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        get\n                        \n                    \n                \n            \n            \n                \nget(key)\n                \n            \n\n\n                    \n                        \n                            Defined in src/shared/config/config.service.ts:45\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getPort\n                        \n                    \n                \n            \n            \n                \ngetPort()\n                \n            \n\n\n                    \n                        \n                            Defined in src/shared/config/config.service.ts:41\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         number\n\n                        \n                \n            \n        \n    \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        env\n                    \n                \n\n                \n                    \n                        getenv()\n                    \n                \n                            \n                                \n                                    Defined in src/shared/config/config.service.ts:14\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        db\n                    \n                \n\n                \n                    \n                        getdb()\n                    \n                \n                            \n                                \n                                    Defined in src/shared/config/config.service.ts:20\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        appwriteConfig\n                    \n                \n\n                \n                    \n                        getappwriteConfig()\n                    \n                \n                            \n                                \n                                    Defined in src/shared/config/config.service.ts:26\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        globalConfig\n                    \n                \n\n                \n                    \n                        getglobalConfig()\n                    \n                \n                            \n                                \n                                    Defined in src/shared/config/config.service.ts:34\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\ninterface envConfig {\n  PORT: string;\n  APPWRITE_API_KEY: string;\n  APPWRITE_ENDPOINT: string;\n  APPWRITE_PROJECT_ID: string;\n}\n\n@Injectable()\nexport class ConfigService {\n  constructor() {}\n\n  get env() {\n    return {\n      isDevOrTest: process.env.NODE_ENV?.toLowerCase().startsWith('dev') || process.env.NODE_ENV?.toLowerCase().startsWith('test'),\n    };\n  }\n\n  get db() {\n    return {\n      databaseId: process.env.APPWRITE_DATABASE_ID,\n    };\n  }\n\n  get appwriteConfig() {\n    return {\n      APPWRITE_ENDPOINT: process.env.APPWRITE_ENDPOINT || 'https://cloud.appwrite.io/v1',\n      APPWRITE_PROJECT_ID: process.env.APPWRITE_PROJECT_ID,\n      APPWRITE_API_KEY: process.env.APPWRITE_API_KEY,\n    };\n  }\n\n  get globalConfig() {\n    return {\n      host: process.env.APP_HOST || '0.0.0.0',\n      port: +process.env.APP_PORT || 3000,\n    };\n  }\n\n  getPort(): number {\n    return +process.env.PORT || 3000;\n  }\n\n  get(key: keyof envConfig): string {\n    return process.env[key];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ContextService.html":{"url":"injectables/ContextService.html","title":"injectable - ContextService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ContextService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/context/context.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                get\n                            \n                            \n                                set\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(clsService: ClsService)\n                    \n                \n                        \n                            \n                                Defined in src/shared/context/context.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        clsService\n                                                  \n                                                        \n                                                                    ClsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        get\n                        \n                    \n                \n            \n            \n                \nget(key)\n                \n            \n\n\n                    \n                        \n                            Defined in src/shared/context/context.service.ts:14\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     T\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        set\n                        \n                    \n                \n            \n            \n                \nset(key, value: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/shared/context/context.service.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                value\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ClsService } from 'nestjs-cls';\n\nexport const ContextKeys = {\n  sessionSecret: 'sessionSecret',\n  user: 'user',\n  startTimestamp: 'startTimestamp',\n} as const;\n\n@Injectable()\nexport class ContextService {\n  constructor(private readonly clsService: ClsService) {}\n\n  get(key: (typeof ContextKeys)[keyof typeof ContextKeys]): T {\n    return this.clsService.get(key);\n  }\n\n  set(key: (typeof ContextKeys)[keyof typeof ContextKeys], value: any): void {\n    this.clsService.set(key, value);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateReservationDto.html":{"url":"classes/CreateReservationDto.html","title":"class - CreateReservationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateReservationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/resources/reservation/dto/create-reservation.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                date\n                            \n                            \n                                    \n                                    \n                                    \n                                numberOfGuests\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                specialRequests\n                            \n                            \n                                    \n                                    \n                                    \n                                time\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '2024-12-31', type: String})@IsNotEmpty()@IsDateString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/resources/reservation/dto/create-reservation.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        numberOfGuests\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 2, type: Number})@IsInt()@Min(1)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/resources/reservation/dto/create-reservation.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        specialRequests\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: undefined, type: Array})@IsArray()@IsString({each: true})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/resources/reservation/dto/create-reservation.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        time\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '12:00', type: String})@IsNotEmpty()@Matches(/^([01]\\d|2[0-3]):([0-5]\\d)$/, {message: 'time must be in HH:mm format'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/resources/reservation/dto/create-reservation.dto.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty, IsDateString, Matches, IsInt, Min, IsString, IsOptional, IsArray } from 'class-validator';\n\nexport class CreateReservationDto {\n  @ApiProperty({ example: '2024-12-31', type: String })\n  @IsNotEmpty()\n  @IsDateString()\n  date: string;\n\n  @ApiProperty({ example: '12:00', type: String })\n  @IsNotEmpty()\n  @Matches(/^([01]\\d|2[0-3]):([0-5]\\d)$/, {\n    message: 'time must be in HH:mm format',\n  })\n  time: string;\n\n  @ApiProperty({ example: 2, type: Number })\n  @IsInt()\n  @Min(1)\n  numberOfGuests: number;\n\n  @ApiProperty({ example: ['table inside'], type: Array })\n  @IsArray()\n  @IsString({ each: true })\n  @IsOptional()\n  specialRequests: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CustomError.html":{"url":"classes/CustomError.html","title":"class - CustomError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CustomError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/exceptions/custom-error.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Error\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                code\n                            \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                error\n                            \n                            \n                                    Public\n                                    Readonly\n                                errorType\n                            \n                            \n                                    Public\n                                    Readonly\n                                message\n                            \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                payload\n                            \n                            \n                                    Public\n                                    Readonly\n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(message: string, code: number, status: number, errorType: string, payload?: any, error?: Error)\n                    \n                \n                        \n                            \n                                Defined in src/shared/exceptions/custom-error.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        code\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        status\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        errorType\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        payload\n                                                  \n                                                        \n                                                                        any\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        error\n                                                  \n                                                        \n                                                                    Error\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/shared/exceptions/custom-error.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        error\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Error\n\n                    \n                \n                    \n                        \n                                Defined in src/shared/exceptions/custom-error.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        errorType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/shared/exceptions/custom-error.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/shared/exceptions/custom-error.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        payload\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in src/shared/exceptions/custom-error.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/shared/exceptions/custom-error.ts:23\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export const CustomErrors = {\n  UNKNOWN_ERROR: {\n    code: 10000,\n    message: 'Unknown error',\n    status: 500,\n  },\n  NOT_FOUND: {\n    code: 10001,\n    message: 'Not found',\n    status: 404,\n  },\n  VALIDATION_ERROR: {\n    code: 10002,\n    message: 'Validation error',\n    status: 422,\n  },\n};\n\nexport class CustomError extends Error {\n  constructor(\n    public readonly message: string,\n    public readonly code: number,\n    public readonly status: number,\n    public readonly errorType: string,\n    public readonly payload?: any,\n    public readonly error?: Error,\n  ) {\n    super(message);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CustomLoggingService.html":{"url":"injectables/CustomLoggingService.html","title":"injectable - CustomLoggingService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CustomLoggingService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/logger/logger.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                addMetadata\n                            \n                            \n                                    Static\n                                colorMap\n                            \n                            \n                                    Static\n                                getLoggingLevel\n                            \n                            \n                                    Static\n                                loggingLevels\n                            \n                            \n                                    Static\n                                myFormat\n                            \n                            \n                                randomString\n                            \n                            \n                                setMetadata\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                debug\n                            \n                            \n                                error\n                            \n                            \n                                log\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(clsService: ClsService, logger: winston.Logger, source?: string | object)\n                    \n                \n                        \n                            \n                                Defined in src/shared/logger/logger.service.ts:34\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        clsService\n                                                  \n                                                        \n                                                                    ClsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                    winston.Logger\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        source\n                                                  \n                                                        \n                                                                    string | object\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        debug\n                        \n                    \n                \n            \n            \n                \ndebug(message: string, metadata: any, context?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/shared/logger/logger.service.ts:53\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                metadata\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                context\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        error\n                        \n                    \n                \n            \n            \n                \nerror(message: string, trace?: string, metadata?: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/shared/logger/logger.service.ts:62\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                trace\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                metadata\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        log\n                        \n                    \n                \n            \n            \n                \nlog(message: string, metadata?, context?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/shared/logger/logger.service.ts:42\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                metadata\n                                            \n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                context\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        addMetadata\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/shared/logger/logger.service.ts:124\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        colorMap\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    error: LoggerColor.Red, //red\n    warn: LoggerColor.Yellow, //yellow\n    info: LoggerColor.Green, //green\n    debug: LoggerColor.Blue, //blue\n    verbose: LoggerColor.Magenta, //magenta\n  }\n                    \n                \n                    \n                        \n                                Defined in src/shared/logger/logger.service.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        getLoggingLevel\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/shared/logger/logger.service.ts:81\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        loggingLevels\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    error: 0,\n    warn: 1,\n    info: 2,\n    debug: 3,\n    verbose: 4,\n  }\n                    \n                \n                    \n                        \n                                Defined in src/shared/logger/logger.service.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        myFormat\n                        \n                    \n                \n            \n                \n                    \n                        Default value : format.printf(({ level, message, timestamp, data, ip, reqId, label, otherMetadata, ...metadata }) => {\n    let msg = `${LoggerColor.White}`;\n\n    msg += `${timestamp} `;\n\n    msg += `| ${LoggerColor.Cyan}${reqId ?? ''}`;\n    msg += `${(CustomLoggingService.colorMap as any)[level]} |${level.toUpperCase().padEnd(5)}`;\n    msg += `| ${LoggerColor.Yellow}${label ?? ''}${LoggerColor.White}`;\n\n    msg += (CustomLoggingService.colorMap as any)[level];\n\n    if (otherMetadata) {\n      for (const prop in otherMetadata) {\n        if (prop.startsWith('primitive')) {\n          msg += ` | ${otherMetadata[prop]}`;\n        } else {\n          msg += ` | ${prop}: ${otherMetadata[prop]}`;\n        }\n      }\n    }\n\n    msg += ` | ${message} `;\n\n    if (data) {\n      msg += `\\n${JSON.stringify(data, null, 2)}`;\n    }\n\n    return msg;\n  })\n                    \n                \n                    \n                        \n                                Defined in src/shared/logger/logger.service.ts:88\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        randomString\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/shared/logger/logger.service.ts:118\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setMetadata\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/shared/logger/logger.service.ts:138\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Scope, Inject } from '@nestjs/common';\nimport { INQUIRER } from '@nestjs/core';\nimport { ClsService } from 'nestjs-cls';\nimport { WINSTON_MODULE_NEST_PROVIDER } from 'nest-winston';\nimport winston, { Logger, format } from 'winston';\n\nexport enum LoggerColor {\n  Black = '\\x1b[30m',\n  Red = '\\x1b[31m',\n  Green = '\\x1b[32m',\n  Yellow = '\\x1b[33m',\n  Blue = '\\x1b[34m',\n  Magenta = '\\x1b[35m',\n  Cyan = '\\x1b[36m',\n  White = '\\x1b[37m',\n}\n\n@Injectable({ scope: Scope.TRANSIENT })\nexport class CustomLoggingService {\n  static loggingLevels = {\n    error: 0,\n    warn: 1,\n    info: 2,\n    debug: 3,\n    verbose: 4,\n  };\n\n  static colorMap = {\n    error: LoggerColor.Red, //red\n    warn: LoggerColor.Yellow, //yellow\n    info: LoggerColor.Green, //green\n    debug: LoggerColor.Blue, //blue\n    verbose: LoggerColor.Magenta, //magenta\n  };\n\n  constructor(\n    private readonly clsService: ClsService,\n    @Inject(WINSTON_MODULE_NEST_PROVIDER) private readonly logger: winston.Logger,\n    @Inject(INQUIRER) private readonly source?: string | object,\n  ) {}\n\n  log(message: string, metadata?, context?: string) {\n    const serviceName = metadata?.label || ((typeof this.source === 'string' ? this.source : this.source?.constructor?.name) ?? 'Unknown Module');\n    return this.logger.log({\n      level: 'info',\n      message: `${message}`,\n      label: serviceName,\n      reqId: this.clsService.get('reqId'),\n      data: metadata?.data,\n    });\n  }\n\n  debug(message: string, metadata: any, context?: string) {\n    const serviceName = (typeof this.source === 'string' ? this.source : this.source?.constructor?.name) ?? 'Unknown Module';\n    this.logger.debug({\n      message: `${message}`,\n      label: serviceName,\n      reqId: this.clsService.get('reqId'),\n      data: metadata?.data,\n    });\n  }\n  error(message: string, trace?: string, metadata?: { context?: string; data?: any }) {\n    const serviceName = (typeof this.source === 'string' ? this.source : this.source?.constructor?.name) ?? 'Unknown Module';\n    if (metadata?.context) {\n      message = `${serviceName} [${metadata?.context}] - ${message}`;\n    } else {\n      message = `${serviceName} - ${message}`;\n    }\n    if (trace) {\n      message = `${message} \\n${trace}`;\n    }\n\n    this.logger.error({\n      level: 'error',\n      message,\n      reqId: this.clsService.get('reqId'),\n      data: metadata?.data,\n    });\n  }\n\n  static getLoggingLevel = () => {\n    const loggingLevel = process.env.logging_level || process.env.LOGGING_LEVEL;\n    if (Object.keys(CustomLoggingService.loggingLevels).includes(loggingLevel!)) return loggingLevel;\n\n    return 'debug';\n  };\n\n  static myFormat = format.printf(({ level, message, timestamp, data, ip, reqId, label, otherMetadata, ...metadata }) => {\n    let msg = `${LoggerColor.White}`;\n\n    msg += `${timestamp} `;\n\n    msg += `| ${LoggerColor.Cyan}${reqId ?? ''}`;\n    msg += `${(CustomLoggingService.colorMap as any)[level]} |${level.toUpperCase().padEnd(5)}`;\n    msg += `| ${LoggerColor.Yellow}${label ?? ''}${LoggerColor.White}`;\n\n    msg += (CustomLoggingService.colorMap as any)[level];\n\n    if (otherMetadata) {\n      for (const prop in otherMetadata) {\n        if (prop.startsWith('primitive')) {\n          msg += ` | ${otherMetadata[prop]}`;\n        } else {\n          msg += ` | ${prop}: ${otherMetadata[prop]}`;\n        }\n      }\n    }\n\n    msg += ` | ${message} `;\n\n    if (data) {\n      msg += `\\n${JSON.stringify(data, null, 2)}`;\n    }\n\n    return msg;\n  });\n\n  randomString = (length: number) => {\n    return Math.random()\n      .toString(36)\n      .substring(2, length + 2);\n  };\n\n  addMetadata = (obj: any) => {\n    const contextMetadata = this.clsService.get('metadata') ?? {};\n\n    if (typeof obj == 'object') {\n      for (const prop in obj) {\n        contextMetadata[prop] = obj[prop];\n      }\n    } else {\n      contextMetadata[`primitive${obj}`] = obj;\n    }\n\n    this.clsService.set('metadata', contextMetadata);\n  };\n\n  setMetadata = (obj: any) => {\n    if (typeof obj == 'object') {\n      this.clsService.set('metadata', obj);\n    } else {\n      const context: any = {};\n      context[`primitive${this.randomString(5)}`] = obj;\n\n      this.clsService.set('metadata', context);\n    }\n  };\n\n  /*\n         This method:\n      -    setup HTTP CONTEXT on request and response objects\n      -    Logs start of request\n      -    Logs end of request, response status, and request duration\n     */\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GlobalExceptionFilter.html":{"url":"classes/GlobalExceptionFilter.html","title":"class - GlobalExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GlobalExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/exceptions/global-exception-filter.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(logger: CustomLoggingService, contextService: ContextService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/shared/exceptions/global-exception-filter.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                        CustomLoggingService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        contextService\n                                                  \n                                                        \n                                                                        ContextService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                        ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: Error, host: ArgumentsHost)\n                \n            \n\n\n                    \n                        \n                            Defined in src/shared/exceptions/global-exception-filter.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                                        Error\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                host\n                                            \n                                                        ArgumentsHost\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ArgumentsHost, BadRequestException, ExceptionFilter, NotFoundException } from '@nestjs/common';\nimport { CustomLoggingService } from '../logger/logger.service';\nimport { ContextService } from '../context/context.service';\nimport { ConfigService } from '../config/config.service';\nimport { Request, Response } from 'express';\nimport { CustomError, CustomErrors } from './custom-error';\nexport class GlobalExceptionFilter implements ExceptionFilter {\n  constructor(\n    private logger: CustomLoggingService,\n    private contextService: ContextService,\n    private configService: ConfigService,\n  ) {\n    process.on('uncaughtException', (error: Error) => {\n      this.logger.error(error.message, error.stack, { context: 'Uncaught Exception' });\n    });\n  }\n\n  catch(exception: Error, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    const request = ctx.getRequest();\n\n    //logic for validation exceptions\n    if (exception instanceof BadRequestException) {\n      const message = exception.message || CustomErrors.VALIDATION_ERROR.message;\n\n      //give validation details only in development environment\n      const errorPayload = this.configService.env.isDevOrTest ? (exception as any).response.message : undefined;\n      this.logger.log(\n        `${Date.now() - this.contextService.get('startTimestamp')}msec |${request.method} ${request.url} | status: ${response.statusCode}`,\n        {\n          label: 'Request end',\n        },\n      );\n      return response.status(400).json({\n        statusCode: CustomErrors.VALIDATION_ERROR.code,\n        message: message ?? CustomErrors.VALIDATION_ERROR.message,\n        payload: errorPayload,\n        status: 400,\n      });\n    }\n\n    if (exception instanceof NotFoundException) {\n      this.logger.error(`NOT FOUND: ${request.method} ${request.url}`);\n      this.logger.log(\n        `${Date.now() - this.contextService.get('startTimestamp')}msec |${request.method} ${request.url} | status: ${response.statusCode}`,\n        {\n          label: 'Request end',\n        },\n      );\n      return response.status(404).json({\n        statusCode: CustomErrors.NOT_FOUND.code,\n        message: CustomErrors.NOT_FOUND.message,\n        payload: undefined,\n        status: 404,\n      });\n    }\n\n    if (exception instanceof CustomError) {\n      const errorPayload = this.configService.env.isDevOrTest ? exception.error?.stack : undefined;\n\n      this.logger.error(exception.message, exception.stack, {\n        context: `Custom Error - ${exception.errorType} - ${exception.code}`,\n        data: exception.payload,\n      });\n\n      this.logger.log(\n        `${Date.now() - this.contextService.get('startTimestamp')}msec |${request.method} ${request.url} | status: ${response.statusCode}`,\n        {\n          label: 'Request end',\n        },\n      );\n      return response.status(exception.status).json({\n        statusCode: exception.code,\n        message: exception.message,\n        payload: exception.payload ?? errorPayload,\n        status: exception.status,\n      });\n    }\n\n    //send info about error stack in response if environment is development\n    const errorPayload = this.configService.env.isDevOrTest ? exception.stack : undefined;\n\n    response.status(500).json({\n      statusCode: CustomErrors.UNKNOWN_ERROR.code,\n      message: exception.message || CustomErrors.UNKNOWN_ERROR.message,\n      payload: errorPayload,\n      status: 500,\n    });\n\n    this.logger.error(exception.message, exception.stack, { context: 'Unknown Error' });\n\n    this.logger.log(\n      `${Date.now() - this.contextService.get('startTimestamp')}msec |${request.method} ${request.url} | status: ${response.statusCode}`,\n      {\n        label: 'Request end',\n      },\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HelpersService.html":{"url":"injectables/HelpersService.html","title":"injectable - HelpersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HelpersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/helpers/helpers.service.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class HelpersService {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoggingMiddleware.html":{"url":"injectables/LoggingMiddleware.html","title":"injectable - LoggingMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LoggingMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/middleware/request-logging.middleware.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(logger: CustomLoggingService, clsService: ClsService)\n                    \n                \n                        \n                            \n                                Defined in src/shared/middleware/request-logging.middleware.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                        CustomLoggingService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        clsService\n                                                  \n                                                        \n                                                                    ClsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        use\n                        \n                    \n                \n            \n            \n                \nuse(req: Request, res: any, next: () => void)\n                \n            \n\n\n                    \n                        \n                            Defined in src/shared/middleware/request-logging.middleware.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NestMiddleware } from '@nestjs/common';\nimport { randomUUID } from 'crypto';\nimport { ClsService } from 'nestjs-cls';\nimport { CustomLoggingService } from '../logger/logger.service';\n\n@Injectable()\nexport class LoggingMiddleware implements NestMiddleware {\n  constructor(\n    private logger: CustomLoggingService,\n    private readonly clsService: ClsService,\n  ) {}\n\n  use(req: Request, res: any, next: () => void) {\n    this.clsService.set('startTimestamp', new Date().getTime());\n    this.clsService.set('reqId', randomUUID());\n\n    next();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegisterUserDto.html":{"url":"classes/RegisterUserDto.html","title":"class - RegisterUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegisterUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/register-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'test@gmail.com', type: String})@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register-user.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'John Doe', type: String})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register-user.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'password123', type: String})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register-user.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsEmail, IsString } from 'class-validator';\n\nexport class RegisterUserDto {\n  @ApiProperty({ example: 'test@gmail.com', type: String })\n  @IsEmail()\n  email: string;\n\n  @ApiProperty({ example: 'password123', type: String })\n  @IsString()\n  password: string;\n\n  @ApiProperty({ example: 'John Doe', type: String })\n  @IsString()\n  name: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RequestLoggingInterceptor.html":{"url":"injectables/RequestLoggingInterceptor.html","title":"injectable - RequestLoggingInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RequestLoggingInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/interceptors/request-logging.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(logger: CustomLoggingService, clsService: ClsService)\n                    \n                \n                        \n                            \n                                Defined in src/shared/interceptors/request-logging.interceptor.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                        CustomLoggingService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        clsService\n                                                  \n                                                        \n                                                                    ClsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n                    \n                        \n                            Defined in src/shared/interceptors/request-logging.interceptor.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                        CallHandler\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NestInterceptor, ExecutionContext, CallHandler } from '@nestjs/common';\nimport { ClsService } from 'nestjs-cls';\nimport { Observable, tap } from 'rxjs';\nimport { CustomLoggingService } from '../logger/logger.service';\n\n@Injectable()\nexport class RequestLoggingInterceptor implements NestInterceptor {\n  constructor(\n    private logger: CustomLoggingService,\n    private readonly clsService: ClsService,\n  ) {}\n\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    const request = context.switchToHttp().getRequest();\n    const response = context.switchToHttp().getResponse();\n\n    if (request)\n      this.logger.log(`${request.method} ${request.url}`, {\n        label: 'Request start',\n      });\n\n    return next.handle().pipe(\n      tap((data) => {\n        if (response)\n          this.logger.log(\n            `${Date.now() - this.clsService.get('startTimestamp')}msec |${request.method} ${request.url} | status: ${response.statusCode}`,\n            {\n              label: 'Request end',\n            },\n          );\n      }),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Reservation.html":{"url":"classes/Reservation.html","title":"class - Reservation","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Reservation\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/resources/reservation/entities/reservation.entity.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        \n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                $collectionId\n                            \n                            \n                                $createdAt\n                            \n                            \n                                $databaseId\n                            \n                            \n                                $id\n                            \n                            \n                                $permissions\n                            \n                            \n                                $updatedAt\n                            \n                            \n                                date\n                            \n                            \n                                datetime\n                            \n                            \n                                numberOfGuests\n                            \n                            \n                                    Optional\n                                specialRequests\n                            \n                            \n                                time\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toResponseDto\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(obj: literal type)\n                    \n                \n                        \n                            \n                                Defined in src/resources/reservation/entities/reservation.entity.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        obj\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        $collectionId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/resources/reservation/entities/reservation.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        $createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/resources/reservation/entities/reservation.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        $databaseId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/resources/reservation/entities/reservation.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        $id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/resources/reservation/entities/reservation.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        $permissions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in src/resources/reservation/entities/reservation.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        $updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/resources/reservation/entities/reservation.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/resources/reservation/entities/reservation.entity.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        datetime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                    \n                        \n                                Defined in src/resources/reservation/entities/reservation.entity.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        numberOfGuests\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/resources/reservation/entities/reservation.entity.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        specialRequests\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in src/resources/reservation/entities/reservation.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        time\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/resources/reservation/entities/reservation.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/resources/reservation/entities/reservation.entity.ts:10\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        toResponseDto\n                        \n                    \n                \n            \n            \n                \ntoResponseDto()\n                \n            \n\n\n                    \n                        \n                            Defined in src/resources/reservation/entities/reservation.entity.ts:34\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     { id: string; date: string; time: string; numberOfGuests: number; specialRequests: {}; }\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { User } from 'src/types/custom';\nimport { Models } from 'node-appwrite';\n\nexport class Reservation implements Models.Document {\n  datetime: Date;\n  date: string;\n  time: string;\n  numberOfGuests: number;\n  specialRequests?: string[];\n  userId: User['$id'];\n\n  constructor(obj: { $id?: string; date: string; time: string; numberOfGuests: number; specialRequests?: string[]; userId: User['$id'] }) {\n    this.date = obj.date;\n    this.time = obj.time;\n    this.numberOfGuests = obj.numberOfGuests;\n    this.specialRequests = obj.specialRequests;\n    this.userId = obj.userId;\n    this.$id = obj.$id;\n\n    this.datetime = new Date(`${this.date}T${this.time}:00`);\n\n    if (this.datetime \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ReservationController.html":{"url":"controllers/ReservationController.html","title":"controller - ReservationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ReservationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/resources/reservation/reservation.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getAllUsersReservations\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(request: Request, createReservationDto: CreateReservationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Create a reservation', description: 'Create a reservation on behalf current user session'})@ApiResponse({status: 201, description: 'Successfully created reservation'})@ApiResponse({status: 400, description: 'Invalid payload'})@ApiResponse({status: 401, description: 'Unauthorized'})@ApiResponse({status: 500, description: 'Internal server error'})@ApiCookieAuth('auth_token')@SessionGuard({onlyRegisteredUser: true})@Post('/reservation')\n                \n            \n\n                    \n                        \n                            Defined in src/resources/reservation/reservation.controller.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                request\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                createReservationDto\n                                            \n                                                            CreateReservationDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        getAllUsersReservations\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllUsersReservations(request: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get all reservations of a user', description: 'Get all reservations of a user from its session'})@ApiResponse({status: 200, description: 'Users reservations'})@ApiResponse({status: 400, description: 'Invalid payload'})@ApiResponse({status: 401, description: 'Unauthorized'})@ApiResponse({status: 500, description: 'Internal server error'})@ApiCookieAuth('auth_token')@SessionGuard({onlyRegisteredUser: true})@Get('/reservations')\n                \n            \n\n                    \n                        \n                            Defined in src/resources/reservation/reservation.controller.ts:46\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                request\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Post, Body, Req } from '@nestjs/common';\nimport { ReservationService } from './reservation.service';\nimport { CreateReservationDto } from './dto/create-reservation.dto';\nimport { Request } from 'express';\nimport { SessionGuard } from 'src/shared/guards/session.guard';\nimport { ApiOperation, ApiResponse, ApiCookieAuth } from '@nestjs/swagger';\nimport { CustomLoggingService } from 'src/shared/logger/logger.service';\nimport { Reservation } from './entities/reservation.entity';\n\n@Controller()\nexport class ReservationController {\n  constructor(\n    private readonly reservationService: ReservationService,\n    private readonly logger: CustomLoggingService,\n  ) {}\n\n  @ApiOperation({ summary: 'Create a reservation', description: 'Create a reservation on behalf current user session' })\n  @ApiResponse({ status: 201, description: 'Successfully created reservation' })\n  @ApiResponse({ status: 400, description: 'Invalid payload' })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  @ApiResponse({ status: 500, description: 'Internal server error' })\n  @ApiCookieAuth('auth_token')\n  @SessionGuard({ onlyRegisteredUser: true })\n  @Post('/reservation')\n  async create(@Req() request: Request, @Body() createReservationDto: CreateReservationDto) {\n    const userId = request.user.$id;\n    const reservation = await this.reservationService.create(userId, createReservationDto);\n\n    this.logger.log('Successfully created reservation ✅');\n\n    return {\n      status: 201,\n      message: 'Successfully created reservation',\n      reservation: { id: reservation.$id, time: reservation.time, date: reservation.date },\n    };\n  }\n\n  @ApiOperation({ summary: 'Get all reservations of a user', description: 'Get all reservations of a user from its session' })\n  @ApiResponse({ status: 200, description: 'Users reservations' })\n  @ApiResponse({ status: 400, description: 'Invalid payload' })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  @ApiResponse({ status: 500, description: 'Internal server error' })\n  @ApiCookieAuth('auth_token')\n  @SessionGuard({ onlyRegisteredUser: true })\n  @Get('/reservations')\n  async getAllUsersReservations(@Req() request: Request) {\n    const userId = request.user.$id;\n    const reservations = await this.reservationService.getAllUserReservations(userId);\n    return reservations.map((reservation) => new Reservation(reservation).toResponseDto());\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ReservationModule.html":{"url":"modules/ReservationModule.html","title":"module - ReservationModule","body":"\n                   \n\n\n\n\n    Modules\n    ReservationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ReservationModule\n\n\n\ncluster_ReservationModule_imports\n\n\n\ncluster_ReservationModule_providers\n\n\n\n\nAppwriteModule\n\nAppwriteModule\n\n\n\nReservationModule\n\nReservationModule\n\nReservationModule -->\n\nAppwriteModule->ReservationModule\n\n\n\n\n\nReservationRepository\n\nReservationRepository\n\nReservationModule -->\n\nReservationRepository->ReservationModule\n\n\n\n\n\nReservationService\n\nReservationService\n\nReservationModule -->\n\nReservationService->ReservationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/resources/reservation/reservation.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ReservationRepository\n                        \n                        \n                            ReservationService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ReservationController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AppwriteModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ReservationService } from './reservation.service';\nimport { ReservationController } from './reservation.controller';\nimport { ReservationRepository } from './reservation.repository';\nimport { AppwriteModule } from 'src/integrations/appwrite/appwrite.module';\n\n@Module({\n  imports: [AppwriteModule],\n  controllers: [ReservationController],\n  providers: [ReservationService, ReservationRepository],\n})\nexport class ReservationModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ReservationRepository.html":{"url":"injectables/ReservationRepository.html","title":"injectable - ReservationRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ReservationRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/resources/reservation/reservation.repository.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                getAllUserReservations\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(appwriteService: AppwriteService)\n                    \n                \n                        \n                            \n                                Defined in src/resources/reservation/reservation.repository.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        appwriteService\n                                                  \n                                                        \n                                                                        AppwriteService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(reservation: Reservation)\n                \n            \n\n\n                    \n                        \n                            Defined in src/resources/reservation/reservation.repository.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                reservation\n                                            \n                                                            Reservation\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getAllUserReservations\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllUserReservations(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/resources/reservation/reservation.repository.ts:9\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { Reservation } from './entities/reservation.entity';\nimport { AppwriteService } from 'src/integrations/appwrite/appwrite.service';\n\n@Injectable()\nexport class ReservationRepository {\n  constructor(private readonly appwriteService: AppwriteService) {}\n\n  async getAllUserReservations(userId: string) {\n    const reservations = await this.appwriteService.getAllUserReservations(userId);\n    return reservations;\n  }\n\n  async create(reservation: Reservation) {\n    const savedReservation = await this.appwriteService.saveDocument('reservations', reservation);\n    return savedReservation;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ReservationService.html":{"url":"injectables/ReservationService.html","title":"injectable - ReservationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ReservationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/resources/reservation/reservation.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                getAllUserReservations\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reservationRepository: ReservationRepository)\n                    \n                \n                        \n                            \n                                Defined in src/resources/reservation/reservation.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reservationRepository\n                                                  \n                                                        \n                                                                        ReservationRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(userId: string, createReservationDto: CreateReservationDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/resources/reservation/reservation.service.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                createReservationDto\n                                            \n                                                            CreateReservationDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAllUserReservations\n                        \n                    \n                \n            \n            \n                \ngetAllUserReservations(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/resources/reservation/reservation.service.ts:10\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreateReservationDto } from './dto/create-reservation.dto';\nimport { ReservationRepository } from './reservation.repository';\nimport { Reservation } from './entities/reservation.entity';\n\n@Injectable()\nexport class ReservationService {\n  constructor(private readonly reservationRepository: ReservationRepository) {}\n\n  getAllUserReservations(userId: string) {\n    return this.reservationRepository.getAllUserReservations(userId);\n  }\n\n  create(userId: string, createReservationDto: CreateReservationDto) {\n    const reservation = new Reservation({\n      ...createReservationDto,\n      userId,\n    });\n\n    return this.reservationRepository.create(reservation);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SharedModule.html":{"url":"modules/SharedModule.html","title":"module - SharedModule","body":"\n                   \n\n\n\n\n    Modules\n    SharedModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_SharedModule\n\n\n\ncluster_SharedModule_exports\n\n\n\ncluster_SharedModule_providers\n\n\n\n\nConfigService \n\nConfigService \n\n\n\nContextService \n\nContextService \n\n\n\nCustomLoggingService \n\nCustomLoggingService \n\n\n\nHelpersService \n\nHelpersService \n\n\n\nSharedModule\n\nSharedModule\n\nConfigService  -->\n\nSharedModule->ConfigService \n\n\n\nContextService  -->\n\nSharedModule->ContextService \n\n\n\nCustomLoggingService  -->\n\nSharedModule->CustomLoggingService \n\n\n\nHelpersService  -->\n\nSharedModule->HelpersService \n\n\n\n\n\nConfigService\n\nConfigService\n\nSharedModule -->\n\nConfigService->SharedModule\n\n\n\n\n\nContextService\n\nContextService\n\nSharedModule -->\n\nContextService->SharedModule\n\n\n\n\n\nCustomLoggingService\n\nCustomLoggingService\n\nSharedModule -->\n\nCustomLoggingService->SharedModule\n\n\n\n\n\nHelpersService\n\nHelpersService\n\nSharedModule -->\n\nHelpersService->SharedModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/shared/shared.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ConfigService\n                        \n                        \n                            ContextService\n                        \n                        \n                            CustomLoggingService\n                        \n                        \n                            HelpersService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ConfigService\n                        \n                        \n                            ContextService\n                        \n                        \n                            CustomLoggingService\n                        \n                        \n                            HelpersService\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(consumer: MiddlewareConsumer)\n                \n            \n\n\n                    \n                        \n                            Defined in src/shared/shared.module.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                consumer\n                                            \n                                                        MiddlewareConsumer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n\n\n    \n        //generate shared module in nestjs\n\nimport { Global, MiddlewareConsumer, Module } from '@nestjs/common';\nimport { ConfigService } from './config/config.service';\nimport { HelpersService } from './helpers/helpers.service';\nimport { ContextService } from './context/context.service';\nimport { ClsMiddleware, ClsModule } from 'nestjs-cls';\nimport { CustomLoggingService } from './logger/logger.service';\nimport { WinstonModule } from 'nest-winston';\nimport { LoggingMiddleware } from './middleware/request-logging.middleware';\n\n@Global()\n@Module({\n  imports: [ClsModule],\n  controllers: [],\n  providers: [ConfigService, HelpersService, ContextService, CustomLoggingService],\n  exports: [ConfigService, HelpersService, ContextService, CustomLoggingService],\n})\nexport class SharedModule {\n  configure(consumer: MiddlewareConsumer) {\n    consumer.apply(ClsMiddleware).forRoutes('*');\n    consumer.apply(LoggingMiddleware).forRoutes('*');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateReservationDto.html":{"url":"classes/UpdateReservationDto.html","title":"class - UpdateReservationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateReservationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/resources/reservation/dto/update-reservation.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PartialType(CreateReservationDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateReservationDto } from './create-reservation.dto';\n\nexport class UpdateReservationDto extends PartialType(CreateReservationDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/resources/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                getUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                        getUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUser(request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get user', description: 'Get user data from its session cookie'})@ApiResponse({status: 200, description: 'User email and name'})@ApiResponse({status: 401, description: 'Unauthorized'})@ApiResponse({status: 500, description: 'Internal server error'})@ApiCookieAuth('auth_token')@SessionGuard()@Get()\n                \n            \n\n                    \n                        \n                            Defined in src/resources/user/user.controller.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                request\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     { email: any; name: any; }\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Req } from '@nestjs/common';\nimport { UserService } from './user.service';\nimport { SessionGuard } from 'src/shared/guards/session.guard';\nimport { ApiCookieAuth, ApiOperation, ApiResponse } from '@nestjs/swagger';\n\n@Controller('user')\nexport class UserController {\n  constructor(private readonly userService: UserService) {}\n\n  @ApiOperation({ summary: 'Get user', description: 'Get user data from its session cookie' })\n  @ApiResponse({ status: 200, description: 'User email and name' })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  @ApiResponse({ status: 500, description: 'Internal server error' })\n  @ApiCookieAuth('auth_token')\n  @SessionGuard()\n  @Get()\n  getUser(@Req() request) {\n    const { email, name } = request.user;\n    return { email, name };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UserModule\n\n\n\ncluster_UserModule_providers\n\n\n\ncluster_UserModule_imports\n\n\n\n\nAppwriteModule\n\nAppwriteModule\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nAppwriteModule->UserModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/resources/user/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AppwriteModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UserService } from './user.service';\nimport { UserController } from './user.controller';\nimport { AppwriteModule } from 'src/integrations/appwrite/appwrite.module';\n\n@Module({\n  imports: [AppwriteModule],\n  controllers: [UserController],\n  providers: [UserService],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/resources/user/user.service.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class UserService {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/dto/register-user.dto.ts\n            \n            class\n            RegisterUserDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/integrations/appwrite/appwrite.service.ts\n            \n            injectable\n            AppwriteService\n            \n                0 %\n                (0/16)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/resources/reservation/dto/create-reservation.dto.ts\n            \n            class\n            CreateReservationDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/resources/reservation/dto/update-reservation.dto.ts\n            \n            class\n            UpdateReservationDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/resources/reservation/entities/reservation.entity.ts\n            \n            class\n            Reservation\n            \n                0 %\n                (0/15)\n            \n        \n        \n            \n                \n                src/resources/reservation/reservation.controller.ts\n            \n            controller\n            ReservationController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/resources/reservation/reservation.repository.ts\n            \n            injectable\n            ReservationRepository\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/resources/reservation/reservation.service.ts\n            \n            injectable\n            ReservationService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/resources/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/resources/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/shared/config/config.service.ts\n            \n            injectable\n            ConfigService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/shared/config/config.service.ts\n            \n            interface\n            envConfig\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/shared/context/context.service.ts\n            \n            injectable\n            ContextService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/shared/context/context.service.ts\n            \n            variable\n            ContextKeys\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/shared/exceptions/custom-error.ts\n            \n            class\n            CustomError\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/shared/exceptions/custom-error.ts\n            \n            variable\n            CustomErrors\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/shared/exceptions/global-exception-filter.ts\n            \n            class\n            GlobalExceptionFilter\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/shared/guards/session.guard.ts\n            \n            injectable\n            AppwriteSessionGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/shared/guards/session.guard.ts\n            \n            variable\n            SessionGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/shared/helpers/helpers.service.ts\n            \n            injectable\n            HelpersService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/shared/interceptors/request-logging.interceptor.ts\n            \n            injectable\n            RequestLoggingInterceptor\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/shared/logger/logger.service.ts\n            \n            injectable\n            CustomLoggingService\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/shared/middleware/request-logging.middleware.ts\n            \n            injectable\n            LoggingMiddleware\n            \n                0 %\n                (0/3)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/config : ^3.2.3\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/mapped-types : *\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/swagger : ^7.4.0\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            cookie-parser : ^1.4.6\n        \n            nest-winston : ^1.9.7\n        \n            nestjs-cls : ^4.3.0\n        \n            node-appwrite : ^13.0.0\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            LoggerColor   (src/.../logger.service.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/shared/logger/logger.service.ts\n    \n        \n            \n                \n                    \n                        \n                        LoggerColor\n                    \n                \n                        \n                            \n                                 Black\n                            \n                        \n                        \n                            \n                                Value : \u001b[30m\n                            \n                        \n                        \n                            \n                                 Red\n                            \n                        \n                        \n                            \n                                Value : \u001b[31m\n                            \n                        \n                        \n                            \n                                 Green\n                            \n                        \n                        \n                            \n                                Value : \u001b[32m\n                            \n                        \n                        \n                            \n                                 Yellow\n                            \n                        \n                        \n                            \n                                Value : \u001b[33m\n                            \n                        \n                        \n                            \n                                 Blue\n                            \n                        \n                        \n                            \n                                Value : \u001b[34m\n                            \n                        \n                        \n                            \n                                 Magenta\n                            \n                        \n                        \n                            \n                                Value : \u001b[35m\n                            \n                        \n                        \n                            \n                                 Cyan\n                            \n                        \n                        \n                            \n                                Value : \u001b[36m\n                            \n                        \n                        \n                            \n                                 White\n                            \n                        \n                        \n                            \n                                Value : \u001b[37m\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/envConfig.html":{"url":"interfaces/envConfig.html","title":"interface - envConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  envConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/config/config.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            APPWRITE_API_KEY\n                                        \n                                \n                                \n                                        \n                                            APPWRITE_ENDPOINT\n                                        \n                                \n                                \n                                        \n                                            APPWRITE_PROJECT_ID\n                                        \n                                \n                                \n                                        \n                                            PORT\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        APPWRITE_API_KEY\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        APPWRITE_API_KEY:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        APPWRITE_ENDPOINT\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        APPWRITE_ENDPOINT:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        APPWRITE_PROJECT_ID\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        APPWRITE_PROJECT_ID:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        PORT\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        PORT:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\ninterface envConfig {\n  PORT: string;\n  APPWRITE_API_KEY: string;\n  APPWRITE_ENDPOINT: string;\n  APPWRITE_PROJECT_ID: string;\n}\n\n@Injectable()\nexport class ConfigService {\n  constructor() {}\n\n  get env() {\n    return {\n      isDevOrTest: process.env.NODE_ENV?.toLowerCase().startsWith('dev') || process.env.NODE_ENV?.toLowerCase().startsWith('test'),\n    };\n  }\n\n  get db() {\n    return {\n      databaseId: process.env.APPWRITE_DATABASE_ID,\n    };\n  }\n\n  get appwriteConfig() {\n    return {\n      APPWRITE_ENDPOINT: process.env.APPWRITE_ENDPOINT || 'https://cloud.appwrite.io/v1',\n      APPWRITE_PROJECT_ID: process.env.APPWRITE_PROJECT_ID,\n      APPWRITE_API_KEY: process.env.APPWRITE_API_KEY,\n    };\n  }\n\n  get globalConfig() {\n    return {\n      host: process.env.APP_HOST || '0.0.0.0',\n      port: +process.env.APP_PORT || 3000,\n    };\n  }\n\n  getPort(): number {\n    return +process.env.PORT || 3000;\n  }\n\n  get(key: keyof envConfig): string {\n    return process.env[key];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nDescription\nThis project is a backend server built with NestJS, designed to provide robust and scalable APIs for managing and interacting with users and their reservations. The server seamlessly integrates with Appwrite BaaS to leverage its features for database management, authentication, and others.\n\n\nSetup\n1. Install dependencies\nExample :$ npm install2. Setup Appwrite project\nAppwrite can be selfhosted service (you can deploy it by pulling its docker image) or can also be used in Appwrite cloud.\nOnce you setup a project in Awpprite you will get the necessary credentials to use it.\n3. Set Appwrite environment variables\nExample :# these are tree required environment variables for server to connect to appwrite and run properly\nAPPWRITE_ENDPOINT=\nAPPWRITE_PROJECT_ID=\nAPPWRITE_API_KEY=Running the app\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodOpen API specifications\nThis project implements the OpenAPI Specification (OAS3) using Swagger, providing a standardized and interactive API documentation. The OpenAPI spec is available at /api.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppwriteModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ReservationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SharedModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppwriteModule\n\n\n\ncluster_AppwriteModule_exports\n\n\n\ncluster_AppwriteModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_ReservationModule\n\n\n\ncluster_ReservationModule_providers\n\n\n\ncluster_SharedModule\n\n\n\ncluster_SharedModule_exports\n\n\n\ncluster_SharedModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nReservationModule\n\nReservationModule\n\nAppModule -->\n\nReservationModule->AppModule\n\n\n\n\n\nSharedModule\n\nSharedModule\n\nAppModule -->\n\nSharedModule->AppModule\n\n\n\n\n\nConfigService \n\nConfigService \n\nConfigService  -->\n\nSharedModule->ConfigService \n\n\n\n\n\nContextService \n\nContextService \n\nContextService  -->\n\nSharedModule->ContextService \n\n\n\n\n\nCustomLoggingService \n\nCustomLoggingService \n\nCustomLoggingService  -->\n\nSharedModule->CustomLoggingService \n\n\n\n\n\nHelpersService \n\nHelpersService \n\nHelpersService  -->\n\nSharedModule->HelpersService \n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAppwriteService \n\nAppwriteService \n\n\n\nAppwriteModule\n\nAppwriteModule\n\nAuthModule -->\n\nAppwriteModule->AuthModule\n\n\n\nReservationModule -->\n\nAppwriteModule->ReservationModule\n\n\n\nUserModule -->\n\nAppwriteModule->UserModule\n\n\n\nAppwriteService  -->\n\nAppwriteModule->AppwriteService \n\n\n\n\n\nAppwriteService\n\nAppwriteService\n\nAppwriteModule -->\n\nAppwriteService->AppwriteModule\n\n\n\n\n\nAppwriteSessionGuard\n\nAppwriteSessionGuard\n\nAuthModule -->\n\nAppwriteSessionGuard->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nReservationRepository\n\nReservationRepository\n\nReservationModule -->\n\nReservationRepository->ReservationModule\n\n\n\n\n\nReservationService\n\nReservationService\n\nReservationModule -->\n\nReservationService->ReservationModule\n\n\n\n\n\nConfigService\n\nConfigService\n\nSharedModule -->\n\nConfigService->SharedModule\n\n\n\n\n\nContextService\n\nContextService\n\nSharedModule -->\n\nContextService->SharedModule\n\n\n\n\n\nCustomLoggingService\n\nCustomLoggingService\n\nSharedModule -->\n\nCustomLoggingService->SharedModule\n\n\n\n\n\nHelpersService\n\nHelpersService\n\nSharedModule -->\n\nHelpersService->SharedModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        6 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    4 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    13 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    6 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Interface\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ContextKeys   (src/.../context.service.ts)\n                        \n                        \n                            CustomErrors   (src/.../custom-error.ts)\n                        \n                        \n                            SessionGuard   (src/.../session.guard.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/shared/context/context.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ContextKeys\n                        \n                    \n                \n            \n                \n                    \n                        Default value : {\n  sessionSecret: 'sessionSecret',\n  user: 'user',\n  startTimestamp: 'startTimestamp',\n} as const\n                    \n                \n\n\n        \n    \n\n    src/shared/exceptions/custom-error.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        CustomErrors\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  UNKNOWN_ERROR: {\n    code: 10000,\n    message: 'Unknown error',\n    status: 500,\n  },\n  NOT_FOUND: {\n    code: 10001,\n    message: 'Not found',\n    status: 404,\n  },\n  VALIDATION_ERROR: {\n    code: 10002,\n    message: 'Validation error',\n    status: 422,\n  },\n}\n                    \n                \n\n\n        \n    \n\n    src/shared/guards/session.guard.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        SessionGuard\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (options?: { onlyRegisteredUser: boolean }) => {\n  if (options?.onlyRegisteredUser) {\n    return applyDecorators(SetMetadata('onlyRegisteredUser', true), UseGuards(AppwriteSessionGuard));\n  }\n  return applyDecorators(UseGuards(AppwriteSessionGuard));\n}\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
