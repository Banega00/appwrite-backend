var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.313,1,2.082]],["body/controllers/AppController.html",[0,2.098,1,3.328,2,1.425,3,0.378,4,0.328,5,0.328,6,3.43,7,0.731,8,1.647,9,5.876,10,2.175,11,0.031,12,5.136,13,1.032,14,4.102,15,1.315,16,0.473,17,0.543,18,2.972,19,3.43,20,0.378,21,0.1,22,1.544,23,1.676,24,1.12,25,4.102,26,0.024,27,0.024]],["title/modules/AppModule.html",[28,0.951,29,2.082]],["body/modules/AppModule.html",[1,3.048,2,1.412,3,0.266,4,0.231,5,0.231,11,0.031,16,0.556,17,0.382,18,2.96,19,2.414,20,0.266,21,0.071,26,0.019,27,0.019,28,1.392,29,4.096,30,1.179,31,1.179,32,1.398,33,1.398,34,1.179,35,2.278,36,1.398,37,2.414,38,2.414,39,2.414,40,3.475,41,3.259,42,3.259,43,3.259,44,1.968,45,1.398,46,1.398,47,2.887,48,2.372,49,2.887,50,2.887,51,1.282,52,2.887,53,2.887,54,2.414,55,2.887,56,2.414,57,1.871,58,1.871,59,2.887,60,2.887,61,2.887,62,2.887,63,2.414,64,1.968,65,2.887,66,2.887]],["title/injectables/AppService.html",[18,1.704,67,0.425]],["body/injectables/AppService.html",[3,0.373,4,0.323,5,0.323,7,0.721,8,1.633,11,0.031,13,1.019,15,1.298,16,0.47,17,0.536,18,2.701,20,0.373,21,0.099,24,1.106,26,0.024,27,0.024,67,0.674,68,1.407,69,3.387,70,5.849,71,4.05,72,1.508,73,4.261,74,3.301,75,1.525,76,4.05,77,4.05,78,4.05,79,4.05,80,3.387]],["title/modules/AppwriteModule.html",[28,0.951,51,1.427]],["body/modules/AppwriteModule.html",[2,1.344,3,0.357,4,0.309,5,0.309,11,0.03,16,0.456,17,0.512,20,0.357,21,0.095,26,0.023,27,0.023,28,1.615,30,1.581,31,1.581,32,1.874,33,1.874,34,1.581,35,2.643,36,2.643,44,2.397,45,1.874,46,1.874,51,2.746,81,3.236,82,3.236,83,3.236,84,2.865,85,3.869,86,3.869]],["title/injectables/AppwriteService.html",[67,0.425,84,1.427]],["body/injectables/AppwriteService.html",[3,0.101,4,0.088,5,0.088,7,0.196,8,0.607,11,0.031,13,1.28,15,1.329,16,0.309,17,0.145,20,0.101,21,0.027,22,0.413,23,0.773,24,0.914,26,0.009,27,0.009,64,1.773,67,0.25,68,0.381,72,1.283,75,2.025,80,0.918,84,0.841,87,0.918,88,0.917,89,4.498,90,4.144,91,2.496,92,3.348,93,1.617,94,3.661,95,2.496,96,2.496,97,2.986,98,2.968,99,1.893,100,2.968,101,1.893,102,1.893,103,3.661,104,1.893,105,1.893,106,0.449,107,1.098,108,1.773,109,1.9,110,1.098,111,1.362,112,1.53,113,1.272,114,1.098,115,1.573,116,1.893,117,1.098,118,3.348,119,1.098,120,1.893,121,1.098,122,1.573,123,1.893,124,1.098,125,1.098,126,1.098,127,1.893,128,2.968,129,1.437,130,1.098,131,1.583,132,3.348,133,1.893,134,1.893,135,1.617,136,1.818,137,1.098,138,1.098,139,3.348,140,1.098,141,1.893,142,1.098,143,1.098,144,1.098,145,1.583,146,0.8,147,2.439,148,3.158,149,1.098,150,0.918,151,1.098,152,1.098,153,1.098,154,0.8,155,0.8,156,0.8,157,1.098,158,1.098,159,1.098,160,0.918,161,2.047,162,0.8,163,1.893,164,1.098,165,2.482,166,2.463,167,2.968,168,1.098,169,3.348,170,1.098,171,1.098,172,1.098,173,0.918,174,1.098,175,1.098,176,0.8,177,2.496,178,1.098,179,1.893,180,0.8,181,0.8,182,0.8,183,1.098,184,1.098,185,1.098,186,0.918,187,1.098,188,1.098,189,4.775,190,1.098,191,1.098,192,1.098,193,2.912,194,1.098,195,1.098,196,1.098,197,1.098,198,1.098,199,1.098,200,1.893,201,1.893,202,1.893,203,1.098,204,1.098,205,1.098,206,1.379,207,1.098,208,1.098,209,2.087,210,1.098,211,1.098,212,1.098,213,1.893,214,1.098,215,1.098,216,1.098,217,1.893,218,1.893,219,1.098,220,1.893,221,1.893,222,1.098,223,2.968,224,3.922,225,0.711,226,2.968,227,1.098,228,0.711,229,1.098,230,1.098,231,0.918,232,1.098,233,1.098,234,0.8,235,0.918,236,1.098,237,1.098,238,0.8,239,1.098,240,1.098,241,1.098,242,1.893,243,1.098,244,1.098,245,1.098,246,1.098,247,1.098,248,1.098,249,2.496,250,1.098,251,0.641,252,0.8,253,0.449,254,1.098,255,1.893,256,1.098,257,1.583,258,1.098,259,1.098,260,1.583,261,1.098,262,1.098,263,1.583,264,1.098,265,0.8,266,0.918,267,1.098,268,1.098,269,1.098,270,1.098,271,1.098]],["title/injectables/AppwriteSessionGuard.html",[67,0.425,272,1.876]],["body/injectables/AppwriteSessionGuard.html",[3,0.238,4,0.206,5,0.206,7,0.46,8,1.203,11,0.031,13,0.945,15,0.828,16,0.475,17,0.342,20,0.346,21,0.063,22,0.972,24,1.207,26,0.018,27,0.018,64,1.818,67,0.496,68,0.897,72,1.111,84,2.466,89,3.139,97,2.344,106,1.055,109,2.688,111,1.304,112,1.111,113,1.304,115,1.369,154,1.881,161,1.941,165,4.312,166,2.573,193,1.369,253,1.806,272,2.191,273,1.881,274,3.753,275,2.582,276,5.379,277,2.582,278,3.753,279,4.853,280,2.582,281,2.582,282,3.698,283,2.582,284,2.582,285,2.865,286,1.673,287,1.881,288,2.16,289,2.16,290,1.369,291,2.16,292,3.139,293,2.16,294,2.16,295,2.16,296,3.139,297,2.582,298,3.753,299,2.582,300,2.582,301,2.582,302,2.582,303,2.582,304,4.853,305,2.582,306,2.582,307,2.582,308,2.582,309,2.582,310,2.582,311,2.582,312,2.16,313,1.881,314,2.582,315,2.582,316,2.582,317,2.582,318,2.582,319,1.673]],["title/controllers/AuthController.html",[0,1.313,320,2.082]],["body/controllers/AuthController.html",[0,1.259,2,0.69,3,0.183,4,0.159,5,0.159,7,0.354,8,0.988,10,1.633,11,0.031,13,0.775,15,0.988,16,0.449,17,0.263,20,0.183,21,0.049,22,0.748,23,0.811,24,0.841,26,0.015,27,0.015,64,1.492,72,1.117,74,3.404,97,2.583,111,1.07,112,0.912,113,1.07,115,1.633,135,1.287,161,1.421,166,1.053,193,1.633,206,3.354,209,4.074,251,1.159,253,2.293,285,3.157,286,1.287,290,1.633,312,1.661,313,1.447,319,1.996,320,1.996,321,1.661,322,4.074,323,3.557,324,1.986,325,2.245,326,4.253,327,5.612,328,3.495,329,3.474,330,3.157,331,4.074,332,4.074,333,3.099,334,3.099,335,2.756,336,1.986,337,1.986,338,1.986,339,4.074,340,2.756,341,3.081,342,3.081,343,1.986,344,2.577,345,2.577,346,1.661,347,2.245,348,1.447,349,1.986,350,1.986,351,1.661,352,1.447,353,1.986,354,2.001,355,1.661,356,1.661,357,1.447,358,2.75,359,3.702,360,1.053,361,1.986,362,1.986,363,2.245,364,1.986,365,1.986,366,1.986,367,1.986,368,1.986,369,1.986,370,1.986,371,1.986,372,1.986,373,1.986,374,1.986,375,2.245,376,1.661,377,1.447,378,1.447,379,1.986,380,1.986,381,1.986,382,1.986,383,1.986,384,1.986]],["title/modules/AuthModule.html",[28,0.951,40,1.876]],["body/modules/AuthModule.html",[2,1.615,3,0.324,4,0.281,5,0.281,11,0.031,16,0.531,17,0.465,20,0.324,21,0.086,26,0.022,27,0.022,28,1.542,30,1.435,31,1.435,32,1.702,33,1.702,34,1.435,35,2.523,36,1.702,40,3.658,44,2.251,45,1.702,46,1.702,48,2.713,51,2.631,272,3.458,320,3.375,354,3.141,355,2.938,356,2.938,385,2.938,386,3.513,387,2.938,388,3.513,389,3.513,390,2.56]],["title/injectables/AuthService.html",[67,0.425,354,1.704]],["body/injectables/AuthService.html",[3,0.294,4,0.254,5,0.254,7,0.567,8,1.395,11,0.031,13,1.248,15,1.395,16,0.401,17,0.421,20,0.294,21,0.078,22,1.199,23,1.301,24,1.188,26,0.021,27,0.021,67,0.576,68,1.106,72,1.577,75,2.168,84,2.557,97,3.052,106,1.301,111,1.512,112,1.577,113,1.512,115,2.307,122,1.689,135,3.212,136,3.17,161,1.638,193,2.307,251,2.54,252,3.17,253,1.778,257,2.664,260,2.664,263,2.664,287,2.32,322,4.455,323,3.639,328,2.82,354,2.307,391,2.664,392,2.664,393,3.185,394,3.185,395,4.352,396,3.185,397,3.185,398,3.185]],["title/injectables/ConfigService.html",[67,0.425,108,1.556]],["body/injectables/ConfigService.html",[3,0.281,4,0.243,5,0.243,7,0.542,8,1.352,11,0.031,13,1.429,15,1.352,16,0.281,17,0.403,20,0.281,21,0.074,24,1.498,26,0.02,27,0.02,67,0.558,68,1.057,72,0.901,75,2.137,93,1.972,106,1.977,108,2.042,111,1.057,113,1.057,162,3.526,176,2.217,180,3.072,181,3.072,182,3.072,265,2.217,399,2.217,400,4.37,401,4.217,402,4.047,403,4.047,404,3.043,405,3.072,406,3.043,407,3.043,408,2.733,409,3.043,410,3.043,411,3.043,412,3.043,413,3.043,414,3.043,415,1.776,416,2.733,417,3.527,418,2.545,419,2.545,420,2.545,421,2.545,422,2.545,423,2.545,424,2.545,425,2.545,426,2.545,427,3.527,428,2.545,429,2.545]],["title/injectables/ContextService.html",[67,0.425,109,1.556]],["body/injectables/ContextService.html",[3,0.301,4,0.26,5,0.26,7,0.581,8,1.418,11,0.031,13,1.263,15,1.418,16,0.408,17,0.431,20,0.408,21,0.08,22,1.228,23,1.332,24,0.891,26,0.021,27,0.021,57,2.113,58,2.113,67,0.585,68,1.133,72,1.485,106,1.332,109,2.142,111,1.869,112,1.485,113,1.743,131,4.196,146,3.919,161,1.665,176,3.222,186,3.698,253,1.807,266,4.499,405,3.222,430,2.376,431,3.261,432,5.798,433,3.261,434,3.261,435,4.422,436,3.261,437,4.422,438,3.655,439,3.698,440,4.422,441,3.261,442,3.261]],["title/classes/CreateReservationDto.html",[21,0.079,443,1.704]],["body/classes/CreateReservationDto.html",[3,0.254,4,0.22,5,0.22,7,0.491,10,2.65,11,0.031,13,1.258,16,0.423,20,0.254,21,0.112,26,0.019,27,0.019,64,1.334,75,2.178,88,1.904,112,1.823,225,2.97,228,3.426,234,3.339,238,3.339,360,1.46,375,2.864,408,2.97,443,2.084,444,1.607,445,4.421,446,2.006,447,4.181,448,3.931,449,3.931,450,3.931,451,2.754,452,2.754,453,3.931,454,2.754,455,2.754,456,2.754,457,2.754,458,2.754,459,2.754,460,3.931,461,2.754,462,3.931,463,3.931,464,3.931,465,3.931,466,2.754,467,4.421,468,2.754,469,2.303,470,4.584,471,3.931,472,2.754,473,3.931,474,2.754,475,3.287,476,3.931,477,3.931,478,2.006,479,3.642,480,2.754,481,2.754,482,2.303,483,2.754,484,2.754,485,2.754]],["title/injectables/HeleprsService.html",[67,0.425,486,1.876]],["body/injectables/HeleprsService.html",[3,0.432,4,0.374,5,0.374,11,0.03,16,0.432,17,0.62,20,0.432,21,0.115,26,0.026,27,0.026,67,0.737,68,1.627,486,3.251,487,3.919]],["title/classes/RegisterUserDto.html",[21,0.079,340,2.082]],["body/classes/RegisterUserDto.html",[3,0.311,4,0.27,5,0.27,7,0.602,10,2.707,11,0.031,13,1.285,16,0.417,20,0.311,21,0.111,26,0.021,27,0.021,72,1.511,75,2.319,88,2.192,112,1.823,251,2.981,252,3.72,340,2.933,360,1.79,444,1.971,447,4.563,467,4.271,475,4.271,478,2.46,479,3.298,488,4.563,489,2.824,490,4.527,491,3.377,492,3.377,493,4.527,494,4.527,495,4.527,496,3.377,497,4.527,498,3.377,499,4.527]],["title/classes/Reservation.html",[21,0.079,129,1.556]],["body/classes/Reservation.html",[3,0.247,4,0.214,5,0.214,7,0.478,11,0.031,13,1.543,16,0.356,20,0.247,21,0.066,26,0.018,27,0.018,72,0.794,75,2.342,88,1.869,93,2.501,106,1.097,111,0.932,112,1.829,113,1.57,122,2.62,129,1.869,136,2.812,148,2.812,150,2.245,155,1.955,156,1.955,160,3.228,166,1.423,225,3.532,228,3.202,231,3.779,234,3.6,238,3.6,253,1.097,408,2.928,444,1.567,500,2.245,501,3.859,502,3.859,503,3.859,504,3.859,505,3.859,506,3.859,507,2.684,508,2.684,509,2.684,510,2.684,511,2.684,512,2.684,513,2.684,514,2.684,515,2.684,516,2.684,517,2.684,518,2.684,519,2.684,520,2.684,521,3.859,522,2.684,523,2.684,524,2.684,525,2.684,526,2.684,527,2.684,528,2.684,529,2.684,530,2.684,531,2.684,532,2.684,533,2.684,534,2.684]],["title/controllers/ReservationController.html",[0,1.313,535,2.082]],["body/controllers/ReservationController.html",[0,1.29,2,0.712,3,0.189,4,0.164,5,0.164,7,0.365,8,1.012,10,1.674,11,0.031,13,0.795,15,1.012,16,0.455,17,0.271,20,0.189,21,0.05,22,0.772,23,0.838,24,0.862,26,0.015,27,0.015,64,1.529,72,0.934,74,3.528,97,2.042,111,1.097,112,0.934,113,1.097,115,1.087,122,1.674,129,2.57,147,3.403,148,1.494,154,2.3,161,1.45,193,1.087,206,2.805,225,1.328,228,1.328,253,2.016,285,3.666,286,1.328,290,1.087,319,2.046,325,2.3,328,2.495,329,3.586,330,2.641,331,3.22,332,3.22,333,3.151,334,3.151,335,2.803,339,2.641,344,3.618,345,3.618,346,2.641,347,3.151,348,2.3,351,1.715,352,1.494,357,1.494,358,2.805,359,3.967,360,1.087,363,2.3,375,1.494,376,2.641,377,2.3,378,2.3,443,2.814,535,2.046,536,1.715,537,3.197,538,3.157,539,2.05,540,3.157,541,3.157,542,2.05,543,3.157,544,2.05,545,2.05,546,2.05,547,2.641,548,2.05,549,2.05,550,2.05,551,2.05,552,2.05,553,2.05,554,2.042,555,1.715,556,1.715,557,1.494,558,1.715,559,3.157,560,2.05,561,2.05,562,3.157,563,2.05,564,2.05,565,2.05,566,2.05,567,2.05,568,2.05,569,2.05]],["title/modules/ReservationModule.html",[28,0.951,41,1.876]],["body/modules/ReservationModule.html",[2,1.615,3,0.324,4,0.281,5,0.281,11,0.031,16,0.531,17,0.465,20,0.324,21,0.086,26,0.022,27,0.022,28,1.542,30,1.435,31,1.435,32,1.702,33,1.702,34,1.435,35,2.523,36,1.702,41,3.658,44,2.251,45,1.702,46,1.702,48,2.713,51,2.631,390,2.56,535,3.375,554,3.141,555,2.938,570,2.938,571,3.513,572,2.938,573,3.141,574,3.513,575,3.513,576,2.938]],["title/injectables/ReservationRepository.html",[67,0.425,573,1.704]],["body/injectables/ReservationRepository.html",[3,0.301,4,0.26,5,0.26,7,0.581,8,1.418,11,0.031,13,1.263,15,1.418,16,0.463,17,0.431,20,0.301,21,0.08,22,1.228,23,1.332,24,1.208,26,0.021,27,0.021,67,0.585,68,1.133,72,1.485,75,1.889,84,2.575,97,3.074,106,1.332,111,1.743,112,1.485,113,1.743,115,2.344,122,1.729,129,2.808,147,3.222,161,1.665,193,2.344,287,2.376,392,2.728,537,2.866,573,2.344,577,2.728,578,3.698,579,3.261,580,4.422,581,3.261,582,3.698,583,3.261,584,2.728,585,3.261,586,4.422,587,3.261]],["title/injectables/ReservationService.html",[67,0.425,554,1.704]],["body/injectables/ReservationService.html",[3,0.291,4,0.252,5,0.252,7,0.562,8,1.386,11,0.031,13,1.241,15,1.386,16,0.512,17,0.417,20,0.291,21,0.077,22,1.187,23,1.288,24,1.18,26,0.021,27,0.021,67,0.572,68,1.095,72,1.459,75,2.161,106,1.288,111,1.713,112,1.459,113,1.713,122,2.614,129,2.388,161,1.187,166,1.672,443,3.173,537,2.801,554,2.291,556,2.637,557,3.149,573,3.043,576,2.637,578,3.615,582,3.615,584,2.637,588,2.637,589,3.154,590,3.154,591,4.322,592,3.154,593,3.154,594,2.044,595,3.154,596,3.154,597,3.154]],["title/modules/SharedModule.html",[28,0.951,42,1.876]],["body/modules/SharedModule.html",[2,1.092,3,0.29,4,0.251,5,0.251,11,0.031,16,0.512,17,0.416,20,0.29,21,0.077,26,0.02,27,0.02,28,1.568,30,1.284,31,1.284,32,1.522,33,1.522,34,1.284,35,2.384,36,2.384,42,3.673,44,2.088,45,1.522,46,1.522,48,1.835,56,3.607,57,2.794,58,2.037,63,3.607,108,3.027,109,3.027,288,2.629,486,3.648,598,2.629,599,2.629,600,2.629,601,3.143,602,3.143,603,3.143,604,3.143,605,3.143]],["title/classes/UpdateReservationDto.html",[21,0.079,594,2.082]],["body/classes/UpdateReservationDto.html",[3,0.412,4,0.357,5,0.357,11,0.03,16,0.499,20,0.412,21,0.109,26,0.026,27,0.026,443,2.368,444,2.607,446,3.254,537,2.894,557,3.254,594,3.507,606,3.735,607,5.412,608,5.412,609,4.466,610,3.735,611,3.735]],["title/controllers/UserController.html",[0,1.313,612,2.082]],["body/controllers/UserController.html",[0,1.255,2,1.067,3,0.283,4,0.245,5,0.245,7,0.547,8,1.361,10,1.629,11,0.031,13,0.773,15,0.985,16,0.484,17,0.406,20,0.283,21,0.075,22,1.157,23,1.255,24,0.839,26,0.02,27,0.02,72,1.63,74,3.152,111,1.067,113,1.067,135,2.751,161,1.157,251,3.214,253,2.385,285,2.751,290,2.251,313,2.238,319,1.991,325,2.238,328,2.751,329,3.472,333,3.093,334,3.093,335,2.751,347,3.093,348,2.238,352,2.238,357,2.238,358,3.093,359,3.822,360,1.629,363,2.238,377,2.238,378,2.238,547,3.55,558,2.57,612,2.751,613,2.57,614,3.073,615,4.245,616,3.073,617,3.073,618,3.073,619,3.073,620,3.073,621,2.579,622,2.57,623,3.073,624,2.57,625,3.073]],["title/modules/UserModule.html",[28,0.951,43,1.876]],["body/modules/UserModule.html",[2,1.667,3,0.34,4,0.295,5,0.295,11,0.031,16,0.521,17,0.488,20,0.34,21,0.09,26,0.023,27,0.023,28,1.579,30,1.508,31,1.508,32,1.787,33,1.787,34,1.508,35,2.584,36,1.787,43,3.618,44,2.325,45,1.787,46,1.787,48,2.802,51,2.667,390,2.688,612,3.457,621,3.183,622,3.086,626,3.086,627,3.086,628,3.69,629,3.69,630,3.69]],["title/injectables/UserService.html",[67,0.425,621,1.704]],["body/injectables/UserService.html",[3,0.434,4,0.376,5,0.376,11,0.03,16,0.434,17,0.623,20,0.434,21,0.115,26,0.027,27,0.027,67,0.739,68,1.635,621,2.962,631,3.938]],["title/coverage.html",[632,3.189]],["body/coverage.html",[0,2.086,1,1.871,5,0.231,6,2.414,11,0.031,18,1.53,21,0.125,26,0.019,27,0.019,34,1.179,67,0.798,69,2.414,84,1.282,87,2.414,108,1.398,109,1.398,112,0.854,129,1.398,166,1.53,272,1.685,273,2.961,290,1.53,320,1.871,321,2.414,340,1.871,354,1.53,391,2.414,399,2.961,415,1.685,416,1.871,430,2.961,438,2.103,443,1.53,445,2.414,446,2.961,482,2.414,486,1.685,487,2.414,488,2.414,489,2.414,500,2.414,535,1.871,536,2.414,554,1.53,573,1.53,577,2.414,588,2.414,594,1.871,606,2.414,612,1.871,613,2.414,621,1.53,631,2.414,632,2.103,633,2.887,634,2.887,635,2.887,636,6.461,637,4.704,638,4.704,639,5.583,640,2.887,641,2.414,642,2.887,643,5.583,644,4.065,645,2.887,646,4.065,647,2.887]],["title/dependencies.html",[31,1.578,648,2.247]],["body/dependencies.html",[11,0.031,17,0.538,21,0.125,26,0.024,27,0.024,31,1.662,54,3.401,57,2.635,58,2.635,155,2.963,156,2.963,286,2.635,289,3.401,360,2.156,469,3.401,478,2.963,610,3.401,611,3.401,624,3.401,649,5.585,650,4.067,651,4.067,652,4.067,653,4.067,654,4.067,655,4.067,656,4.067,657,4.067,658,4.067,659,4.067,660,4.067,661,4.067,662,4.067,663,4.067]],["title/interfaces/envConfig.html",[415,1.876,416,2.082]],["body/interfaces/envConfig.html",[3,0.292,4,0.253,5,0.253,7,0.564,11,0.032,16,0.292,17,0.419,20,0.292,21,0.077,24,1.519,26,0.021,27,0.021,67,0.573,75,2.372,88,2.098,93,2.05,106,1.293,108,1.532,112,1.572,162,2.305,180,4.053,181,4.053,182,4.053,265,2.305,399,2.305,400,2.646,402,2.646,403,2.646,405,2.305,408,2.05,415,1.847,416,3.201,417,4.653,418,2.646,419,2.646,420,2.646,421,2.646,422,2.646,423,2.646,424,2.646,425,2.646,426,2.646,427,3.623,428,2.646,429,2.646,664,3.164]],["title/miscellaneous/functions.html",[665,1.741,666,3.231]],["body/miscellaneous/functions.html",[7,0.873,11,0.027,26,0.027,27,0.027,34,2.475,641,4.1,665,3.176,666,4.1,667,4.902]],["title/index.html",[7,0.479,668,2.687,669,2.687]],["body/index.html",[4,0.271,11,0.031,26,0.022,27,0.022,173,2.834,329,1.978,335,2.196,479,3.727,632,2.469,670,3.389,671,3.389,672,4.538,673,3.389,674,3.389,675,3.389,676,3.389,677,3.389,678,5.116,679,3.389,680,3.389,681,3.389,682,3.389,683,5.988,684,3.389,685,3.389,686,3.389,687,5.863,688,3.389,689,3.389,690,4.538,691,3.389,692,3.389,693,3.389,694,3.389,695,4.538,696,4.538,697,3.389,698,3.389,699,3.389,700,4.538,701,4.538,702,3.389,703,3.389,704,3.389,705,3.389,706,2.834,707,3.389,708,3.389,709,3.389,710,3.389,711,3.389,712,3.389,713,3.389,714,3.389,715,3.389,716,3.389,717,2.834,718,3.389,719,3.389,720,3.389,721,3.389,722,3.389,723,3.389,724,2.834]],["title/modules.html",[30,1.789]],["body/modules.html",[11,0.025,26,0.025,27,0.025,29,2.841,30,1.791,40,2.559,41,2.559,42,2.559,43,2.559,51,1.948,706,5.247,725,6.274,726,6.274,727,6.274]],["title/overview.html",[728,3.661]],["body/overview.html",[2,0.943,11,0.031,18,2.411,26,0.018,27,0.018,28,0.803,29,4.011,30,1.109,31,1.109,32,1.315,33,1.315,34,1.109,35,1.315,36,1.315,37,2.27,38,2.27,39,2.27,40,3.476,41,3.425,42,3.555,43,3.289,44,1.884,45,1.315,46,1.315,51,2.56,68,0.943,81,2.27,82,2.27,83,2.27,84,2.503,108,2.729,109,2.729,235,2.27,272,2.654,354,2.411,385,2.27,387,2.27,415,1.584,444,1.584,486,3.289,554,2.411,570,2.27,572,2.27,573,2.411,598,2.27,599,2.27,600,2.27,621,2.411,626,2.27,627,2.27,728,2.27,729,2.714,730,3.891,731,2.714]],["title/properties.html",[88,1.871,648,2.247]],["body/properties.html",[11,0.03,26,0.027,27,0.027,73,4.037,88,2.338,329,2.818,717,4.037,724,4.037,732,4.828,733,4.828]],["title/miscellaneous/variables.html",[665,1.741,734,3.231]],["body/miscellaneous/variables.html",[7,0.743,11,0.031,24,1.418,26,0.025,27,0.025,64,2.021,145,4.342,146,3.782,161,1.571,253,2.121,273,3.04,282,4.342,290,2.752,291,3.49,292,3.49,293,3.49,294,3.49,295,3.49,296,4.342,430,3.04,438,3.782,439,4.342,665,2.704,734,3.49,735,4.174,736,4.174]]],"invertedIndex":[["",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AppwriteModule.html":{},"injectables/AppwriteService.html":{},"injectables/AppwriteSessionGuard.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/ConfigService.html":{},"injectables/ContextService.html":{},"classes/CreateReservationDto.html":{},"injectables/HeleprsService.html":{},"classes/RegisterUserDto.html":{},"classes/Reservation.html":{},"controllers/ReservationController.html":{},"modules/ReservationModule.html":{},"injectables/ReservationRepository.html":{},"injectables/ReservationService.html":{},"modules/SharedModule.html":{},"classes/UpdateReservationDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"interfaces/envConfig.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":636,"title":{},"body":{"coverage.html":{}}}],["0.0.0.0",{"_index":425,"title":{},"body":{"injectables/ConfigService.html":{},"interfaces/envConfig.html":{}}}],["0.0.1",{"_index":732,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":654,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":661,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":653,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":643,"title":{},"body":{"coverage.html":{}}}],["0/14",{"_index":645,"title":{},"body":{"coverage.html":{}}}],["0/16",{"_index":640,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":637,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":638,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":639,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":644,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":235,"title":{},"body":{"injectables/AppwriteService.html":{},"overview.html":{}}}],["1.4.6",{"_index":656,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":731,"title":{},"body":{"overview.html":{}}}],["10.0.0",{"_index":649,"title":{},"body":{"dependencies.html":{}}}],["12",{"_index":449,"title":{},"body":{"classes/CreateReservationDto.html":{}}}],["12:00",{"_index":460,"title":{},"body":{"classes/CreateReservationDto.html":{}}}],["13.0.0",{"_index":658,"title":{},"body":{"dependencies.html":{}}}],["2",{"_index":453,"title":{},"body":{"classes/CreateReservationDto.html":{}}}],["200",{"_index":547,"title":{},"body":{"controllers/ReservationController.html":{},"controllers/UserController.html":{}}}],["201",{"_index":331,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ReservationController.html":{}}}],["2024",{"_index":448,"title":{},"body":{"classes/CreateReservationDto.html":{}}}],["255",{"_index":226,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["3.2.3",{"_index":650,"title":{},"body":{"dependencies.html":{}}}],["3000",{"_index":427,"title":{},"body":{"injectables/ConfigService.html":{},"interfaces/envConfig.html":{}}}],["31",{"_index":450,"title":{},"body":{"classes/CreateReservationDto.html":{}}}],["3]):([0",{"_index":462,"title":{},"body":{"classes/CreateReservationDto.html":{}}}],["4",{"_index":730,"title":{},"body":{"overview.html":{}}}],["4.3.0",{"_index":657,"title":{},"body":{"dependencies.html":{}}}],["400",{"_index":344,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ReservationController.html":{}}}],["401",{"_index":347,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ReservationController.html":{},"controllers/UserController.html":{}}}],["500",{"_index":333,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ReservationController.html":{},"controllers/UserController.html":{}}}],["5]\\d",{"_index":463,"title":{},"body":{"classes/CreateReservationDto.html":{}}}],["6",{"_index":729,"title":{},"body":{"overview.html":{}}}],["7.4.0",{"_index":652,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":663,"title":{},"body":{"dependencies.html":{}}}],["accessors",{"_index":401,"title":{},"body":{"injectables/ConfigService.html":{}}}],["account",{"_index":90,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["account(sessionclient",{"_index":248,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["account(this.adminclient",{"_index":179,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["account.createanonymoussession",{"_index":243,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["account.get",{"_index":250,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["action",{"_index":310,"title":{},"body":{"injectables/AppwriteSessionGuard.html":{}}}],["adminclient",{"_index":91,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["amazing",{"_index":707,"title":{},"body":{"index.html":{}}}],["anonymous",{"_index":327,"title":{},"body":{"controllers/AuthController.html":{}}}],["anonymoussession",{"_index":242,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["api",{"_index":175,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["apicookieauth",{"_index":357,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ReservationController.html":{},"controllers/UserController.html":{}}}],["apicookieauth('auth_token",{"_index":378,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ReservationController.html":{},"controllers/UserController.html":{}}}],["apioperation",{"_index":358,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ReservationController.html":{},"controllers/UserController.html":{}}}],["apioperation({summary",{"_index":325,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ReservationController.html":{},"controllers/UserController.html":{}}}],["apiproperty",{"_index":467,"title":{},"body":{"classes/CreateReservationDto.html":{},"classes/RegisterUserDto.html":{}}}],["apiproperty({example",{"_index":447,"title":{},"body":{"classes/CreateReservationDto.html":{},"classes/RegisterUserDto.html":{}}}],["apiresponse",{"_index":359,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ReservationController.html":{},"controllers/UserController.html":{}}}],["app",{"_index":685,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":49,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["applications",{"_index":677,"title":{},"body":{"index.html":{}}}],["applydecorators",{"_index":282,"title":{},"body":{"injectables/AppwriteSessionGuard.html":{},"miscellaneous/variables.html":{}}}],["appmodule",{"_index":29,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":18,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["appwrite",{"_index":156,"title":{},"body":{"injectables/AppwriteService.html":{},"classes/Reservation.html":{},"dependencies.html":{}}}],["appwrite.service",{"_index":86,"title":{},"body":{"modules/AppwriteModule.html":{}}}],["appwrite_api_key",{"_index":181,"title":{},"body":{"injectables/AppwriteService.html":{},"injectables/ConfigService.html":{},"interfaces/envConfig.html":{}}}],["appwrite_endpoint",{"_index":180,"title":{},"body":{"injectables/AppwriteService.html":{},"injectables/ConfigService.html":{},"interfaces/envConfig.html":{}}}],["appwrite_project_id",{"_index":182,"title":{},"body":{"injectables/AppwriteService.html":{},"injectables/ConfigService.html":{},"interfaces/envConfig.html":{}}}],["appwriteconfig",{"_index":162,"title":{},"body":{"injectables/AppwriteService.html":{},"injectables/ConfigService.html":{},"interfaces/envConfig.html":{}}}],["appwritemodule",{"_index":51,"title":{"modules/AppwriteModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AppwriteModule.html":{},"modules/AuthModule.html":{},"modules/ReservationModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["appwriteservice",{"_index":84,"title":{"injectables/AppwriteService.html":{}},"body":{"modules/AppwriteModule.html":{},"injectables/AppwriteService.html":{},"injectables/AppwriteSessionGuard.html":{},"injectables/AuthService.html":{},"injectables/ReservationRepository.html":{},"coverage.html":{},"overview.html":{}}}],["appwritesessionguard",{"_index":272,"title":{"injectables/AppwriteSessionGuard.html":{}},"body":{"injectables/AppwriteSessionGuard.html":{},"modules/AuthModule.html":{},"coverage.html":{},"overview.html":{}}}],["array",{"_index":484,"title":{},"body":{"classes/CreateReservationDto.html":{}}}],["array})@isarray()@isstring({each",{"_index":457,"title":{},"body":{"classes/CreateReservationDto.html":{}}}],["async",{"_index":97,"title":{},"body":{"injectables/AppwriteService.html":{},"injectables/AppwriteSessionGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ReservationController.html":{},"injectables/ReservationRepository.html":{}}}],["auth.controller",{"_index":389,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":355,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":55,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":320,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authmodule",{"_index":40,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":717,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authservice",{"_index":354,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["available",{"_index":311,"title":{},"body":{"injectables/AppwriteSessionGuard.html":{}}}],["await",{"_index":193,"title":{},"body":{"injectables/AppwriteService.html":{},"injectables/AppwriteSessionGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ReservationController.html":{},"injectables/ReservationRepository.html":{}}}],["backers",{"_index":708,"title":{},"body":{"index.html":{}}}],["behalf",{"_index":540,"title":{},"body":{"controllers/ReservationController.html":{}}}],["body",{"_index":339,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ReservationController.html":{}}}],["boolean",{"_index":293,"title":{},"body":{"injectables/AppwriteSessionGuard.html":{},"miscellaneous/variables.html":{}}}],["bootstrap",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"modules/AppwriteModule.html":{},"modules/AuthModule.html":{},"modules/ReservationModule.html":{},"modules/SharedModule.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":727,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":725,"title":{},"body":{"modules.html":{}}}],["building",{"_index":673,"title":{},"body":{"index.html":{}}}],["c.name",{"_index":202,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["canactivate",{"_index":274,"title":{},"body":{"injectables/AppwriteSessionGuard.html":{}}}],["canactivate(context",{"_index":278,"title":{},"body":{"injectables/AppwriteSessionGuard.html":{}}}],["catch(error",{"_index":316,"title":{},"body":{"injectables/AppwriteSessionGuard.html":{}}}],["class",{"_index":21,"title":{"classes/CreateReservationDto.html":{},"classes/RegisterUserDto.html":{},"classes/Reservation.html":{},"classes/UpdateReservationDto.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AppwriteModule.html":{},"injectables/AppwriteService.html":{},"injectables/AppwriteSessionGuard.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/ConfigService.html":{},"injectables/ContextService.html":{},"classes/CreateReservationDto.html":{},"injectables/HeleprsService.html":{},"classes/RegisterUserDto.html":{},"classes/Reservation.html":{},"controllers/ReservationController.html":{},"modules/ReservationModule.html":{},"injectables/ReservationRepository.html":{},"injectables/ReservationService.html":{},"modules/SharedModule.html":{},"classes/UpdateReservationDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"interfaces/envConfig.html":{}}}],["classes",{"_index":444,"title":{},"body":{"classes/CreateReservationDto.html":{},"classes/RegisterUserDto.html":{},"classes/Reservation.html":{},"classes/UpdateReservationDto.html":{},"overview.html":{}}}],["client",{"_index":139,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["cls",{"_index":58,"title":{},"body":{"modules/AppModule.html":{},"injectables/ContextService.html":{},"modules/SharedModule.html":{},"dependencies.html":{}}}],["clsmodule",{"_index":56,"title":{},"body":{"modules/AppModule.html":{},"modules/SharedModule.html":{}}}],["clsmodule.forroot",{"_index":62,"title":{},"body":{"modules/AppModule.html":{}}}],["clsservice",{"_index":432,"title":{},"body":{"injectables/ContextService.html":{}}}],["cluster_appmodule",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appwritemodule",{"_index":81,"title":{},"body":{"modules/AppwriteModule.html":{},"overview.html":{}}}],["cluster_appwritemodule_exports",{"_index":82,"title":{},"body":{"modules/AppwriteModule.html":{},"overview.html":{}}}],["cluster_appwritemodule_providers",{"_index":83,"title":{},"body":{"modules/AppwriteModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":385,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":386,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":387,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_reservationmodule",{"_index":570,"title":{},"body":{"modules/ReservationModule.html":{},"overview.html":{}}}],["cluster_reservationmodule_imports",{"_index":571,"title":{},"body":{"modules/ReservationModule.html":{}}}],["cluster_reservationmodule_providers",{"_index":572,"title":{},"body":{"modules/ReservationModule.html":{},"overview.html":{}}}],["cluster_sharedmodule",{"_index":598,"title":{},"body":{"modules/SharedModule.html":{},"overview.html":{}}}],["cluster_sharedmodule_exports",{"_index":599,"title":{},"body":{"modules/SharedModule.html":{},"overview.html":{}}}],["cluster_sharedmodule_providers",{"_index":600,"title":{},"body":{"modules/SharedModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":626,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_imports",{"_index":628,"title":{},"body":{"modules/UserModule.html":{}}}],["cluster_usermodule_providers",{"_index":627,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["collection",{"_index":132,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["collectionid",{"_index":501,"title":{},"body":{"classes/Reservation.html":{}}}],["collectionname",{"_index":118,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["collectionname).$id",{"_index":208,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["collections",{"_index":197,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["collections.collections.find(c",{"_index":201,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["config/config.service",{"_index":604,"title":{},"body":{"modules/SharedModule.html":{}}}],["configmodule",{"_index":53,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":61,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":108,"title":{"injectables/ConfigService.html":{}},"body":{"injectables/AppwriteService.html":{},"injectables/ConfigService.html":{},"modules/SharedModule.html":{},"coverage.html":{},"interfaces/envConfig.html":{},"overview.html":{}}}],["configuration",{"_index":168,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["console.log(\"creating",{"_index":192,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["console.log(\"database",{"_index":212,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["console.log(\"databaseid",{"_index":191,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["console.log(`collection",{"_index":205,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["console.log(error",{"_index":317,"title":{},"body":{"injectables/AppwriteSessionGuard.html":{}}}],["const",{"_index":161,"title":{},"body":{"injectables/AppwriteService.html":{},"injectables/AppwriteSessionGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ContextService.html":{},"controllers/ReservationController.html":{},"injectables/ReservationRepository.html":{},"injectables/ReservationService.html":{},"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":106,"title":{},"body":{"injectables/AppwriteService.html":{},"injectables/AppwriteSessionGuard.html":{},"injectables/AuthService.html":{},"injectables/ConfigService.html":{},"injectables/ContextService.html":{},"classes/Reservation.html":{},"injectables/ReservationRepository.html":{},"injectables/ReservationService.html":{},"interfaces/envConfig.html":{}}}],["constructor(appwriteservice",{"_index":392,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ReservationRepository.html":{}}}],["constructor(clsservice",{"_index":431,"title":{},"body":{"injectables/ContextService.html":{}}}],["constructor(configservice",{"_index":107,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["constructor(obj",{"_index":505,"title":{},"body":{"classes/Reservation.html":{}}}],["constructor(private",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppwriteService.html":{},"injectables/AppwriteSessionGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ContextService.html":{},"controllers/ReservationController.html":{},"injectables/ReservationRepository.html":{},"injectables/ReservationService.html":{},"controllers/UserController.html":{}}}],["constructor(reflector",{"_index":275,"title":{},"body":{"injectables/AppwriteSessionGuard.html":{}}}],["constructor(reservationrepository",{"_index":589,"title":{},"body":{"injectables/ReservationService.html":{}}}],["context",{"_index":281,"title":{},"body":{"injectables/AppwriteSessionGuard.html":{}}}],["context.getclass",{"_index":302,"title":{},"body":{"injectables/AppwriteSessionGuard.html":{}}}],["context.gethandler",{"_index":301,"title":{},"body":{"injectables/AppwriteSessionGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":297,"title":{},"body":{"injectables/AppwriteSessionGuard.html":{}}}],["context/context.service",{"_index":288,"title":{},"body":{"injectables/AppwriteSessionGuard.html":{},"modules/SharedModule.html":{}}}],["contextkeys",{"_index":438,"title":{},"body":{"injectables/ContextService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["contextkeys)[keyof",{"_index":440,"title":{},"body":{"injectables/ContextService.html":{}}}],["contextservice",{"_index":109,"title":{"injectables/ContextService.html":{}},"body":{"injectables/AppwriteService.html":{},"injectables/AppwriteSessionGuard.html":{},"injectables/ContextService.html":{},"modules/SharedModule.html":{},"coverage.html":{},"overview.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ReservationController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ReservationController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["controller('user",{"_index":623,"title":{},"body":{"controllers/UserController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AppwriteModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/ReservationController.html":{},"modules/ReservationModule.html":{},"modules/SharedModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["cookie",{"_index":624,"title":{},"body":{"controllers/UserController.html":{},"dependencies.html":{}}}],["cookie'})@apiresponse({status",{"_index":617,"title":{},"body":{"controllers/UserController.html":{}}}],["coverage",{"_index":632,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":537,"title":{},"body":{"controllers/ReservationController.html":{},"injectables/ReservationRepository.html":{},"injectables/ReservationService.html":{},"classes/UpdateReservationDto.html":{}}}],["create(@req",{"_index":561,"title":{},"body":{"controllers/ReservationController.html":{}}}],["create(request",{"_index":539,"title":{},"body":{"controllers/ReservationController.html":{}}}],["create(reservation",{"_index":580,"title":{},"body":{"injectables/ReservationRepository.html":{}}}],["create(userid",{"_index":591,"title":{},"body":{"injectables/ReservationService.html":{}}}],["createanonymoussession",{"_index":98,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["createcollection",{"_index":99,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["createcollection(collectionname",{"_index":116,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["createcollectionresponse",{"_index":213,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["createcollectionresponse.$id",{"_index":224,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["created",{"_index":206,"title":{},"body":{"injectables/AppwriteService.html":{},"controllers/AuthController.html":{},"controllers/ReservationController.html":{}}}],["createdat",{"_index":502,"title":{},"body":{"classes/Reservation.html":{}}}],["createdatabase",{"_index":100,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["createreservationdto",{"_index":443,"title":{"classes/CreateReservationDto.html":{}},"body":{"classes/CreateReservationDto.html":{},"controllers/ReservationController.html":{},"injectables/ReservationService.html":{},"classes/UpdateReservationDto.html":{},"coverage.html":{}}}],["creates",{"_index":326,"title":{},"body":{"controllers/AuthController.html":{}}}],["current",{"_index":541,"title":{},"body":{"controllers/ReservationController.html":{}}}],["currentuser",{"_index":249,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["currentuser.email",{"_index":259,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["currentuser.name",{"_index":256,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["currentuser.password",{"_index":262,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["data",{"_index":135,"title":{},"body":{"injectables/AppwriteService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/UserController.html":{}}}],["data'})@apiresponse({status",{"_index":343,"title":{},"body":{"controllers/AuthController.html":{}}}],["data.email",{"_index":260,"title":{},"body":{"injectables/AppwriteService.html":{},"injectables/AuthService.html":{}}}],["data.name",{"_index":257,"title":{},"body":{"injectables/AppwriteService.html":{},"injectables/AuthService.html":{}}}],["data.password",{"_index":263,"title":{},"body":{"injectables/AppwriteService.html":{},"injectables/AuthService.html":{}}}],["database",{"_index":92,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["databaseid",{"_index":93,"title":{},"body":{"injectables/AppwriteService.html":{},"injectables/ConfigService.html":{},"classes/Reservation.html":{},"interfaces/envConfig.html":{}}}],["databases",{"_index":94,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["databases(this.adminclient",{"_index":188,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["date",{"_index":225,"title":{},"body":{"injectables/AppwriteService.html":{},"classes/CreateReservationDto.html":{},"classes/Reservation.html":{},"controllers/ReservationController.html":{}}}],["date(`${this.date}t${this.time}:00",{"_index":533,"title":{},"body":{"classes/Reservation.html":{}}}],["date(session.expire",{"_index":374,"title":{},"body":{"controllers/AuthController.html":{}}}],["dateattributeresponse",{"_index":222,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["datetime",{"_index":231,"title":{},"body":{"injectables/AppwriteService.html":{},"classes/Reservation.html":{}}}],["datetimeattributeresponse",{"_index":229,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["db",{"_index":402,"title":{},"body":{"injectables/ConfigService.html":{},"interfaces/envConfig.html":{}}}],["declarations",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"modules/AppwriteModule.html":{},"modules/AuthModule.html":{},"modules/ReservationModule.html":{},"modules/SharedModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["decorators",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/CreateReservationDto.html":{},"classes/RegisterUserDto.html":{},"controllers/ReservationController.html":{},"controllers/UserController.html":{}}}],["default",{"_index":145,"title":{},"body":{"injectables/AppwriteService.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":13,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AppwriteService.html":{},"injectables/AppwriteSessionGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ConfigService.html":{},"injectables/ContextService.html":{},"classes/CreateReservationDto.html":{},"classes/RegisterUserDto.html":{},"classes/Reservation.html":{},"controllers/ReservationController.html":{},"injectables/ReservationRepository.html":{},"injectables/ReservationService.html":{},"controllers/UserController.html":{}}}],["delete",{"_index":553,"title":{},"body":{"controllers/ReservationController.html":{}}}],["dependencies",{"_index":31,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AppwriteModule.html":{},"modules/AuthModule.html":{},"modules/ReservationModule.html":{},"modules/SharedModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":329,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ReservationController.html":{},"controllers/UserController.html":{},"index.html":{},"properties.html":{}}}],["development",{"_index":686,"title":{},"body":{"index.html":{}}}],["document",{"_index":128,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["documentation",{"_index":633,"title":{},"body":{"coverage.html":{}}}],["doe",{"_index":494,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["dto/create",{"_index":556,"title":{},"body":{"controllers/ReservationController.html":{},"injectables/ReservationService.html":{}}}],["dto/register",{"_index":361,"title":{},"body":{"controllers/AuthController.html":{}}}],["dto/update",{"_index":595,"title":{},"body":{"injectables/ReservationService.html":{}}}],["e2e",{"_index":697,"title":{},"body":{"index.html":{}}}],["each",{"_index":485,"title":{},"body":{"classes/CreateReservationDto.html":{}}}],["efficient",{"_index":674,"title":{},"body":{"index.html":{}}}],["email",{"_index":251,"title":{},"body":{"injectables/AppwriteService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/RegisterUserDto.html":{},"controllers/UserController.html":{}}}],["endpoint",{"_index":171,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["entities/reservation.entity",{"_index":584,"title":{},"body":{"injectables/ReservationRepository.html":{},"injectables/ReservationService.html":{}}}],["envconfig",{"_index":416,"title":{"interfaces/envConfig.html":{}},"body":{"injectables/ConfigService.html":{},"coverage.html":{},"interfaces/envConfig.html":{}}}],["error",{"_index":319,"title":{},"body":{"injectables/AppwriteSessionGuard.html":{},"controllers/AuthController.html":{},"controllers/ReservationController.html":{},"controllers/UserController.html":{}}}],["error'})@apicookieauth('auth_token')@sessionguard()@get",{"_index":619,"title":{},"body":{"controllers/UserController.html":{}}}],["error'})@apicookieauth('auth_token')@sessionguard()@post('/register",{"_index":349,"title":{},"body":{"controllers/AuthController.html":{}}}],["error'})@apicookieauth('auth_token')@sessionguard({onlyregistereduser",{"_index":543,"title":{},"body":{"controllers/ReservationController.html":{}}}],["error'})@post('/login",{"_index":336,"title":{},"body":{"controllers/AuthController.html":{}}}],["error('appwrite",{"_index":167,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["error('unauthorized",{"_index":304,"title":{},"body":{"injectables/AppwriteSessionGuard.html":{}}}],["example",{"_index":479,"title":{},"body":{"classes/CreateReservationDto.html":{},"classes/RegisterUserDto.html":{},"index.html":{}}}],["executioncontext",{"_index":279,"title":{},"body":{"injectables/AppwriteSessionGuard.html":{}}}],["expires",{"_index":373,"title":{},"body":{"controllers/AuthController.html":{}}}],["export",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AppwriteModule.html":{},"injectables/AppwriteService.html":{},"injectables/AppwriteSessionGuard.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/ConfigService.html":{},"injectables/ContextService.html":{},"classes/CreateReservationDto.html":{},"injectables/HeleprsService.html":{},"classes/RegisterUserDto.html":{},"classes/Reservation.html":{},"controllers/ReservationController.html":{},"modules/ReservationModule.html":{},"injectables/ReservationRepository.html":{},"injectables/ReservationService.html":{},"modules/SharedModule.html":{},"classes/UpdateReservationDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"interfaces/envConfig.html":{}}}],["exports",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"modules/AppwriteModule.html":{},"modules/AuthModule.html":{},"modules/ReservationModule.html":{},"modules/SharedModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["express",{"_index":286,"title":{},"body":{"injectables/AppwriteSessionGuard.html":{},"controllers/AuthController.html":{},"controllers/ReservationController.html":{},"dependencies.html":{}}}],["extends",{"_index":607,"title":{},"body":{"classes/UpdateReservationDto.html":{}}}],["false",{"_index":239,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AppwriteModule.html":{},"injectables/AppwriteService.html":{},"injectables/AppwriteSessionGuard.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/ConfigService.html":{},"injectables/ContextService.html":{},"classes/CreateReservationDto.html":{},"injectables/HeleprsService.html":{},"classes/RegisterUserDto.html":{},"classes/Reservation.html":{},"controllers/ReservationController.html":{},"modules/ReservationModule.html":{},"injectables/ReservationRepository.html":{},"injectables/ReservationService.html":{},"modules/SharedModule.html":{},"classes/UpdateReservationDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"interfaces/envConfig.html":{}}}],["for(let",{"_index":199,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["format",{"_index":465,"title":{},"body":{"classes/CreateReservationDto.html":{}}}],["framework",{"_index":672,"title":{},"body":{"index.html":{}}}],["function",{"_index":642,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":666,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generate",{"_index":602,"title":{},"body":{"modules/SharedModule.html":{}}}],["get('/health",{"_index":12,"title":{},"body":{"controllers/AppController.html":{}}}],["get('/reservations",{"_index":567,"title":{},"body":{"controllers/ReservationController.html":{}}}],["get(key",{"_index":405,"title":{},"body":{"injectables/ConfigService.html":{},"injectables/ContextService.html":{},"interfaces/envConfig.html":{}}}],["getalluserreservations",{"_index":578,"title":{},"body":{"injectables/ReservationRepository.html":{},"injectables/ReservationService.html":{}}}],["getalluserreservations(userid",{"_index":582,"title":{},"body":{"injectables/ReservationRepository.html":{},"injectables/ReservationService.html":{}}}],["getalluserresevations",{"_index":101,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["getalluserresevations(userid",{"_index":120,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["getallusersreservations",{"_index":538,"title":{},"body":{"controllers/ReservationController.html":{}}}],["getallusersreservations(@req",{"_index":568,"title":{},"body":{"controllers/ReservationController.html":{}}}],["getallusersreservations(request",{"_index":546,"title":{},"body":{"controllers/ReservationController.html":{}}}],["getappwriteconfig",{"_index":411,"title":{},"body":{"injectables/ConfigService.html":{}}}],["getdb",{"_index":409,"title":{},"body":{"injectables/ConfigService.html":{}}}],["getglobalconfig",{"_index":413,"title":{},"body":{"injectables/ConfigService.html":{}}}],["getport",{"_index":400,"title":{},"body":{"injectables/ConfigService.html":{},"interfaces/envConfig.html":{}}}],["getserverhealth",{"_index":70,"title":{},"body":{"injectables/AppService.html":{}}}],["getting",{"_index":668,"title":{"index.html":{}},"body":{}}],["getuser",{"_index":615,"title":{},"body":{"controllers/UserController.html":{}}}],["getuser(@req",{"_index":625,"title":{},"body":{"controllers/UserController.html":{}}}],["getuser(request",{"_index":616,"title":{},"body":{"controllers/UserController.html":{}}}],["getuserfromsessionsecret",{"_index":102,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["getuserfromsessionsecret(secret",{"_index":123,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["global",{"_index":63,"title":{},"body":{"modules/AppModule.html":{},"modules/SharedModule.html":{}}}],["globalconfig",{"_index":403,"title":{},"body":{"injectables/ConfigService.html":{},"interfaces/envConfig.html":{}}}],["grow",{"_index":703,"title":{},"body":{"index.html":{}}}],["health",{"_index":9,"title":{},"body":{"controllers/AppController.html":{}}}],["heleprsservice",{"_index":486,"title":{"injectables/HeleprsService.html":{}},"body":{"injectables/HeleprsService.html":{},"modules/SharedModule.html":{},"coverage.html":{},"overview.html":{}}}],["helpers/helpers.service",{"_index":605,"title":{},"body":{"modules/SharedModule.html":{}}}],["here",{"_index":714,"title":{},"body":{"index.html":{}}}],["hh:mm",{"_index":464,"title":{},"body":{"classes/CreateReservationDto.html":{}}}],["host",{"_index":423,"title":{},"body":{"injectables/ConfigService.html":{},"interfaces/envConfig.html":{}}}],["httponly",{"_index":370,"title":{},"body":{"controllers/AuthController.html":{}}}],["https://cloud.appwrite.io/v1",{"_index":420,"title":{},"body":{"injectables/ConfigService.html":{},"interfaces/envConfig.html":{}}}],["https://nestjs.com",{"_index":721,"title":{},"body":{"index.html":{}}}],["id",{"_index":148,"title":{},"body":{"injectables/AppwriteService.html":{},"classes/Reservation.html":{},"controllers/ReservationController.html":{}}}],["id.unique",{"_index":217,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["identifier",{"_index":634,"title":{},"body":{"coverage.html":{}}}],["if(!appwriteconfig",{"_index":164,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["if(!appwriteconfig.appwrite_api_key",{"_index":174,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["if(!appwriteconfig.appwrite_endpoint",{"_index":170,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["if(!appwriteconfig.appwrite_project_id",{"_index":172,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["if(!collection",{"_index":203,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["if(!token",{"_index":303,"title":{},"body":{"injectables/AppwriteSessionGuard.html":{}}}],["if(!user",{"_index":307,"title":{},"body":{"injectables/AppwriteSessionGuard.html":{}}}],["if(collectionname",{"_index":215,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["if(error.message.startswith('unauthorized",{"_index":318,"title":{},"body":{"injectables/AppwriteSessionGuard.html":{}}}],["if(onlyregistereduser",{"_index":308,"title":{},"body":{"injectables/AppwriteSessionGuard.html":{}}}],["if(options?.onlyregistereduser",{"_index":294,"title":{},"body":{"injectables/AppwriteSessionGuard.html":{},"miscellaneous/variables.html":{}}}],["if(this.datetime",{"_index":534,"title":{},"body":{"classes/Reservation.html":{}}}],["implements",{"_index":160,"title":{},"body":{"injectables/AppwriteService.html":{},"classes/Reservation.html":{}}}],["import",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AppwriteModule.html":{},"injectables/AppwriteService.html":{},"injectables/AppwriteSessionGuard.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/ConfigService.html":{},"injectables/ContextService.html":{},"classes/CreateReservationDto.html":{},"injectables/HeleprsService.html":{},"classes/RegisterUserDto.html":{},"classes/Reservation.html":{},"controllers/ReservationController.html":{},"modules/ReservationModule.html":{},"injectables/ReservationRepository.html":{},"injectables/ReservationService.html":{},"modules/SharedModule.html":{},"classes/UpdateReservationDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"interfaces/envConfig.html":{}}}],["imports",{"_index":48,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ReservationModule.html":{},"modules/SharedModule.html":{},"modules/UserModule.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AppwriteService.html":{},"injectables/AppwriteSessionGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ConfigService.html":{},"injectables/ContextService.html":{},"classes/CreateReservationDto.html":{},"classes/RegisterUserDto.html":{},"classes/Reservation.html":{},"controllers/ReservationController.html":{},"injectables/ReservationRepository.html":{},"injectables/ReservationService.html":{},"controllers/UserController.html":{},"interfaces/envConfig.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AppwriteModule.html":{},"injectables/AppwriteService.html":{},"injectables/AppwriteSessionGuard.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/ConfigService.html":{},"injectables/ContextService.html":{},"classes/CreateReservationDto.html":{},"injectables/HeleprsService.html":{},"classes/RegisterUserDto.html":{},"classes/Reservation.html":{},"controllers/ReservationController.html":{},"modules/ReservationModule.html":{},"injectables/ReservationRepository.html":{},"injectables/ReservationService.html":{},"modules/SharedModule.html":{},"classes/UpdateReservationDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"interfaces/envConfig.html":{}}}],["injectable",{"_index":67,"title":{"injectables/AppService.html":{},"injectables/AppwriteService.html":{},"injectables/AppwriteSessionGuard.html":{},"injectables/AuthService.html":{},"injectables/ConfigService.html":{},"injectables/ContextService.html":{},"injectables/HeleprsService.html":{},"injectables/ReservationRepository.html":{},"injectables/ReservationService.html":{},"injectables/UserService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AppwriteService.html":{},"injectables/AppwriteSessionGuard.html":{},"injectables/AuthService.html":{},"injectables/ConfigService.html":{},"injectables/ContextService.html":{},"injectables/HeleprsService.html":{},"injectables/ReservationRepository.html":{},"injectables/ReservationService.html":{},"injectables/UserService.html":{},"coverage.html":{},"interfaces/envConfig.html":{}}}],["injectables",{"_index":68,"title":{},"body":{"injectables/AppService.html":{},"injectables/AppwriteService.html":{},"injectables/AppwriteSessionGuard.html":{},"injectables/AuthService.html":{},"injectables/ConfigService.html":{},"injectables/ContextService.html":{},"injectables/HeleprsService.html":{},"injectables/ReservationRepository.html":{},"injectables/ReservationService.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["inside",{"_index":483,"title":{},"body":{"classes/CreateReservationDto.html":{}}}],["installation",{"_index":682,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":684,"title":{},"body":{"index.html":{}}}],["integrations/appwrite/appwrite.module",{"_index":52,"title":{},"body":{"modules/AppModule.html":{}}}],["interface",{"_index":415,"title":{"interfaces/envConfig.html":{}},"body":{"injectables/ConfigService.html":{},"coverage.html":{},"interfaces/envConfig.html":{},"overview.html":{}}}],["interfaces",{"_index":664,"title":{},"body":{"interfaces/envConfig.html":{}}}],["internal",{"_index":334,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ReservationController.html":{},"controllers/UserController.html":{}}}],["invalid",{"_index":345,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ReservationController.html":{}}}],["isarray",{"_index":477,"title":{},"body":{"classes/CreateReservationDto.html":{}}}],["isdatestring",{"_index":471,"title":{},"body":{"classes/CreateReservationDto.html":{}}}],["isemail",{"_index":499,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["isint",{"_index":473,"title":{},"body":{"classes/CreateReservationDto.html":{}}}],["isnotempty",{"_index":470,"title":{},"body":{"classes/CreateReservationDto.html":{}}}],["isoptional",{"_index":476,"title":{},"body":{"classes/CreateReservationDto.html":{}}}],["isstring",{"_index":475,"title":{},"body":{"classes/CreateReservationDto.html":{},"classes/RegisterUserDto.html":{}}}],["john",{"_index":493,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["join",{"_index":710,"title":{},"body":{"index.html":{}}}],["kamil",{"_index":718,"title":{},"body":{"index.html":{}}}],["key",{"_index":176,"title":{},"body":{"injectables/AppwriteService.html":{},"injectables/ConfigService.html":{},"injectables/ContextService.html":{}}}],["keyof",{"_index":265,"title":{},"body":{"injectables/AppwriteService.html":{},"injectables/ConfigService.html":{},"interfaces/envConfig.html":{}}}],["legend",{"_index":32,"title":{},"body":{"modules/AppModule.html":{},"modules/AppwriteModule.html":{},"modules/AuthModule.html":{},"modules/ReservationModule.html":{},"modules/SharedModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["license",{"_index":724,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":701,"title":{},"body":{"index.html":{}}}],["literal",{"_index":136,"title":{},"body":{"injectables/AppwriteService.html":{},"injectables/AuthService.html":{},"classes/Reservation.html":{}}}],["login",{"_index":322,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["login(@res",{"_index":365,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(response",{"_index":324,"title":{},"body":{"controllers/AuthController.html":{}}}],["matches",{"_index":472,"title":{},"body":{"classes/CreateReservationDto.html":{}}}],["matches(/^([01]\\d|2[0",{"_index":480,"title":{},"body":{"classes/CreateReservationDto.html":{}}}],["matching",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AppwriteModule.html":{},"injectables/AppwriteService.html":{},"injectables/AppwriteSessionGuard.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/ConfigService.html":{},"injectables/ContextService.html":{},"classes/CreateReservationDto.html":{},"injectables/HeleprsService.html":{},"classes/RegisterUserDto.html":{},"classes/Reservation.html":{},"controllers/ReservationController.html":{},"modules/ReservationModule.html":{},"injectables/ReservationRepository.html":{},"injectables/ReservationService.html":{},"modules/SharedModule.html":{},"classes/UpdateReservationDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"interfaces/envConfig.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["message",{"_index":375,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateReservationDto.html":{},"controllers/ReservationController.html":{}}}],["metadata",{"_index":660,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AppwriteService.html":{},"injectables/AppwriteSessionGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ConfigService.html":{},"injectables/ContextService.html":{},"controllers/ReservationController.html":{},"injectables/ReservationRepository.html":{},"injectables/ReservationService.html":{},"controllers/UserController.html":{}}}],["middleware",{"_index":65,"title":{},"body":{"modules/AppModule.html":{}}}],["min",{"_index":474,"title":{},"body":{"classes/CreateReservationDto.html":{}}}],["min(1",{"_index":481,"title":{},"body":{"classes/CreateReservationDto.html":{}}}],["miscellaneous",{"_index":665,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["missing",{"_index":169,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["mit",{"_index":700,"title":{},"body":{"index.html":{}}}],["mode",{"_index":690,"title":{},"body":{"index.html":{}}}],["models",{"_index":150,"title":{},"body":{"injectables/AppwriteService.html":{},"classes/Reservation.html":{}}}],["models.collection",{"_index":214,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["models.database",{"_index":141,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["models.document",{"_index":520,"title":{},"body":{"classes/Reservation.html":{}}}],["module",{"_index":28,"title":{"modules/AppModule.html":{},"modules/AppwriteModule.html":{},"modules/AuthModule.html":{},"modules/ReservationModule.html":{},"modules/SharedModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AppwriteModule.html":{},"modules/AuthModule.html":{},"modules/ReservationModule.html":{},"modules/SharedModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["modules",{"_index":30,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AppwriteModule.html":{},"modules/AuthModule.html":{},"modules/ReservationModule.html":{},"modules/SharedModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":713,"title":{},"body":{"index.html":{}}}],["mount",{"_index":66,"title":{},"body":{"modules/AppModule.html":{}}}],["myśliwiec",{"_index":719,"title":{},"body":{"index.html":{}}}],["name",{"_index":72,"title":{},"body":{"injectables/AppService.html":{},"injectables/AppwriteService.html":{},"injectables/AppwriteSessionGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ConfigService.html":{},"injectables/ContextService.html":{},"classes/RegisterUserDto.html":{},"classes/Reservation.html":{},"controllers/ReservationController.html":{},"injectables/ReservationRepository.html":{},"injectables/ReservationService.html":{},"controllers/UserController.html":{}}}],["name'})@apiresponse({status",{"_index":618,"title":{},"body":{"controllers/UserController.html":{}}}],["nest",{"_index":678,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":723,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":57,"title":{},"body":{"modules/AppModule.html":{},"injectables/ContextService.html":{},"modules/SharedModule.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AppwriteModule.html":{},"injectables/AppwriteService.html":{},"injectables/AppwriteSessionGuard.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/ConfigService.html":{},"injectables/ContextService.html":{},"injectables/HeleprsService.html":{},"controllers/ReservationController.html":{},"modules/ReservationModule.html":{},"injectables/ReservationRepository.html":{},"injectables/ReservationService.html":{},"modules/SharedModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{},"interfaces/envConfig.html":{}}}],["nestjs/config",{"_index":54,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":289,"title":{},"body":{"injectables/AppwriteSessionGuard.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":610,"title":{},"body":{"classes/UpdateReservationDto.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":651,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":360,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateReservationDto.html":{},"classes/RegisterUserDto.html":{},"controllers/ReservationController.html":{},"controllers/UserController.html":{},"dependencies.html":{}}}],["new",{"_index":166,"title":{},"body":{"injectables/AppwriteService.html":{},"injectables/AppwriteSessionGuard.html":{},"controllers/AuthController.html":{},"classes/Reservation.html":{},"injectables/ReservationService.html":{},"coverage.html":{}}}],["node",{"_index":155,"title":{},"body":{"injectables/AppwriteService.html":{},"classes/Reservation.html":{},"dependencies.html":{}}}],["node.js",{"_index":671,"title":{},"body":{"index.html":{}}}],["none",{"_index":372,"title":{},"body":{"controllers/AuthController.html":{}}}],["npm",{"_index":683,"title":{},"body":{"index.html":{}}}],["null",{"_index":240,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["number",{"_index":408,"title":{},"body":{"injectables/ConfigService.html":{},"classes/CreateReservationDto.html":{},"classes/Reservation.html":{},"interfaces/envConfig.html":{}}}],["numberofguests",{"_index":234,"title":{},"body":{"injectables/AppwriteService.html":{},"classes/CreateReservationDto.html":{},"classes/Reservation.html":{}}}],["numberofguestsattributeresponse",{"_index":232,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["number})@isint()@min(1",{"_index":454,"title":{},"body":{"classes/CreateReservationDto.html":{}}}],["obj",{"_index":507,"title":{},"body":{"classes/Reservation.html":{}}}],["obj.date",{"_index":523,"title":{},"body":{"classes/Reservation.html":{}}}],["obj.numberofguests",{"_index":527,"title":{},"body":{"classes/Reservation.html":{}}}],["obj.specialrequests",{"_index":529,"title":{},"body":{"classes/Reservation.html":{}}}],["obj.time",{"_index":525,"title":{},"body":{"classes/Reservation.html":{}}}],["obj.userid",{"_index":531,"title":{},"body":{"classes/Reservation.html":{}}}],["onlyregistereduser",{"_index":292,"title":{},"body":{"injectables/AppwriteSessionGuard.html":{},"miscellaneous/variables.html":{}}}],["onmoduleinit",{"_index":103,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["open",{"_index":702,"title":{},"body":{"index.html":{}}}],["optional",{"_index":113,"title":{},"body":{"injectables/AppwriteService.html":{},"injectables/AppwriteSessionGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ConfigService.html":{},"injectables/ContextService.html":{},"classes/Reservation.html":{},"controllers/ReservationController.html":{},"injectables/ReservationRepository.html":{},"injectables/ReservationService.html":{},"controllers/UserController.html":{}}}],["options",{"_index":291,"title":{},"body":{"injectables/AppwriteSessionGuard.html":{},"miscellaneous/variables.html":{}}}],["out",{"_index":46,"title":{},"body":{"modules/AppModule.html":{},"modules/AppwriteModule.html":{},"modules/AuthModule.html":{},"modules/ReservationModule.html":{},"modules/SharedModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["overview",{"_index":728,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":648,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["package.json",{"_index":77,"title":{},"body":{"injectables/AppService.html":{}}}],["packagejson",{"_index":76,"title":{},"body":{"injectables/AppService.html":{}}}],["packagejson.name",{"_index":78,"title":{},"body":{"injectables/AppService.html":{}}}],["packagejson.version",{"_index":79,"title":{},"body":{"injectables/AppService.html":{}}}],["param",{"_index":552,"title":{},"body":{"controllers/ReservationController.html":{}}}],["parameters",{"_index":111,"title":{},"body":{"injectables/AppwriteService.html":{},"injectables/AppwriteSessionGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ConfigService.html":{},"injectables/ContextService.html":{},"classes/Reservation.html":{},"controllers/ReservationController.html":{},"injectables/ReservationRepository.html":{},"injectables/ReservationService.html":{},"controllers/UserController.html":{}}}],["parser",{"_index":655,"title":{},"body":{"dependencies.html":{}}}],["partialtype",{"_index":609,"title":{},"body":{"classes/UpdateReservationDto.html":{}}}],["partialtype(createreservationdto",{"_index":608,"title":{},"body":{"classes/UpdateReservationDto.html":{}}}],["passthrough",{"_index":366,"title":{},"body":{"controllers/AuthController.html":{}}}],["password",{"_index":252,"title":{},"body":{"injectables/AppwriteService.html":{},"injectables/AuthService.html":{},"classes/RegisterUserDto.html":{}}}],["password123",{"_index":497,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["patch",{"_index":551,"title":{},"body":{"controllers/ReservationController.html":{}}}],["payload",{"_index":376,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ReservationController.html":{}}}],["payload'})@apiresponse({status",{"_index":346,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ReservationController.html":{}}}],["permission",{"_index":151,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["permission.create(role.users",{"_index":219,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["permission.delete(role.users",{"_index":221,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["permission.read(role.any",{"_index":218,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["permission.update(role.users",{"_index":220,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["permissions",{"_index":503,"title":{},"body":{"classes/Reservation.html":{}}}],["please",{"_index":711,"title":{},"body":{"index.html":{}}}],["port",{"_index":417,"title":{},"body":{"injectables/ConfigService.html":{},"interfaces/envConfig.html":{}}}],["post",{"_index":351,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ReservationController.html":{}}}],["post('/login",{"_index":364,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/register",{"_index":379,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/reservation",{"_index":560,"title":{},"body":{"controllers/ReservationController.html":{}}}],["prefix",{"_index":614,"title":{},"body":{"controllers/UserController.html":{}}}],["private",{"_index":89,"title":{},"body":{"injectables/AppwriteService.html":{},"injectables/AppwriteSessionGuard.html":{}}}],["process.env.app_host",{"_index":424,"title":{},"body":{"injectables/ConfigService.html":{},"interfaces/envConfig.html":{}}}],["process.env.app_port",{"_index":426,"title":{},"body":{"injectables/ConfigService.html":{},"interfaces/envConfig.html":{}}}],["process.env.appwrite_api_key",{"_index":422,"title":{},"body":{"injectables/ConfigService.html":{},"interfaces/envConfig.html":{}}}],["process.env.appwrite_database_id",{"_index":418,"title":{},"body":{"injectables/ConfigService.html":{},"interfaces/envConfig.html":{}}}],["process.env.appwrite_endpoint",{"_index":419,"title":{},"body":{"injectables/ConfigService.html":{},"interfaces/envConfig.html":{}}}],["process.env.appwrite_project_id",{"_index":421,"title":{},"body":{"injectables/ConfigService.html":{},"interfaces/envConfig.html":{}}}],["process.env.port",{"_index":428,"title":{},"body":{"injectables/ConfigService.html":{},"interfaces/envConfig.html":{}}}],["process.env[key",{"_index":429,"title":{},"body":{"injectables/ConfigService.html":{},"interfaces/envConfig.html":{}}}],["production",{"_index":692,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":670,"title":{},"body":{"index.html":{}}}],["project",{"_index":173,"title":{},"body":{"injectables/AppwriteService.html":{},"index.html":{}}}],["promise",{"_index":133,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["properties",{"_index":88,"title":{"properties.html":{}},"body":{"injectables/AppwriteService.html":{},"classes/CreateReservationDto.html":{},"classes/RegisterUserDto.html":{},"classes/Reservation.html":{},"interfaces/envConfig.html":{},"properties.html":{}}}],["providers",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"modules/AppwriteModule.html":{},"modules/AuthModule.html":{},"modules/ReservationModule.html":{},"modules/SharedModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["public",{"_index":96,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["query",{"_index":152,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["query.equal('userid",{"_index":271,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["read",{"_index":712,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppwriteService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ContextService.html":{},"controllers/ReservationController.html":{},"injectables/ReservationRepository.html":{},"injectables/ReservationService.html":{},"controllers/UserController.html":{}}}],["real",{"_index":342,"title":{},"body":{"controllers/AuthController.html":{}}}],["reflect",{"_index":659,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":276,"title":{},"body":{"injectables/AppwriteSessionGuard.html":{}}}],["register",{"_index":323,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["register(@req",{"_index":380,"title":{},"body":{"controllers/AuthController.html":{}}}],["register(request",{"_index":338,"title":{},"body":{"controllers/AuthController.html":{}}}],["register(userid",{"_index":395,"title":{},"body":{"injectables/AuthService.html":{}}}],["registered",{"_index":312,"title":{},"body":{"injectables/AppwriteSessionGuard.html":{},"controllers/AuthController.html":{}}}],["registereduser",{"_index":381,"title":{},"body":{"controllers/AuthController.html":{}}}],["registereduser.email",{"_index":384,"title":{},"body":{"controllers/AuthController.html":{}}}],["registereduser.name",{"_index":383,"title":{},"body":{"controllers/AuthController.html":{}}}],["registeruserdto",{"_index":340,"title":{"classes/RegisterUserDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/RegisterUserDto.html":{},"coverage.html":{}}}],["repository",{"_index":681,"title":{},"body":{"index.html":{}}}],["req",{"_index":352,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ReservationController.html":{},"controllers/UserController.html":{}}}],["request",{"_index":285,"title":{},"body":{"injectables/AppwriteSessionGuard.html":{},"controllers/AuthController.html":{},"controllers/ReservationController.html":{},"controllers/UserController.html":{}}}],["request.cookies['auth_token",{"_index":299,"title":{},"body":{"injectables/AppwriteSessionGuard.html":{}}}],["request.user",{"_index":313,"title":{},"body":{"injectables/AppwriteSessionGuard.html":{},"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["request.user.$id",{"_index":562,"title":{},"body":{"controllers/ReservationController.html":{}}}],["requiredcollectionsmap",{"_index":95,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["res",{"_index":353,"title":{},"body":{"controllers/AuthController.html":{}}}],["reservation",{"_index":129,"title":{"classes/Reservation.html":{}},"body":{"injectables/AppwriteService.html":{},"classes/Reservation.html":{},"controllers/ReservationController.html":{},"injectables/ReservationRepository.html":{},"injectables/ReservationService.html":{},"coverage.html":{}}}],["reservation'})@apiresponse({status",{"_index":542,"title":{},"body":{"controllers/ReservationController.html":{}}}],["reservation.$id",{"_index":564,"title":{},"body":{"controllers/ReservationController.html":{}}}],["reservation.controller",{"_index":575,"title":{},"body":{"modules/ReservationModule.html":{}}}],["reservation.date",{"_index":566,"title":{},"body":{"controllers/ReservationController.html":{}}}],["reservation.dto",{"_index":557,"title":{},"body":{"controllers/ReservationController.html":{},"injectables/ReservationService.html":{},"classes/UpdateReservationDto.html":{}}}],["reservation.dto.ts",{"_index":446,"title":{},"body":{"classes/CreateReservationDto.html":{},"classes/UpdateReservationDto.html":{},"coverage.html":{}}}],["reservation.dto.ts:16",{"_index":466,"title":{},"body":{"classes/CreateReservationDto.html":{}}}],["reservation.dto.ts:21",{"_index":455,"title":{},"body":{"classes/CreateReservationDto.html":{}}}],["reservation.dto.ts:27",{"_index":459,"title":{},"body":{"classes/CreateReservationDto.html":{}}}],["reservation.dto.ts:9",{"_index":452,"title":{},"body":{"classes/CreateReservationDto.html":{}}}],["reservation.repository",{"_index":576,"title":{},"body":{"modules/ReservationModule.html":{},"injectables/ReservationService.html":{}}}],["reservation.service",{"_index":555,"title":{},"body":{"controllers/ReservationController.html":{},"modules/ReservationModule.html":{}}}],["reservation.time",{"_index":565,"title":{},"body":{"controllers/ReservationController.html":{}}}],["reservationcontroller",{"_index":535,"title":{"controllers/ReservationController.html":{}},"body":{"controllers/ReservationController.html":{},"modules/ReservationModule.html":{},"coverage.html":{}}}],["reservationmodule",{"_index":41,"title":{"modules/ReservationModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ReservationModule.html":{},"modules.html":{},"overview.html":{}}}],["reservationrepository",{"_index":573,"title":{"injectables/ReservationRepository.html":{}},"body":{"modules/ReservationModule.html":{},"injectables/ReservationRepository.html":{},"injectables/ReservationService.html":{},"coverage.html":{},"overview.html":{}}}],["reservations",{"_index":147,"title":{},"body":{"injectables/AppwriteService.html":{},"controllers/ReservationController.html":{},"injectables/ReservationRepository.html":{}}}],["reservations'})@apiresponse({status",{"_index":548,"title":{},"body":{"controllers/ReservationController.html":{}}}],["reservationservice",{"_index":554,"title":{"injectables/ReservationService.html":{}},"body":{"controllers/ReservationController.html":{},"modules/ReservationModule.html":{},"injectables/ReservationService.html":{},"coverage.html":{},"overview.html":{}}}],["reset",{"_index":45,"title":{},"body":{"modules/AppModule.html":{},"modules/AppwriteModule.html":{},"modules/AuthModule.html":{},"modules/ReservationModule.html":{},"modules/SharedModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["resources/reservation/reservation.module",{"_index":60,"title":{},"body":{"modules/AppModule.html":{}}}],["resources/user/user.module",{"_index":59,"title":{},"body":{"modules/AppModule.html":{}}}],["response",{"_index":209,"title":{},"body":{"injectables/AppwriteService.html":{},"controllers/AuthController.html":{}}}],["response.$id",{"_index":211,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["response.cookie('auth_token",{"_index":368,"title":{},"body":{"controllers/AuthController.html":{}}}],["results",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AppwriteModule.html":{},"injectables/AppwriteService.html":{},"injectables/AppwriteSessionGuard.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/ConfigService.html":{},"injectables/ContextService.html":{},"classes/CreateReservationDto.html":{},"injectables/HeleprsService.html":{},"classes/RegisterUserDto.html":{},"classes/Reservation.html":{},"controllers/ReservationController.html":{},"modules/ReservationModule.html":{},"injectables/ReservationRepository.html":{},"injectables/ReservationService.html":{},"modules/SharedModule.html":{},"classes/UpdateReservationDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"interfaces/envConfig.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AppwriteService.html":{},"injectables/AppwriteSessionGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ConfigService.html":{},"injectables/ContextService.html":{},"controllers/ReservationController.html":{},"injectables/ReservationRepository.html":{},"injectables/ReservationService.html":{},"controllers/UserController.html":{},"interfaces/envConfig.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AppwriteService.html":{},"injectables/AppwriteSessionGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ConfigService.html":{},"injectables/ContextService.html":{},"controllers/ReservationController.html":{},"injectables/ReservationRepository.html":{},"injectables/ReservationService.html":{},"controllers/UserController.html":{}}}],["role",{"_index":153,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["run",{"_index":687,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":662,"title":{},"body":{"dependencies.html":{}}}],["samesite",{"_index":371,"title":{},"body":{"controllers/AuthController.html":{}}}],["savedocument",{"_index":104,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["savedocument(collection",{"_index":127,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["savedreservation",{"_index":586,"title":{},"body":{"injectables/ReservationRepository.html":{}}}],["scalable",{"_index":675,"title":{},"body":{"index.html":{}}}],["secret",{"_index":125,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["server",{"_index":335,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ReservationController.html":{},"controllers/UserController.html":{},"index.html":{}}}],["session",{"_index":328,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ReservationController.html":{},"controllers/UserController.html":{}}}],["session'})@apiresponse({status",{"_index":330,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ReservationController.html":{}}}],["session.secret",{"_index":369,"title":{},"body":{"controllers/AuthController.html":{}}}],["sessionclient",{"_index":244,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["sessionclient.setsession(secret",{"_index":247,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["sessionguard",{"_index":290,"title":{},"body":{"injectables/AppwriteSessionGuard.html":{},"controllers/AuthController.html":{},"controllers/ReservationController.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["sessionguard({onlyregistereduser",{"_index":559,"title":{},"body":{"controllers/ReservationController.html":{}}}],["sessionsecret",{"_index":439,"title":{},"body":{"injectables/ContextService.html":{},"miscellaneous/variables.html":{}}}],["set",{"_index":186,"title":{},"body":{"injectables/AppwriteService.html":{},"injectables/ContextService.html":{}}}],["set(key",{"_index":435,"title":{},"body":{"injectables/ContextService.html":{}}}],["setendpoint(appwrite_endpoint",{"_index":183,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["setendpoint(this.configservice.appwriteconfig.appwrite_endpoint",{"_index":245,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["setkey(appwrite_api_key",{"_index":185,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["setmetadata",{"_index":283,"title":{},"body":{"injectables/AppwriteSessionGuard.html":{}}}],["setmetadata('onlyregistereduser",{"_index":295,"title":{},"body":{"injectables/AppwriteSessionGuard.html":{},"miscellaneous/variables.html":{}}}],["setproject(appwrite_project_id",{"_index":184,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["setproject(this.configservice.appwriteconfig.appwrite_project_id",{"_index":246,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["shared",{"_index":603,"title":{},"body":{"modules/SharedModule.html":{}}}],["shared/guards/session.guard",{"_index":356,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["shared/shared.module",{"_index":50,"title":{},"body":{"modules/AppModule.html":{}}}],["sharedmodule",{"_index":42,"title":{"modules/SharedModule.html":{}},"body":{"modules/AppModule.html":{},"modules/SharedModule.html":{},"modules.html":{},"overview.html":{}}}],["side",{"_index":676,"title":{},"body":{"index.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AppwriteModule.html":{},"injectables/AppwriteService.html":{},"injectables/AppwriteSessionGuard.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/ConfigService.html":{},"injectables/ContextService.html":{},"classes/CreateReservationDto.html":{},"injectables/HeleprsService.html":{},"classes/RegisterUserDto.html":{},"classes/Reservation.html":{},"controllers/ReservationController.html":{},"modules/ReservationModule.html":{},"injectables/ReservationRepository.html":{},"injectables/ReservationService.html":{},"modules/SharedModule.html":{},"classes/UpdateReservationDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"interfaces/envConfig.html":{},"index.html":{}}}],["specialrequests",{"_index":238,"title":{},"body":{"injectables/AppwriteService.html":{},"classes/CreateReservationDto.html":{},"classes/Reservation.html":{}}}],["specialrequestsattributeresponse",{"_index":237,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["sponsors",{"_index":705,"title":{},"body":{"index.html":{}}}],["src/.../context.service.ts",{"_index":735,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":667,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../session.guard.ts",{"_index":736,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:9",{"_index":14,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":47,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":69,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:6",{"_index":71,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":321,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:17",{"_index":337,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:35",{"_index":350,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":388,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":391,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:11",{"_index":394,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:16",{"_index":396,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:5",{"_index":393,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/dto/register",{"_index":488,"title":{},"body":{"classes/RegisterUserDto.html":{},"coverage.html":{}}}],["src/integrations/appwrite/appwrite.module",{"_index":390,"title":{},"body":{"modules/AuthModule.html":{},"modules/ReservationModule.html":{},"modules/UserModule.html":{}}}],["src/integrations/appwrite/appwrite.module.ts",{"_index":85,"title":{},"body":{"modules/AppwriteModule.html":{}}}],["src/integrations/appwrite/appwrite.service",{"_index":287,"title":{},"body":{"injectables/AppwriteSessionGuard.html":{},"injectables/AuthService.html":{},"injectables/ReservationRepository.html":{}}}],["src/integrations/appwrite/appwrite.service.ts",{"_index":87,"title":{},"body":{"injectables/AppwriteService.html":{},"coverage.html":{}}}],["src/integrations/appwrite/appwrite.service.ts:10",{"_index":140,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["src/integrations/appwrite/appwrite.service.ts:11",{"_index":138,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["src/integrations/appwrite/appwrite.service.ts:13",{"_index":143,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["src/integrations/appwrite/appwrite.service.ts:14",{"_index":144,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["src/integrations/appwrite/appwrite.service.ts:143",{"_index":114,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["src/integrations/appwrite/appwrite.service.ts:15",{"_index":142,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["src/integrations/appwrite/appwrite.service.ts:150",{"_index":124,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["src/integrations/appwrite/appwrite.service.ts:161",{"_index":137,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["src/integrations/appwrite/appwrite.service.ts:17",{"_index":149,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["src/integrations/appwrite/appwrite.service.ts:172",{"_index":130,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["src/integrations/appwrite/appwrite.service.ts:188",{"_index":121,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["src/integrations/appwrite/appwrite.service.ts:19",{"_index":110,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["src/integrations/appwrite/appwrite.service.ts:39",{"_index":126,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["src/integrations/appwrite/appwrite.service.ts:70",{"_index":119,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["src/integrations/appwrite/appwrite.service.ts:76",{"_index":117,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["src/main.ts",{"_index":641,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/resources/reservation/dto/create",{"_index":445,"title":{},"body":{"classes/CreateReservationDto.html":{},"coverage.html":{}}}],["src/resources/reservation/dto/update",{"_index":606,"title":{},"body":{"classes/UpdateReservationDto.html":{},"coverage.html":{}}}],["src/resources/reservation/entities/reservation.entity",{"_index":157,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["src/resources/reservation/entities/reservation.entity.ts",{"_index":500,"title":{},"body":{"classes/Reservation.html":{},"coverage.html":{}}}],["src/resources/reservation/entities/reservation.entity.ts:10",{"_index":506,"title":{},"body":{"classes/Reservation.html":{}}}],["src/resources/reservation/entities/reservation.entity.ts:26",{"_index":511,"title":{},"body":{"classes/Reservation.html":{}}}],["src/resources/reservation/entities/reservation.entity.ts:27",{"_index":508,"title":{},"body":{"classes/Reservation.html":{}}}],["src/resources/reservation/entities/reservation.entity.ts:28",{"_index":510,"title":{},"body":{"classes/Reservation.html":{}}}],["src/resources/reservation/entities/reservation.entity.ts:29",{"_index":509,"title":{},"body":{"classes/Reservation.html":{}}}],["src/resources/reservation/entities/reservation.entity.ts:30",{"_index":513,"title":{},"body":{"classes/Reservation.html":{}}}],["src/resources/reservation/entities/reservation.entity.ts:31",{"_index":512,"title":{},"body":{"classes/Reservation.html":{}}}],["src/resources/reservation/entities/reservation.entity.ts:5",{"_index":515,"title":{},"body":{"classes/Reservation.html":{}}}],["src/resources/reservation/entities/reservation.entity.ts:6",{"_index":514,"title":{},"body":{"classes/Reservation.html":{}}}],["src/resources/reservation/entities/reservation.entity.ts:7",{"_index":518,"title":{},"body":{"classes/Reservation.html":{}}}],["src/resources/reservation/entities/reservation.entity.ts:8",{"_index":516,"title":{},"body":{"classes/Reservation.html":{}}}],["src/resources/reservation/entities/reservation.entity.ts:9",{"_index":517,"title":{},"body":{"classes/Reservation.html":{}}}],["src/resources/reservation/reservation.controller.ts",{"_index":536,"title":{},"body":{"controllers/ReservationController.html":{},"coverage.html":{}}}],["src/resources/reservation/reservation.controller.ts:20",{"_index":545,"title":{},"body":{"controllers/ReservationController.html":{}}}],["src/resources/reservation/reservation.controller.ts:34",{"_index":550,"title":{},"body":{"controllers/ReservationController.html":{}}}],["src/resources/reservation/reservation.module.ts",{"_index":574,"title":{},"body":{"modules/ReservationModule.html":{}}}],["src/resources/reservation/reservation.repository.ts",{"_index":577,"title":{},"body":{"injectables/ReservationRepository.html":{},"coverage.html":{}}}],["src/resources/reservation/reservation.repository.ts:12",{"_index":583,"title":{},"body":{"injectables/ReservationRepository.html":{}}}],["src/resources/reservation/reservation.repository.ts:17",{"_index":581,"title":{},"body":{"injectables/ReservationRepository.html":{}}}],["src/resources/reservation/reservation.repository.ts:6",{"_index":579,"title":{},"body":{"injectables/ReservationRepository.html":{}}}],["src/resources/reservation/reservation.service.ts",{"_index":588,"title":{},"body":{"injectables/ReservationService.html":{},"coverage.html":{}}}],["src/resources/reservation/reservation.service.ts:14",{"_index":593,"title":{},"body":{"injectables/ReservationService.html":{}}}],["src/resources/reservation/reservation.service.ts:18",{"_index":592,"title":{},"body":{"injectables/ReservationService.html":{}}}],["src/resources/reservation/reservation.service.ts:8",{"_index":590,"title":{},"body":{"injectables/ReservationService.html":{}}}],["src/resources/user/user.controller.ts",{"_index":613,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/resources/user/user.controller.ts:17",{"_index":620,"title":{},"body":{"controllers/UserController.html":{}}}],["src/resources/user/user.module.ts",{"_index":629,"title":{},"body":{"modules/UserModule.html":{}}}],["src/resources/user/user.service.ts",{"_index":631,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/shared/config/config.service",{"_index":158,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["src/shared/config/config.service.ts",{"_index":399,"title":{},"body":{"injectables/ConfigService.html":{},"coverage.html":{},"interfaces/envConfig.html":{}}}],["src/shared/config/config.service.ts:11",{"_index":404,"title":{},"body":{"injectables/ConfigService.html":{}}}],["src/shared/config/config.service.ts:16",{"_index":410,"title":{},"body":{"injectables/ConfigService.html":{}}}],["src/shared/config/config.service.ts:22",{"_index":412,"title":{},"body":{"injectables/ConfigService.html":{}}}],["src/shared/config/config.service.ts:30",{"_index":414,"title":{},"body":{"injectables/ConfigService.html":{}}}],["src/shared/config/config.service.ts:37",{"_index":407,"title":{},"body":{"injectables/ConfigService.html":{}}}],["src/shared/config/config.service.ts:41",{"_index":406,"title":{},"body":{"injectables/ConfigService.html":{}}}],["src/shared/context/context.service",{"_index":159,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["src/shared/context/context.service.ts",{"_index":430,"title":{},"body":{"injectables/ContextService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/shared/context/context.service.ts:10",{"_index":433,"title":{},"body":{"injectables/ContextService.html":{}}}],["src/shared/context/context.service.ts:14",{"_index":434,"title":{},"body":{"injectables/ContextService.html":{}}}],["src/shared/context/context.service.ts:18",{"_index":436,"title":{},"body":{"injectables/ContextService.html":{}}}],["src/shared/guards/session.guard",{"_index":558,"title":{},"body":{"controllers/ReservationController.html":{},"controllers/UserController.html":{}}}],["src/shared/guards/session.guard.ts",{"_index":273,"title":{},"body":{"injectables/AppwriteSessionGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/shared/guards/session.guard.ts:20",{"_index":277,"title":{},"body":{"injectables/AppwriteSessionGuard.html":{}}}],["src/shared/guards/session.guard.ts:25",{"_index":280,"title":{},"body":{"injectables/AppwriteSessionGuard.html":{}}}],["src/shared/helpers/helpers.service.ts",{"_index":487,"title":{},"body":{"injectables/HeleprsService.html":{},"coverage.html":{}}}],["src/shared/shared.module.ts",{"_index":601,"title":{},"body":{"modules/SharedModule.html":{}}}],["src/types/custom",{"_index":519,"title":{},"body":{"classes/Reservation.html":{}}}],["start",{"_index":688,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":691,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":693,"title":{},"body":{"index.html":{}}}],["started",{"_index":669,"title":{"index.html":{}},"body":{}}],["starter",{"_index":680,"title":{},"body":{"index.html":{}}}],["statements",{"_index":635,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":74,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{},"controllers/ReservationController.html":{},"controllers/UserController.html":{}}}],["stay",{"_index":715,"title":{},"body":{"index.html":{}}}],["string",{"_index":75,"title":{},"body":{"injectables/AppService.html":{},"injectables/AppwriteService.html":{},"injectables/AuthService.html":{},"injectables/ConfigService.html":{},"classes/CreateReservationDto.html":{},"classes/RegisterUserDto.html":{},"classes/Reservation.html":{},"injectables/ReservationRepository.html":{},"injectables/ReservationService.html":{},"interfaces/envConfig.html":{}}}],["string})@isemail",{"_index":491,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["string})@isnotempty()@isdatestring",{"_index":451,"title":{},"body":{"classes/CreateReservationDto.html":{}}}],["string})@isnotempty()@matches(/^([01]\\d|2[0",{"_index":461,"title":{},"body":{"classes/CreateReservationDto.html":{}}}],["string})@isstring",{"_index":495,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["successfully",{"_index":332,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ReservationController.html":{}}}],["summary",{"_index":363,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ReservationController.html":{},"controllers/UserController.html":{}}}],["support",{"_index":706,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":726,"title":{},"body":{"modules.html":{}}}],["t",{"_index":131,"title":{},"body":{"injectables/AppwriteService.html":{},"injectables/ContextService.html":{}}}],["table",{"_index":482,"title":{},"body":{"classes/CreateReservationDto.html":{},"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":647,"title":{},"body":{"coverage.html":{}}}],["test",{"_index":696,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":699,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":698,"title":{},"body":{"index.html":{}}}],["test@gmail.com",{"_index":490,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["tests",{"_index":695,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":704,"title":{},"body":{"index.html":{}}}],["this.account",{"_index":178,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["this.adminclient",{"_index":177,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["this.appservice.getserverhealth",{"_index":25,"title":{},"body":{"controllers/AppController.html":{}}}],["this.appwriteservice.createanonymoussession",{"_index":397,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.appwriteservice.getalluserresevations(userid",{"_index":585,"title":{},"body":{"injectables/ReservationRepository.html":{}}}],["this.appwriteservice.getuserfromsessionsecret(token",{"_index":306,"title":{},"body":{"injectables/AppwriteSessionGuard.html":{}}}],["this.appwriteservice.savedocument('reservations",{"_index":587,"title":{},"body":{"injectables/ReservationRepository.html":{}}}],["this.appwriteservice.updateuser(userid",{"_index":398,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.authservice.login",{"_index":367,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.register(user.$id",{"_index":382,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.clsservice.get(key",{"_index":441,"title":{},"body":{"injectables/ContextService.html":{}}}],["this.clsservice.set(key",{"_index":442,"title":{},"body":{"injectables/ContextService.html":{}}}],["this.configservice.appwriteconfig",{"_index":163,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["this.configservice.db.databaseid",{"_index":190,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["this.contextservice.set('sessionsecret",{"_index":314,"title":{},"body":{"injectables/AppwriteSessionGuard.html":{}}}],["this.contextservice.set('user",{"_index":315,"title":{},"body":{"injectables/AppwriteSessionGuard.html":{}}}],["this.createcollection(collectionname",{"_index":204,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["this.createdatabase",{"_index":194,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["this.database",{"_index":195,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["this.databaseid",{"_index":189,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["this.databases",{"_index":187,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["this.databases.create(id.unique",{"_index":210,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["this.databases.createcollection",{"_index":216,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["this.databases.createdatetimeattribute",{"_index":230,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["this.databases.createdocument",{"_index":267,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["this.databases.createintegerattribute",{"_index":233,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["this.databases.createstringattribute",{"_index":223,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["this.databases.get(this.databaseid",{"_index":196,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["this.databases.listcollections(this.databaseid",{"_index":198,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["this.databases.listdocuments(this.databaseid",{"_index":269,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["this.date",{"_index":522,"title":{},"body":{"classes/Reservation.html":{}}}],["this.datetime",{"_index":532,"title":{},"body":{"classes/Reservation.html":{}}}],["this.numberofguests",{"_index":526,"title":{},"body":{"classes/Reservation.html":{}}}],["this.reflector.getallandoverride('onlyregistereduser",{"_index":300,"title":{},"body":{"injectables/AppwriteSessionGuard.html":{}}}],["this.requiredcollectionsmap",{"_index":200,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["this.requiredcollectionsmap['reservations'].id",{"_index":270,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["this.requiredcollectionsmap[collection].id",{"_index":268,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["this.requiredcollectionsmap[collectionname",{"_index":241,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["this.requiredcollectionsmap[collectionname].id",{"_index":207,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["this.reservationrepository.create(reservation",{"_index":597,"title":{},"body":{"injectables/ReservationService.html":{}}}],["this.reservationrepository.getalluserreservations(userid",{"_index":596,"title":{},"body":{"injectables/ReservationService.html":{}}}],["this.reservationservice.create(userid",{"_index":563,"title":{},"body":{"controllers/ReservationController.html":{}}}],["this.reservationservice.getalluserreservations(userid",{"_index":569,"title":{},"body":{"controllers/ReservationController.html":{}}}],["this.specialrequests",{"_index":528,"title":{},"body":{"classes/Reservation.html":{}}}],["this.time",{"_index":524,"title":{},"body":{"classes/Reservation.html":{}}}],["this.userid",{"_index":530,"title":{},"body":{"classes/Reservation.html":{}}}],["throw",{"_index":165,"title":{},"body":{"injectables/AppwriteService.html":{},"injectables/AppwriteSessionGuard.html":{}}}],["time",{"_index":228,"title":{},"body":{"injectables/AppwriteService.html":{},"classes/CreateReservationDto.html":{},"classes/Reservation.html":{},"controllers/ReservationController.html":{}}}],["timeattributeresponse",{"_index":227,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["token",{"_index":298,"title":{},"body":{"injectables/AppwriteSessionGuard.html":{}}}],["touch",{"_index":716,"title":{},"body":{"index.html":{}}}],["transform",{"_index":468,"title":{},"body":{"classes/CreateReservationDto.html":{}}}],["transformer",{"_index":469,"title":{},"body":{"classes/CreateReservationDto.html":{},"dependencies.html":{}}}],["true",{"_index":64,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppwriteService.html":{},"injectables/AppwriteSessionGuard.html":{},"controllers/AuthController.html":{},"classes/CreateReservationDto.html":{},"controllers/ReservationController.html":{},"miscellaneous/variables.html":{}}}],["true})@get('/reservations",{"_index":549,"title":{},"body":{"controllers/ReservationController.html":{}}}],["true})@isoptional",{"_index":458,"title":{},"body":{"classes/CreateReservationDto.html":{}}}],["true})@post('/reservation",{"_index":544,"title":{},"body":{"controllers/ReservationController.html":{}}}],["try",{"_index":305,"title":{},"body":{"injectables/AppwriteSessionGuard.html":{}}}],["twitter",{"_index":722,"title":{},"body":{"index.html":{}}}],["type",{"_index":112,"title":{},"body":{"injectables/AppwriteService.html":{},"injectables/AppwriteSessionGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ContextService.html":{},"classes/CreateReservationDto.html":{},"classes/RegisterUserDto.html":{},"classes/Reservation.html":{},"controllers/ReservationController.html":{},"injectables/ReservationRepository.html":{},"injectables/ReservationService.html":{},"coverage.html":{},"interfaces/envConfig.html":{}}}],["typeof",{"_index":266,"title":{},"body":{"injectables/AppwriteService.html":{},"injectables/ContextService.html":{}}}],["types",{"_index":611,"title":{},"body":{"classes/UpdateReservationDto.html":{},"dependencies.html":{}}}],["typescript",{"_index":679,"title":{},"body":{"index.html":{}}}],["unauthorized",{"_index":377,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ReservationController.html":{},"controllers/UserController.html":{}}}],["unauthorized'})@apiresponse({status",{"_index":348,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ReservationController.html":{},"controllers/UserController.html":{}}}],["undefined",{"_index":456,"title":{},"body":{"classes/CreateReservationDto.html":{}}}],["unit",{"_index":694,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":115,"title":{},"body":{"injectables/AppwriteService.html":{},"injectables/AppwriteSessionGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ReservationController.html":{},"injectables/ReservationRepository.html":{}}}],["unlicensed",{"_index":733,"title":{},"body":{"properties.html":{}}}],["up",{"_index":80,"title":{},"body":{"injectables/AppService.html":{},"injectables/AppwriteService.html":{}}}],["updatedat",{"_index":504,"title":{},"body":{"classes/Reservation.html":{}}}],["updatereservationdto",{"_index":594,"title":{"classes/UpdateReservationDto.html":{}},"body":{"injectables/ReservationService.html":{},"classes/UpdateReservationDto.html":{},"coverage.html":{}}}],["updateuser",{"_index":105,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["updateuser(userid",{"_index":134,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["upgrades",{"_index":341,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards",{"_index":284,"title":{},"body":{"injectables/AppwriteSessionGuard.html":{}}}],["useguards(appwritesessionguard",{"_index":296,"title":{},"body":{"injectables/AppwriteSessionGuard.html":{},"miscellaneous/variables.html":{}}}],["user",{"_index":253,"title":{},"body":{"injectables/AppwriteService.html":{},"injectables/AppwriteSessionGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ContextService.html":{},"classes/Reservation.html":{},"controllers/ReservationController.html":{},"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["user.controller",{"_index":630,"title":{},"body":{"modules/UserModule.html":{}}}],["user.dto",{"_index":362,"title":{},"body":{"controllers/AuthController.html":{}}}],["user.dto.ts",{"_index":489,"title":{},"body":{"classes/RegisterUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:11",{"_index":498,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["user.dto.ts:15",{"_index":496,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["user.dto.ts:7",{"_index":492,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["user.email",{"_index":309,"title":{},"body":{"injectables/AppwriteSessionGuard.html":{}}}],["user.get(userid",{"_index":255,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["user.service",{"_index":622,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["user.updateemail(userid",{"_index":261,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["user.updatename(userid",{"_index":258,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["user.updatepassword(userid",{"_index":264,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["user['$id",{"_index":521,"title":{},"body":{"classes/Reservation.html":{}}}],["usercontroller",{"_index":612,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userid",{"_index":122,"title":{},"body":{"injectables/AppwriteService.html":{},"injectables/AuthService.html":{},"classes/Reservation.html":{},"controllers/ReservationController.html":{},"injectables/ReservationRepository.html":{},"injectables/ReservationService.html":{}}}],["useridattributeresponse",{"_index":236,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["usermodule",{"_index":43,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["users",{"_index":154,"title":{},"body":{"injectables/AppwriteService.html":{},"injectables/AppwriteSessionGuard.html":{},"controllers/ReservationController.html":{}}}],["users(this.adminclient",{"_index":254,"title":{},"body":{"injectables/AppwriteService.html":{}}}],["userservice",{"_index":621,"title":{"injectables/UserService.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["validator",{"_index":478,"title":{},"body":{"classes/CreateReservationDto.html":{},"classes/RegisterUserDto.html":{},"dependencies.html":{}}}],["value",{"_index":146,"title":{},"body":{"injectables/AppwriteService.html":{},"injectables/ContextService.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":646,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":734,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":73,"title":{},"body":{"injectables/AppService.html":{},"properties.html":{}}}],["void",{"_index":437,"title":{},"body":{"injectables/ContextService.html":{}}}],["watch",{"_index":689,"title":{},"body":{"index.html":{}}}],["website",{"_index":720,"title":{},"body":{"index.html":{}}}],["you'd",{"_index":709,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":44,"title":{},"body":{"modules/AppModule.html":{},"modules/AppwriteModule.html":{},"modules/AuthModule.html":{},"modules/ReservationModule.html":{},"modules/SharedModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                health\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        health\n                        \n                    \n                \n            \n            \n                \n                        \n                    health()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/health')\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:9\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get('/health')\n  health() {\n    return this.appService.getServerHealth();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nReservationModule\n\nReservationModule\n\nAppModule -->\n\nReservationModule->AppModule\n\n\n\n\n\nSharedModule\n\nSharedModule\n\nAppModule -->\n\nSharedModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            AuthModule\n                        \n                        \n                            ReservationModule\n                        \n                        \n                            SharedModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { SharedModule } from './shared/shared.module';\nimport { AppwriteModule } from './integrations/appwrite/appwrite.module';\nimport { ConfigModule } from '@nestjs/config';\nimport { AuthModule } from './auth/auth.module';\nimport { ClsModule } from 'nestjs-cls';\nimport { UserModule } from './resources/user/user.module';\nimport { ReservationModule } from './resources/reservation/reservation.module';\n@Module({\n  imports: [SharedModule, AuthModule, ConfigModule.forRoot(), AuthModule,\n    ClsModule.forRoot({\n      global: true,\n      middleware: { mount: true },\n    }),\n    UserModule,\n    ReservationModule\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getServerHealth\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getServerHealth\n                        \n                    \n                \n            \n            \n                \ngetServerHealth()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:6\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     { name: any; version: any; status: string; }\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport * as packageJson from '../package.json';\n@Injectable()\nexport class AppService {\n\n  getServerHealth() {\n    return { name: packageJson.name, version: packageJson.version, status: 'UP' };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppwriteModule.html":{"url":"modules/AppwriteModule.html","title":"module - AppwriteModule","body":"\n                   \n\n\n\n\n    Modules\n    AppwriteModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppwriteModule\n\n\n\ncluster_AppwriteModule_exports\n\n\n\ncluster_AppwriteModule_providers\n\n\n\n\nAppwriteService \n\nAppwriteService \n\n\n\nAppwriteModule\n\nAppwriteModule\n\nAppwriteService  -->\n\nAppwriteModule->AppwriteService \n\n\n\n\n\nAppwriteService\n\nAppwriteService\n\nAppwriteModule -->\n\nAppwriteService->AppwriteModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/integrations/appwrite/appwrite.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppwriteService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AppwriteService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppwriteService } from './appwrite.service';\n\n@Module({\n  controllers: [],\n  providers: [AppwriteService],\n  exports: [AppwriteService],\n})\nexport class AppwriteModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppwriteService.html":{"url":"injectables/AppwriteService.html","title":"injectable - AppwriteService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppwriteService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/integrations/appwrite/appwrite.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                account\n                            \n                            \n                                    Private\n                                adminClient\n                            \n                            \n                                    Private\n                                database\n                            \n                            \n                                    Private\n                                databaseId\n                            \n                            \n                                    Private\n                                databases\n                            \n                            \n                                    Private\n                                requiredCollectionsMap\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createAnonymousSession\n                            \n                            \n                                    Async\n                                createCollection\n                            \n                            \n                                    Async\n                                createDatabase\n                            \n                            \n                                    Async\n                                getAllUserResevations\n                            \n                            \n                                    Async\n                                getUserFromSessionSecret\n                            \n                            \n                                    Async\n                                onModuleInit\n                            \n                            \n                                    Async\n                                saveDocument\n                            \n                            \n                                    Async\n                                updateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, contextService: ContextService)\n                    \n                \n                        \n                            \n                                Defined in src/integrations/appwrite/appwrite.service.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                        ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        contextService\n                                                  \n                                                        \n                                                                        ContextService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createAnonymousSession\n                        \n                    \n                \n            \n            \n                \n                        \n                    createAnonymousSession()\n                \n            \n\n\n                    \n                        \n                            Defined in src/integrations/appwrite/appwrite.service.ts:143\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createCollection\n                        \n                    \n                \n            \n            \n                \n                        \n                    createCollection(collectionName: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/integrations/appwrite/appwrite.service.ts:76\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                collectionName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createDatabase\n                        \n                    \n                \n            \n            \n                \n                        \n                    createDatabase()\n                \n            \n\n\n                    \n                        \n                            Defined in src/integrations/appwrite/appwrite.service.ts:70\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getAllUserResevations\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllUserResevations(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/integrations/appwrite/appwrite.service.ts:188\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getUserFromSessionSecret\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserFromSessionSecret(secret: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/integrations/appwrite/appwrite.service.ts:150\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                secret\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/integrations/appwrite/appwrite.service.ts:39\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        saveDocument\n                        \n                    \n                \n            \n            \n                \n                        \n                    saveDocument(collection, document: Reservation)\n                \n            \n\n\n                    \n                        \n                            Defined in src/integrations/appwrite/appwrite.service.ts:172\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                collection\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                document\n                                            \n                                                            Reservation\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateUser(userId: string, data: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/integrations/appwrite/appwrite.service.ts:161\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                data\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        account\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Account\n\n                    \n                \n                    \n                        \n                                Defined in src/integrations/appwrite/appwrite.service.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        adminClient\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Client\n\n                    \n                \n                    \n                        \n                                Defined in src/integrations/appwrite/appwrite.service.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        database\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Models.Database\n\n                    \n                \n                    \n                        \n                                Defined in src/integrations/appwrite/appwrite.service.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        databaseId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/integrations/appwrite/appwrite.service.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        databases\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Databases\n\n                    \n                \n                    \n                        \n                                Defined in src/integrations/appwrite/appwrite.service.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        requiredCollectionsMap\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Default value : {\n        'reservations': { id: '' }\n    }\n                    \n                \n                    \n                        \n                                Defined in src/integrations/appwrite/appwrite.service.ts:17\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, OnModuleInit } from '@nestjs/common';\nimport { Account, Client, Databases, ID, Models, Permission, Query, Role, Users } from 'node-appwrite';\nimport { Reservation } from 'src/resources/reservation/entities/reservation.entity';\nimport { ConfigService } from 'src/shared/config/config.service';\nimport { ContextService } from 'src/shared/context/context.service';\n\n@Injectable()\nexport class AppwriteService implements OnModuleInit{\n    \n    private adminClient: Client;\n    private account: Account;\n\n    private databaseId: string;\n    private databases: Databases;\n    private database: Models.Database;\n\n    private requiredCollectionsMap: { [name: string]: { id: string}} = {\n        'reservations': { id: '' }\n    }\n\n    constructor(private readonly configService: ConfigService, private readonly contextService: ContextService) {\n        const appwriteConfig = this.configService.appwriteConfig;\n        if(!appwriteConfig) {\n            throw new Error('Appwrite configuration is missing');\n        }else if(!appwriteConfig.APPWRITE_ENDPOINT) {\n            throw new Error('Appwrite endpoint is missing');\n        }else if(!appwriteConfig.APPWRITE_PROJECT_ID) {\n            throw new Error('Appwrite project ID is missing');\n        }else if(!appwriteConfig.APPWRITE_API_KEY) {\n            throw new Error('Appwrite API key is missing');\n        }\n\n        this.adminClient = new Client();\n        this.account = new Account(this.adminClient);\n\n        \n    }\n\n    async onModuleInit() {\n        const { APPWRITE_ENDPOINT, APPWRITE_API_KEY, APPWRITE_PROJECT_ID } = this.configService.appwriteConfig;\n\n        this.adminClient = this.adminClient\n            .setEndpoint(APPWRITE_ENDPOINT)\n            .setProject(APPWRITE_PROJECT_ID)\n            .setKey(APPWRITE_API_KEY)\n\n        //Set up the database\n        this.databases = new Databases(this.adminClient);\n        this.databaseId = this.configService.db.databaseId;\n        if (!this.databaseId) {\n            console.log(\"DatabaseId missing\")\n            console.log(\"Creating database\");\n            await this.createDatabase();\n        }\n\n        this.database = await this.databases.get(this.databaseId);\n        \n        const collections = await this.databases.listCollections(this.databaseId);\n        for(let collectionName in this.requiredCollectionsMap) {\n            const collection = collections.collections.find(c => c.name === collectionName)\n            if(!collection) {\n                await this.createCollection(collectionName);\n                console.log(`Collection ${collectionName} created`);\n            }else{\n                this.requiredCollectionsMap[collectionName].id = collections.collections.find(c => c.name === collectionName).$id;\n            }\n        }\n    }\n\n    async createDatabase() {\n        const response = await this.databases.create(ID.unique(), \"Default\");\n        this.databaseId = response.$id;\n        console.log(\"Database created with ID: \", this.databaseId);\n    }\n\n    async createCollection(collectionName: string){\n        let createCollectionResponse: Models.Collection;\n        if(collectionName == 'reservations') {\n            createCollectionResponse = await this.databases.createCollection(\n                this.databaseId,         // ID of the collection\n                ID.unique(),        // Collection ID\n                collectionName, // Collection Name\n                [\n                    Permission.read(Role.any()),\n                    Permission.create(Role.users()),\n                    Permission.update(Role.users()),\n                    Permission.delete(Role.users()),\n                ]\n            );\n\n            const dateAttributeResponse = await this.databases.createStringAttribute(\n                this.databaseId,\n                createCollectionResponse.$id,\n                'date',\n                255,\n                true,\n            );\n\n            const timeAttributeResponse = await this.databases.createStringAttribute(\n                this.databaseId,\n                createCollectionResponse.$id,\n                'time',\n                255,\n                true,\n            );\n\n            const datetimeAttributeResponse = await this.databases.createDatetimeAttribute(\n                this.databaseId,\n                createCollectionResponse.$id,\n                'datetime',\n                true,\n            );\n\n            const numberOfGuestsAttributeResponse = await this.databases.createIntegerAttribute(\n                this.databaseId,\n                createCollectionResponse.$id,\n                'numberOfGuests',\n                true,\n                1\n            );\n\n            const userIdAttributeResponse = await this.databases.createStringAttribute(\n                this.databaseId,\n                createCollectionResponse.$id,\n                'userId',\n                255,\n                true,\n            );\n\n            const specialRequestsAttributeResponse = await this.databases.createStringAttribute(\n                this.databaseId,\n                createCollectionResponse.$id,\n                'specialRequests',\n                255,\n                false,\n                null,\n                true\n            );\n        }\n        this.requiredCollectionsMap[collectionName] = { id: createCollectionResponse.$id };\n    }\n\n    public async createAnonymousSession() {\n        const account = new Account(this.adminClient);\n        \n        const anonymousSession = await account.createAnonymousSession();\n        return anonymousSession\n    }\n\n    async getUserFromSessionSecret(secret: string) {\n        const sessionClient = new Client()\n            .setEndpoint(this.configService.appwriteConfig.APPWRITE_ENDPOINT)\n            .setProject(this.configService.appwriteConfig.APPWRITE_PROJECT_ID);\n\n        sessionClient.setSession(secret);\n        const account = new Account(sessionClient);\n        const currentUser = await account.get();\n        return currentUser;\n    }\n\n    async updateUser(userId: string, data: { email: string; password: string; name: string; }) {\n        const user = new Users(this.adminClient);\n\n        const currentUser = await user.get(userId);\n\n        currentUser.name != data.name && await user.updateName(userId, data.name);\n        currentUser.email != data.email && await user.updateEmail(userId, data.email);\n        currentUser.password != data.password && await user.updatePassword(userId, data.password);\n        return await user.get(userId);\n    }\n    \n    async saveDocument(collection: keyof typeof this.requiredCollectionsMap, document: Reservation): Promise {\n        const response = await this.databases.createDocument(\n            this.databaseId,\n            this.requiredCollectionsMap[collection].id,\n            ID.unique(),\n            document,\n            [\n                Permission.read(Role.any()),\n                Permission.update(Role.users()),\n                Permission.delete(Role.users()),\n            ]\n        );\n\n        return response as T;\n    }\n\n    async getAllUserResevations(userId: string) {\n        const reservations = await this.databases.listDocuments(this.databaseId, this.requiredCollectionsMap['reservations'].id, \n        [\n            Query.equal('userId', userId),\n        ]);\n        return reservations;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppwriteSessionGuard.html":{"url":"injectables/AppwriteSessionGuard.html","title":"injectable - AppwriteSessionGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppwriteSessionGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/guards/session.guard.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector, appwriteService: AppwriteService, contextService: ContextService)\n                    \n                \n                        \n                            \n                                Defined in src/shared/guards/session.guard.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        appwriteService\n                                                  \n                                                        \n                                                                        AppwriteService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        contextService\n                                                  \n                                                        \n                                                                        ContextService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/shared/guards/session.guard.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { applyDecorators, ExecutionContext, Injectable, SetMetadata, UseGuards } from \"@nestjs/common\";\nimport { Request } from \"express\";\nimport { AppwriteService } from \"src/integrations/appwrite/appwrite.service\";\nimport { ContextService } from \"../context/context.service\";\nimport { Reflector } from \"@nestjs/core\";\n\nexport const SessionGuard = (options?:{ onlyRegisteredUser: boolean}) => {\n    if(options?.onlyRegisteredUser){\n        return applyDecorators(\n            SetMetadata('onlyRegisteredUser', true),\n            UseGuards(AppwriteSessionGuard)\n        )\n    }\n    return applyDecorators(\n        UseGuards(AppwriteSessionGuard)\n    )\n}\n\n@Injectable()\nexport class AppwriteSessionGuard {\n    constructor(private reflector: Reflector, private appwriteService: AppwriteService, private contextService: ContextService) {\n        \n    }\n\n    async canActivate(context: ExecutionContext) {\n        const request: Request = context.switchToHttp().getRequest();\n        const token = request.cookies['auth_token'];\n\t\tconst onlyRegisteredUser = this.reflector.getAllAndOverride('onlyRegisteredUser', [context.getHandler(), context.getClass()]);\n\n        if(!token) {\n            throw new Error('Unauthorized');\n        }\n\n        try{\n            const user = await this.appwriteService.getUserFromSessionSecret(token);\n            if(!user) {\n                throw new Error('Unauthorized');\n            }\n\n            if(onlyRegisteredUser && !user.email) {\n                throw new Error('Unauthorized - this action is only available for registered users');\n            }\n\n            request.user = user;\n\n            this.contextService.set('sessionSecret', token);\n            this.contextService.set('user', user);\n            return true;\n        }catch(error){\n            console.log(error);\n            if(error.message.startsWith('Unauthorized')) throw error;\n            throw new Error('Unauthorized');\n        }\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                login\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(response: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Login user and creates an anonymous session', description: 'Login user and creates an anonymous session'})@ApiResponse({status: 201, description: 'Successfully created anonymous session'})@ApiResponse({status: 500, description: 'Internal server error'})@Post('/login')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                response\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                        \n                    register(request: Request, body: RegisterUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Register user', description: 'Upgrades anonymous session with real user data'})@ApiResponse({status: 201, description: 'Successfully created anonymous session'})@ApiResponse({status: 400, description: 'Invalid payload'})@ApiResponse({status: 401, description: 'Unauthorized'})@ApiResponse({status: 500, description: 'Internal server error'})@ApiCookieAuth('auth_token')@SessionGuard()@Post('/register')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:35\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                request\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            RegisterUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post, Req, Res } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { Request, Response } from 'express';\nimport { SessionGuard } from '../shared/guards/session.guard';\nimport { ApiCookieAuth, ApiOperation, ApiResponse } from '@nestjs/swagger';\nimport { RegisterUserDto } from './dto/register-user.dto';\n@Controller()\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {\n\n  }\n\n  @ApiOperation({ summary: 'Login user and creates an anonymous session', description: 'Login user and creates an anonymous session' })\n\t@ApiResponse({ status: 201, description: 'Successfully created anonymous session'})\n\t@ApiResponse({ status: 500, description: 'Internal server error'})\n  @Post('/login')\n  async login(@Res({ passthrough: true }) response: Response) {\n    const session = await this.authService.login();\n    response.cookie('auth_token', session.secret, {\n      httpOnly: true,\n      sameSite: 'none',\n      expires: new Date(session.expire)\n    });\n    return { status: 201, message: 'Successfully created anonymous session' };\n  }\n\n  @ApiOperation({ summary: 'Register user', description: 'Upgrades anonymous session with real user data' })\n\t@ApiResponse({ status: 201, description: 'Successfully created anonymous session'})\n  @ApiResponse({ status: 400, description: 'Invalid payload'})\n  @ApiResponse({ status: 401, description: 'Unauthorized'})\n\t@ApiResponse({ status: 500, description: 'Internal server error'})\n  @ApiCookieAuth('auth_token')\n  @SessionGuard()\n  @Post('/register')\n  async register(@Req() request: Request, @Body() body: RegisterUserDto) {\n    const user = request.user;\n    const registeredUser = await this.authService.register(user.$id, body);\n    return { status: 201, message: 'Successfully registered user', user: { name: registeredUser.name, email: registeredUser.email} };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAppwriteModule\n\nAppwriteModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nAppwriteModule->AuthModule\n\n\n\n\n\nAppwriteSessionGuard\n\nAppwriteSessionGuard\n\nAuthModule -->\n\nAppwriteSessionGuard->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppwriteSessionGuard\n                        \n                        \n                            AuthService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AppwriteModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { AuthController } from './auth.controller';\nimport { AppwriteModule } from 'src/integrations/appwrite/appwrite.module';\nimport { AppwriteSessionGuard } from '../shared/guards/session.guard';\n\n@Module({\n  imports: [AppwriteModule],\n  controllers: [AuthController],\n  providers: [AuthService, AppwriteSessionGuard],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(appwriteService: AppwriteService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        appwriteService\n                                                  \n                                                        \n                                                                        AppwriteService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:11\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                        \n                    register(userId: string, data: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                data\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AppwriteService } from 'src/integrations/appwrite/appwrite.service';\n\n@Injectable()\nexport class AuthService {\n  \n  constructor(private readonly appwriteService: AppwriteService){\n\n  }\n\n  async login() {\n    const session = await this.appwriteService.createAnonymousSession();\n    return session;\n  }\n\n  async register(userId: string, data: {email: string, password: string, name: string}){\n    const user = await this.appwriteService.updateUser(userId, { email: data.email, password: data.password, name: data.name });\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ConfigService.html":{"url":"injectables/ConfigService.html","title":"injectable - ConfigService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ConfigService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/config/config.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                get\n                            \n                            \n                                getPort\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    db\n                                \n                                \n                                    appwriteConfig\n                                \n                                \n                                    globalConfig\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/shared/config/config.service.ts:11\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        get\n                        \n                    \n                \n            \n            \n                \nget(key)\n                \n            \n\n\n                    \n                        \n                            Defined in src/shared/config/config.service.ts:41\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getPort\n                        \n                    \n                \n            \n            \n                \ngetPort()\n                \n            \n\n\n                    \n                        \n                            Defined in src/shared/config/config.service.ts:37\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         number\n\n                        \n                \n            \n        \n    \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        db\n                    \n                \n\n                \n                    \n                        getdb()\n                    \n                \n                            \n                                \n                                    Defined in src/shared/config/config.service.ts:16\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        appwriteConfig\n                    \n                \n\n                \n                    \n                        getappwriteConfig()\n                    \n                \n                            \n                                \n                                    Defined in src/shared/config/config.service.ts:22\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        globalConfig\n                    \n                \n\n                \n                    \n                        getglobalConfig()\n                    \n                \n                            \n                                \n                                    Defined in src/shared/config/config.service.ts:30\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\n\ninterface envConfig {\n    PORT: string,\n    APPWRITE_API_KEY: string,\n    APPWRITE_ENDPOINT: string,\n    APPWRITE_PROJECT_ID: string,\n}\n\n@Injectable()\nexport class ConfigService {\n\n    constructor() {\n    }\n\n    get db() {\n        return {\n            databaseId: process.env.APPWRITE_DATABASE_ID,\n        };\n    }\n\n    get appwriteConfig() {\n        return {\n            APPWRITE_ENDPOINT: process.env.APPWRITE_ENDPOINT || 'https://cloud.appwrite.io/v1',\n            APPWRITE_PROJECT_ID: process.env.APPWRITE_PROJECT_ID,\n            APPWRITE_API_KEY: process.env.APPWRITE_API_KEY,\n        };\n    }\n\n    get globalConfig() {\n        return {\n            host: process.env.APP_HOST || '0.0.0.0',\n            port: +process.env.APP_PORT || 3000,\n        };\n    }\n\n    getPort(): number {\n        return +process.env.PORT || 3000;\n    }\n    \n    get(key: keyof envConfig): string {\n        return process.env[key];\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ContextService.html":{"url":"injectables/ContextService.html","title":"injectable - ContextService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ContextService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/context/context.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                get\n                            \n                            \n                                set\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(clsService: ClsService)\n                    \n                \n                        \n                            \n                                Defined in src/shared/context/context.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        clsService\n                                                  \n                                                        \n                                                                    ClsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        get\n                        \n                    \n                \n            \n            \n                \nget(key)\n                \n            \n\n\n                    \n                        \n                            Defined in src/shared/context/context.service.ts:14\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     T\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        set\n                        \n                    \n                \n            \n            \n                \nset(key, value: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/shared/context/context.service.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                value\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { ClsService } from 'nestjs-cls';\n\nexport const ContextKeys = {\n\tsessionSecret: 'sessionSecret',\n    user: 'user',\n} as const;\n\n@Injectable()\nexport class ContextService {\n\t\n\tconstructor(private readonly clsService: ClsService) {}\n\n\tget(key: (typeof ContextKeys)[keyof typeof ContextKeys]): T {\n\t\treturn this.clsService.get(key);\n\t}\n\n\tset(key: (typeof ContextKeys)[keyof typeof ContextKeys], value: any): void {\n\t\tthis.clsService.set(key, value);\n\t}\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateReservationDto.html":{"url":"classes/CreateReservationDto.html","title":"class - CreateReservationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateReservationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/resources/reservation/dto/create-reservation.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                date\n                            \n                            \n                                    \n                                    \n                                    \n                                numberOfGuests\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                specialRequests\n                            \n                            \n                                    \n                                    \n                                    \n                                time\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '2024-12-31', type: String})@IsNotEmpty()@IsDateString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/resources/reservation/dto/create-reservation.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        numberOfGuests\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 2, type: Number})@IsInt()@Min(1)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/resources/reservation/dto/create-reservation.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        specialRequests\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: undefined, type: Array})@IsArray()@IsString({each: true})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/resources/reservation/dto/create-reservation.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        time\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '12:00', type: String})@IsNotEmpty()@Matches(/^([01]\\d|2[0-3]):([0-5]\\d)$/, {message: 'time must be in HH:mm format'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/resources/reservation/dto/create-reservation.dto.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { Transform, Type } from \"class-transformer\";\nimport { IsNotEmpty, IsDateString, Matches, IsInt, Min, IsString, IsOptional, IsArray } from \"class-validator\";\n\nexport class CreateReservationDto {\n    @ApiProperty({ example: '2024-12-31', type: String })\n    @IsNotEmpty()\n    @IsDateString()\n    date: string;\n\n    @ApiProperty({ example: '12:00', type: String })\n    @IsNotEmpty()\n    @Matches(/^([01]\\d|2[0-3]):([0-5]\\d)$/, {\n        message: 'time must be in HH:mm format',\n    })\n    time: string;\n\n    @ApiProperty({ example: 2, type: Number })\n    @IsInt()\n    @Min(1)\n    numberOfGuests: number;\n\n    @ApiProperty({ example: ['table inside'], type: Array })\n    @IsArray()\n    @IsString({ each: true })\n    @IsOptional()\n    specialRequests: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HeleprsService.html":{"url":"injectables/HeleprsService.html","title":"injectable - HeleprsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HeleprsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/helpers/helpers.service.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\n\n@Injectable()\nexport class HeleprsService {\n\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegisterUserDto.html":{"url":"classes/RegisterUserDto.html","title":"class - RegisterUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegisterUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/register-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'test@gmail.com', type: String})@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register-user.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'John Doe', type: String})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register-user.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'password123', type: String})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register-user.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsEmail, IsString } from \"class-validator\";\n\nexport class RegisterUserDto {\n    @ApiProperty({example: 'test@gmail.com', type: String})\n    @IsEmail()\n    email: string;\n\n    @ApiProperty({ example: 'password123', type: String })\n    @IsString()\n    password: string;\n\n    @ApiProperty({ example: 'John Doe', type: String })\n    @IsString()\n    name: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Reservation.html":{"url":"classes/Reservation.html","title":"class - Reservation","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Reservation\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/resources/reservation/entities/reservation.entity.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        \n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                $collectionId\n                            \n                            \n                                $createdAt\n                            \n                            \n                                $databaseId\n                            \n                            \n                                $id\n                            \n                            \n                                $permissions\n                            \n                            \n                                $updatedAt\n                            \n                            \n                                date\n                            \n                            \n                                datetime\n                            \n                            \n                                numberOfGuests\n                            \n                            \n                                    Optional\n                                specialRequests\n                            \n                            \n                                time\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(obj: literal type)\n                    \n                \n                        \n                            \n                                Defined in src/resources/reservation/entities/reservation.entity.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        obj\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        $collectionId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/resources/reservation/entities/reservation.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        $createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/resources/reservation/entities/reservation.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        $databaseId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/resources/reservation/entities/reservation.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        $id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/resources/reservation/entities/reservation.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        $permissions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in src/resources/reservation/entities/reservation.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        $updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/resources/reservation/entities/reservation.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/resources/reservation/entities/reservation.entity.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        datetime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                    \n                        \n                                Defined in src/resources/reservation/entities/reservation.entity.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        numberOfGuests\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/resources/reservation/entities/reservation.entity.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        specialRequests\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in src/resources/reservation/entities/reservation.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        time\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/resources/reservation/entities/reservation.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/resources/reservation/entities/reservation.entity.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { User } from \"src/types/custom\";\nimport { Models } from 'node-appwrite'\n\nexport class Reservation implements Models.Document{\n    datetime: Date;\n    date: string;\n    time: string;\n    numberOfGuests: number;\n    specialRequests?: string[];\n    userId: User['$id'];\n\n    constructor(obj: { date: string, time: string, numberOfGuests: number, specialRequests?: string[], userId: User['$id'] }) {\n        this.date = obj.date;\n        this.time = obj.time;\n        this.numberOfGuests = obj.numberOfGuests;\n        this.specialRequests = obj.specialRequests;\n        this.userId = obj.userId;\n\n        this.datetime = new Date(`${this.date}T${this.time}:00`);\n\n        if(this.datetime \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ReservationController.html":{"url":"controllers/ReservationController.html","title":"controller - ReservationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ReservationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/resources/reservation/reservation.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                getAllUsersReservations\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(request: Request, createReservationDto: CreateReservationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Create a reservation', description: 'Create a reservation on behalf current user session'})@ApiResponse({status: 201, description: 'Successfully created reservation'})@ApiResponse({status: 400, description: 'Invalid payload'})@ApiResponse({status: 401, description: 'Unauthorized'})@ApiResponse({status: 500, description: 'Internal server error'})@ApiCookieAuth('auth_token')@SessionGuard({onlyRegisteredUser: true})@Post('/reservation')\n                \n            \n\n                    \n                        \n                            Defined in src/resources/reservation/reservation.controller.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                request\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                createReservationDto\n                                            \n                                                            CreateReservationDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                        getAllUsersReservations\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllUsersReservations(request: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get all reservations of a user', description: 'Get all reservations of a user from its session'})@ApiResponse({status: 200, description: 'Users reservations'})@ApiResponse({status: 400, description: 'Invalid payload'})@ApiResponse({status: 401, description: 'Unauthorized'})@ApiResponse({status: 500, description: 'Internal server error'})@ApiCookieAuth('auth_token')@SessionGuard({onlyRegisteredUser: true})@Get('/reservations')\n                \n            \n\n                    \n                        \n                            Defined in src/resources/reservation/reservation.controller.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                request\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Post, Body, Patch, Param, Delete, Req, Session } from '@nestjs/common';\nimport { ReservationService } from './reservation.service';\nimport { CreateReservationDto } from './dto/create-reservation.dto';\nimport { Request } from 'express';\nimport { SessionGuard } from 'src/shared/guards/session.guard';\nimport { ApiOperation, ApiResponse, ApiCookieAuth } from '@nestjs/swagger';\n\n@Controller()\nexport class ReservationController {\n  constructor(private readonly reservationService: ReservationService) {}\n\n  @ApiOperation({ summary: 'Create a reservation', description: 'Create a reservation on behalf current user session' })\n\t@ApiResponse({ status: 201, description: 'Successfully created reservation'})\n  @ApiResponse({ status: 400, description: 'Invalid payload'})\n  @ApiResponse({ status: 401, description: 'Unauthorized'})\n\t@ApiResponse({ status: 500, description: 'Internal server error'})\n  @ApiCookieAuth('auth_token')\n  @SessionGuard({onlyRegisteredUser: true})\n  @Post('/reservation')\n  async create(@Req() request: Request, @Body() createReservationDto: CreateReservationDto) {\n    const userId = request.user.$id;\n    const reservation = await this.reservationService.create(userId, createReservationDto);\n    return { status: 201, message: 'Successfully created reservation', reservation: { id: reservation.$id, time: reservation.time, date: reservation.date } };\n  }\n\n  @ApiOperation({ summary: 'Get all reservations of a user', description: 'Get all reservations of a user from its session' })\n\t@ApiResponse({ status: 200, description: 'Users reservations'})\n  @ApiResponse({ status: 400, description: 'Invalid payload'})\n  @ApiResponse({ status: 401, description: 'Unauthorized'})\n\t@ApiResponse({ status: 500, description: 'Internal server error'})\n  @ApiCookieAuth('auth_token')\n  @SessionGuard({onlyRegisteredUser: true})\n  @Get('/reservations')\n  getAllUsersReservations(@Req() request: Request) {\n    const userId = request.user.$id;\n    return this.reservationService.getAllUserReservations(userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ReservationModule.html":{"url":"modules/ReservationModule.html","title":"module - ReservationModule","body":"\n                   \n\n\n\n\n    Modules\n    ReservationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ReservationModule\n\n\n\ncluster_ReservationModule_imports\n\n\n\ncluster_ReservationModule_providers\n\n\n\n\nAppwriteModule\n\nAppwriteModule\n\n\n\nReservationModule\n\nReservationModule\n\nReservationModule -->\n\nAppwriteModule->ReservationModule\n\n\n\n\n\nReservationRepository\n\nReservationRepository\n\nReservationModule -->\n\nReservationRepository->ReservationModule\n\n\n\n\n\nReservationService\n\nReservationService\n\nReservationModule -->\n\nReservationService->ReservationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/resources/reservation/reservation.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ReservationRepository\n                        \n                        \n                            ReservationService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ReservationController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AppwriteModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ReservationService } from './reservation.service';\nimport { ReservationController } from './reservation.controller';\nimport { ReservationRepository } from './reservation.repository';\nimport { AppwriteModule } from 'src/integrations/appwrite/appwrite.module';\n\n@Module({\n  imports: [AppwriteModule],\n  controllers: [ReservationController],\n  providers: [ReservationService, ReservationRepository],\n})\nexport class ReservationModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ReservationRepository.html":{"url":"injectables/ReservationRepository.html","title":"injectable - ReservationRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ReservationRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/resources/reservation/reservation.repository.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                getAllUserReservations\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(appwriteService: AppwriteService)\n                    \n                \n                        \n                            \n                                Defined in src/resources/reservation/reservation.repository.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        appwriteService\n                                                  \n                                                        \n                                                                        AppwriteService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(reservation: Reservation)\n                \n            \n\n\n                    \n                        \n                            Defined in src/resources/reservation/reservation.repository.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                reservation\n                                            \n                                                            Reservation\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getAllUserReservations\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllUserReservations(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/resources/reservation/reservation.repository.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { Reservation } from \"./entities/reservation.entity\";\nimport { AppwriteService } from \"src/integrations/appwrite/appwrite.service\";\n\n@Injectable()\nexport class ReservationRepository{\n\n    constructor(private readonly appwriteService: AppwriteService){\n\n    }\n\n    async getAllUserReservations(userId: string){\n        const reservations = await this.appwriteService.getAllUserResevations(userId);\n        return reservations\n    }\n\n    async create(reservation: Reservation) {\n        const savedReservation = await this.appwriteService.saveDocument('reservations', reservation);\n        return savedReservation;\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ReservationService.html":{"url":"injectables/ReservationService.html","title":"injectable - ReservationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ReservationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/resources/reservation/reservation.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                getAllUserReservations\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reservationRepository: ReservationRepository)\n                    \n                \n                        \n                            \n                                Defined in src/resources/reservation/reservation.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reservationRepository\n                                                  \n                                                        \n                                                                        ReservationRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(userId: string, createReservationDto: CreateReservationDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/resources/reservation/reservation.service.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                createReservationDto\n                                            \n                                                            CreateReservationDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAllUserReservations\n                        \n                    \n                \n            \n            \n                \ngetAllUserReservations(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/resources/reservation/reservation.service.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreateReservationDto } from './dto/create-reservation.dto';\nimport { UpdateReservationDto } from './dto/update-reservation.dto';\nimport { ReservationRepository } from './reservation.repository';\nimport { Reservation } from './entities/reservation.entity';\n\n@Injectable()\nexport class ReservationService {\n  \n  constructor(private readonly reservationRepository: ReservationRepository) {\n\n  }\n\n  getAllUserReservations(userId: string) {\n    return this.reservationRepository.getAllUserReservations(userId);\n  }\n\n  create(userId: string, createReservationDto: CreateReservationDto) {\n    const reservation = new Reservation({\n      ...createReservationDto,\n      userId\n    });\n\n    return this.reservationRepository.create(reservation);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SharedModule.html":{"url":"modules/SharedModule.html","title":"module - SharedModule","body":"\n                   \n\n\n\n\n    Modules\n    SharedModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_SharedModule\n\n\n\ncluster_SharedModule_exports\n\n\n\ncluster_SharedModule_providers\n\n\n\n\nConfigService \n\nConfigService \n\n\n\nContextService \n\nContextService \n\n\n\nHeleprsService \n\nHeleprsService \n\n\n\nSharedModule\n\nSharedModule\n\nConfigService  -->\n\nSharedModule->ConfigService \n\n\n\nContextService  -->\n\nSharedModule->ContextService \n\n\n\nHeleprsService  -->\n\nSharedModule->HeleprsService \n\n\n\n\n\nConfigService\n\nConfigService\n\nSharedModule -->\n\nConfigService->SharedModule\n\n\n\n\n\nContextService\n\nContextService\n\nSharedModule -->\n\nContextService->SharedModule\n\n\n\n\n\nHeleprsService\n\nHeleprsService\n\nSharedModule -->\n\nHeleprsService->SharedModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/shared/shared.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ConfigService\n                        \n                        \n                            ContextService\n                        \n                        \n                            HeleprsService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ConfigService\n                        \n                        \n                            ContextService\n                        \n                        \n                            HeleprsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        //generate shared module in nestjs\n\nimport { Global, Module } from '@nestjs/common';\nimport { ConfigService } from './config/config.service';\nimport { HeleprsService } from './helpers/helpers.service';\nimport { ContextService } from './context/context.service';\nimport { ClsModule } from 'nestjs-cls';\n\n@Global()\n@Module({\n    imports: [ClsModule],\n    controllers: [],\n    providers: [ConfigService, HeleprsService, ContextService],\n    exports: [ConfigService, HeleprsService, ContextService],\n})\nexport class SharedModule { }\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateReservationDto.html":{"url":"classes/UpdateReservationDto.html","title":"class - UpdateReservationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateReservationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/resources/reservation/dto/update-reservation.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PartialType(CreateReservationDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateReservationDto } from './create-reservation.dto';\n\nexport class UpdateReservationDto extends PartialType(CreateReservationDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/resources/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                getUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                        getUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUser(request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get user', description: 'Get user data from its session cookie'})@ApiResponse({status: 200, description: 'User email and name'})@ApiResponse({status: 401, description: 'Unauthorized'})@ApiResponse({status: 500, description: 'Internal server error'})@ApiCookieAuth('auth_token')@SessionGuard()@Get()\n                \n            \n\n                    \n                        \n                            Defined in src/resources/user/user.controller.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                request\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     { email: any; name: any; }\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Req } from '@nestjs/common';\nimport { UserService } from './user.service';\nimport { SessionGuard } from 'src/shared/guards/session.guard';\nimport { ApiCookieAuth, ApiOperation, ApiResponse } from '@nestjs/swagger';\n\n@Controller('user')\nexport class UserController {\n  constructor(private readonly userService: UserService) {}\n\n  @ApiOperation({ summary: 'Get user', description: 'Get user data from its session cookie' })\n\t@ApiResponse({ status: 200, description: 'User email and name'})\n\t@ApiResponse({ status: 401, description: 'Unauthorized'})\n\t@ApiResponse({ status: 500, description: 'Internal server error'})\n  @ApiCookieAuth('auth_token')\n  @SessionGuard()\n  @Get()\n  getUser(@Req() request){\n    const {email, name} = request.user;\n    return {email, name};\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UserModule\n\n\n\ncluster_UserModule_providers\n\n\n\ncluster_UserModule_imports\n\n\n\n\nAppwriteModule\n\nAppwriteModule\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nAppwriteModule->UserModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/resources/user/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AppwriteModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UserService } from './user.service';\nimport { UserController } from './user.controller';\nimport { AppwriteModule } from 'src/integrations/appwrite/appwrite.module';\n\n@Module({\n  imports: [AppwriteModule],\n  controllers: [UserController],\n  providers: [UserService],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/resources/user/user.service.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class UserService {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/dto/register-user.dto.ts\n            \n            class\n            RegisterUserDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/integrations/appwrite/appwrite.service.ts\n            \n            injectable\n            AppwriteService\n            \n                0 %\n                (0/16)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/resources/reservation/dto/create-reservation.dto.ts\n            \n            class\n            CreateReservationDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/resources/reservation/dto/update-reservation.dto.ts\n            \n            class\n            UpdateReservationDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/resources/reservation/entities/reservation.entity.ts\n            \n            class\n            Reservation\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                src/resources/reservation/reservation.controller.ts\n            \n            controller\n            ReservationController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/resources/reservation/reservation.repository.ts\n            \n            injectable\n            ReservationRepository\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/resources/reservation/reservation.service.ts\n            \n            injectable\n            ReservationService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/resources/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/resources/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/shared/config/config.service.ts\n            \n            injectable\n            ConfigService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/shared/config/config.service.ts\n            \n            interface\n            envConfig\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/shared/context/context.service.ts\n            \n            injectable\n            ContextService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/shared/context/context.service.ts\n            \n            variable\n            ContextKeys\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/shared/guards/session.guard.ts\n            \n            injectable\n            AppwriteSessionGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/shared/guards/session.guard.ts\n            \n            variable\n            SessionGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/shared/helpers/helpers.service.ts\n            \n            injectable\n            HeleprsService\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/config : ^3.2.3\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/mapped-types : *\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/swagger : ^7.4.0\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            cookie-parser : ^1.4.6\n        \n            nestjs-cls : ^4.3.0\n        \n            node-appwrite : ^13.0.0\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/envConfig.html":{"url":"interfaces/envConfig.html","title":"interface - envConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  envConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/config/config.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            APPWRITE_API_KEY\n                                        \n                                \n                                \n                                        \n                                            APPWRITE_ENDPOINT\n                                        \n                                \n                                \n                                        \n                                            APPWRITE_PROJECT_ID\n                                        \n                                \n                                \n                                        \n                                            PORT\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        APPWRITE_API_KEY\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        APPWRITE_API_KEY:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        APPWRITE_ENDPOINT\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        APPWRITE_ENDPOINT:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        APPWRITE_PROJECT_ID\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        APPWRITE_PROJECT_ID:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        PORT\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        PORT:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\n\ninterface envConfig {\n    PORT: string,\n    APPWRITE_API_KEY: string,\n    APPWRITE_ENDPOINT: string,\n    APPWRITE_PROJECT_ID: string,\n}\n\n@Injectable()\nexport class ConfigService {\n\n    constructor() {\n    }\n\n    get db() {\n        return {\n            databaseId: process.env.APPWRITE_DATABASE_ID,\n        };\n    }\n\n    get appwriteConfig() {\n        return {\n            APPWRITE_ENDPOINT: process.env.APPWRITE_ENDPOINT || 'https://cloud.appwrite.io/v1',\n            APPWRITE_PROJECT_ID: process.env.APPWRITE_PROJECT_ID,\n            APPWRITE_API_KEY: process.env.APPWRITE_API_KEY,\n        };\n    }\n\n    get globalConfig() {\n        return {\n            host: process.env.APP_HOST || '0.0.0.0',\n            port: +process.env.APP_PORT || 3000,\n        };\n    }\n\n    getPort(): number {\n        return +process.env.PORT || 3000;\n    }\n    \n    get(key: keyof envConfig): string {\n        return process.env[key];\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\nExample :$ npm installRunning the app\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppwriteModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ReservationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SharedModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppwriteModule\n\n\n\ncluster_AppwriteModule_exports\n\n\n\ncluster_AppwriteModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_ReservationModule\n\n\n\ncluster_ReservationModule_providers\n\n\n\ncluster_SharedModule\n\n\n\ncluster_SharedModule_exports\n\n\n\ncluster_SharedModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nReservationModule\n\nReservationModule\n\nAppModule -->\n\nReservationModule->AppModule\n\n\n\n\n\nSharedModule\n\nSharedModule\n\nAppModule -->\n\nSharedModule->AppModule\n\n\n\n\n\nConfigService \n\nConfigService \n\nConfigService  -->\n\nSharedModule->ConfigService \n\n\n\n\n\nContextService \n\nContextService \n\nContextService  -->\n\nSharedModule->ContextService \n\n\n\n\n\nHeleprsService \n\nHeleprsService \n\nHeleprsService  -->\n\nSharedModule->HeleprsService \n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAppwriteService \n\nAppwriteService \n\n\n\nAppwriteModule\n\nAppwriteModule\n\nAuthModule -->\n\nAppwriteModule->AuthModule\n\n\n\nReservationModule -->\n\nAppwriteModule->ReservationModule\n\n\n\nUserModule -->\n\nAppwriteModule->UserModule\n\n\n\nAppwriteService  -->\n\nAppwriteModule->AppwriteService \n\n\n\n\n\nAppwriteService\n\nAppwriteService\n\nAppwriteModule -->\n\nAppwriteService->AppwriteModule\n\n\n\n\n\nAppwriteSessionGuard\n\nAppwriteSessionGuard\n\nAuthModule -->\n\nAppwriteSessionGuard->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nReservationRepository\n\nReservationRepository\n\nReservationModule -->\n\nReservationRepository->ReservationModule\n\n\n\n\n\nReservationService\n\nReservationService\n\nReservationModule -->\n\nReservationService->ReservationModule\n\n\n\n\n\nConfigService\n\nConfigService\n\nSharedModule -->\n\nConfigService->SharedModule\n\n\n\n\n\nContextService\n\nContextService\n\nSharedModule -->\n\nContextService->SharedModule\n\n\n\n\n\nHeleprsService\n\nHeleprsService\n\nSharedModule -->\n\nHeleprsService->SharedModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        6 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    4 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    10 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    4 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Interface\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ContextKeys   (src/.../context.service.ts)\n                        \n                        \n                            SessionGuard   (src/.../session.guard.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/shared/context/context.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ContextKeys\n                        \n                    \n                \n            \n                \n                    \n                        Default value : {\n\tsessionSecret: 'sessionSecret',\n    user: 'user',\n} as const\n                    \n                \n\n\n        \n    \n\n    src/shared/guards/session.guard.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        SessionGuard\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (options?:{ onlyRegisteredUser: boolean}) => {\n    if(options?.onlyRegisteredUser){\n        return applyDecorators(\n            SetMetadata('onlyRegisteredUser', true),\n            UseGuards(AppwriteSessionGuard)\n        )\n    }\n    return applyDecorators(\n        UseGuards(AppwriteSessionGuard)\n    )\n}\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
